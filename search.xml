<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>安装mysqlclient提示mysql_config not found</title>
      <link href="/2021/06/27/%E5%AE%89%E8%A3%85mysqlclient%E6%8F%90%E7%A4%BAmysql-config-not-found/"/>
      <url>/2021/06/27/%E5%AE%89%E8%A3%85mysqlclient%E6%8F%90%E7%A4%BAmysql-config-not-found/</url>
      
        <content type="html"><![CDATA[        <h1 id="安装mysql-devel"   >          <a href="#安装mysql-devel" class="heading-link"><i class="fas fa-link"></i></a>安装mysql-devel</h1>      <p>centos系统使用yum安装 mysql-devel</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mysql-devel</span><br></pre></td></tr></table></div></figure><p>ubuntu 系统apt-get 安装libmysqlclient-dev</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get upgrade</span><br><span class="line">apt-get install libmysqlclient-dev</span><br></pre></td></tr></table></div></figure><p>debian 系统</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install -y libmariadbd18</span><br><span class="line">apt install -y libmariadbd-dev</span><br></pre></td></tr></table></div></figure><span id="more"></span>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>crypto1_bs hardnested破解</title>
      <link href="/2021/06/01/crypto1-bs-hardnested%E7%A0%B4%E8%A7%A3/"/>
      <url>/2021/06/01/crypto1-bs-hardnested%E7%A0%B4%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[        <h2 id="编译安装"   >          <a href="#编译安装" class="heading-link"><i class="fas fa-link"></i></a>编译安装</h2>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y libnfc-bin libnfc-dev</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/aczid/crypto1_bs.git</span><br><span class="line"><span class="built_in">cd</span> crypto1_bs</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/Tilka/crapto1.git crapto1-v3.3</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/vk496/craptev1.git craptev1-v1.1</span><br><span class="line">make</span><br></pre></td></tr></table></div></figure><span id="more"></span>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Use of nohup and &amp;</title>
      <link href="/2021/06/01/Use-of-nohup-and/"/>
      <url>/2021/06/01/Use-of-nohup-and/</url>
      
        <content type="html"><![CDATA[        <h2 id="作用"   >          <a href="#作用" class="heading-link"><i class="fas fa-link"></i></a>作用</h2>      <p>nohup 是 no hungup 的缩写，以为“不挂断”，在使用 Xshell 等工具执行脚本时，有时候会由于网络问题，导致失去连接，终端断开，程序运行一半就意外结束了。这种时候，就可以用 nohup 指令来运行指令，使程序可以忽略挂起信号继续运行。</p><span id="more"></span>        <h2 id="语法"   >          <a href="#语法" class="heading-link"><i class="fas fa-link"></i></a>语法</h2>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup Command [ Arg ... ] [　&amp; ]</span><br></pre></td></tr></table></div></figure><p>nohup 命令运行由 Command 参数和任何相关的 Arg 参数指定的命令，忽略所有挂断（SIGHUP）信号。在注销后使用 nohup 命令运行后台中的程序。要运行后台中的 nohup 命令，添加 &amp; （ 表示“and”的符号）到命令的尾部。</p><p>如果不将 nohup 命令的输出重定向，输出将附加到当前目录的 nohup.out 文件中。如果当前目录的 nohup.out 文件不可写，输出重定向到 <code>$HOME/nohup.out</code> 文件中。</p>        <h2 id="nohup-和-amp-的区别"   >          <a href="#nohup-和-amp-的区别" class="heading-link"><i class="fas fa-link"></i></a>nohup 和 &amp; 的区别</h2>      <ul><li>&amp;：是指在后台运行，当用户退出（挂起）的时候，命令自动跟着结束</li><li>nohup：不挂断的运行，注意并没有后台运行的功能，就是指用nohup运行命令可以使命令永久的执行下去，和用户终端没有关系，例如我们断开SSH连接都不会影响他的运行，注意了nohup没有后台运行的意思；&amp;才是后台运行</li></ul><p>因此将nohup和&amp;结合使用，就可以实现使命令永久地在后台执行的功能</p>        <h2 id="举例"   >          <a href="#举例" class="heading-link"><i class="fas fa-link"></i></a>举例</h2>      <ol><li><code>sh test.sh &amp;</code></li></ol><p>将sh test.sh任务放到后台 ，关闭xshell，对应的任务也跟着停止</p><ol start="2"><li><code>nohup sh test.sh</code></li></ol><p>将 <code>sh test.sh</code> 任务放到后台，关闭标准输入，<strong>终端不再能够接收任何输入（标准输入）</strong>，重定向标准输出和标准错误到当前目录下的 nohup.out 文件，即使关闭 xshell 退出当前session依然继续运行</p><ol start="3"><li><code>nohup sh test.sh &amp;</code></li></ol><p>将sh test.sh任务放到后台，但是依然可以使用标准输入，<strong>终端能够接收任何输入</strong>，重定向标准输出和标准错误到当前目录下的nohup.out文件，即使关闭xshell退出当前session依然继续运行</p>        <h2 id="输出重定向"   >          <a href="#输出重定向" class="heading-link"><i class="fas fa-link"></i></a>输出重定向</h2>      <p>作业在后台运行的时候，可以把输出重定向到某个文件中，相当于一个日志文件，记录运行过程中的输出。使用方法：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup <span class="built_in">command</span> &gt; out.file 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></div></figure><p><code>command&gt;out.file</code> 是将 command 的输出重定向到 out.file 文件，即输出内容不打印到屏幕上，而是输出到out.file文件中。</p><p>在上面，0 – stdin (standard input)，1 – stdout (standard output)，2 – stderr (standard error) ；</p><p>2&gt;&amp;1 是将标准错误（2）重定向到标准输出（&amp;1），标准输出（&amp;1）再被重定向输入到 out.file 文件中。</p>]]></content>
      
      
      <categories>
          
          <category> tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongo add root user</title>
      <link href="/2021/05/14/mongo-add-root-user/"/>
      <url>/2021/05/14/mongo-add-root-user/</url>
      
        <content type="html"><![CDATA[        <h2 id="添加用户"   >          <a href="#添加用户" class="heading-link"><i class="fas fa-link"></i></a>添加用户</h2>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">use admin</span><br><span class="line">db.createUser(&#123;</span><br><span class="line">    user: &quot;admin&quot;,</span><br><span class="line">    pwd: &quot;123456&quot;,</span><br><span class="line">    roles: [&#123;</span><br><span class="line">        role: &quot;root&quot;,</span><br><span class="line">        db: &quot;admin&quot;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure><span id="more"></span>        <h2 id="修改配置"   >          <a href="#修改配置" class="heading-link"><i class="fas fa-link"></i></a>修改配置</h2>      <figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">net:</span><br><span class="line">port: 27017</span><br><span class="line"># bindIp: 127.0.0.1</span><br><span class="line">security:</span><br><span class="line">authorization: enabled</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu docker create and open ssh</title>
      <link href="/2021/05/01/ubuntu-docker-create-and-open-ssh/"/>
      <url>/2021/05/01/ubuntu-docker-create-and-open-ssh/</url>
      
        <content type="html"><![CDATA[        <h2 id="The-preparatory-work"   >          <a href="#The-preparatory-work" class="heading-link"><i class="fas fa-link"></i></a>The preparatory work</h2>      <p>Pull ubuntu image</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull ubuntu:18.04</span><br></pre></td></tr></table></div></figure><p>Run ubuntu container back</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd -p 3022:22 -p 3021:8080 ubuntu:18.04 bash</span><br></pre></td></tr></table></div></figure><blockquote><p>3022 is ssh port, 3021 is web port</p></blockquote><span id="more"></span>        <h2 id="Configuration"   >          <a href="#Configuration" class="heading-link"><i class="fas fa-link"></i></a>Configuration</h2>      <p>Into the container</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 1c0 bash</span><br></pre></td></tr></table></div></figure><blockquote><p>1c0 is the first three letters of container id</p></blockquote><p>Set the root password</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd root</span><br></pre></td></tr></table></div></figure><p>Update and upgrade</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update &amp;&amp; apt upgrade</span><br></pre></td></tr></table></div></figure>        <h3 id="Install-package"   >          <a href="#Install-package" class="heading-link"><i class="fas fa-link"></i></a>Install package</h3>      <p>Install ssh client and vim</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install ssh vim</span><br></pre></td></tr></table></div></figure><p>Install ssh server</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install openssh-server</span><br></pre></td></tr></table></div></figure>        <h3 id="Verify-SSHServer"   >          <a href="#Verify-SSHServer" class="heading-link"><i class="fas fa-link"></i></a>Verify SSHServer</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -e | grep ssh</span><br></pre></td></tr></table></div></figure><blockquote><p>if not start run <code>/etc/init.d/ssh start</code></p></blockquote><p><img src="https://gitee.com/pandalzy/cloud_img/raw/master/imgs/20210501092843.png"></p>        <h2 id="More"   >          <a href="#More" class="heading-link"><i class="fas fa-link"></i></a>More</h2>      <p>then you can add other user and do more</p>]]></content>
      
      
      <categories>
          
          <category> tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu add user</title>
      <link href="/2021/05/01/ubuntu-add-user/"/>
      <url>/2021/05/01/ubuntu-add-user/</url>
      
        <content type="html"><![CDATA[<p>Add user and make user home dir</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd nplus -m -s /bin/bash</span><br></pre></td></tr></table></div></figure><p>Set user password</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd nplus</span><br></pre></td></tr></table></div></figure><p>Delete the user completely</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel -r nplus</span><br></pre></td></tr></table></div></figure><span id="more"></span><p>Add user options</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">-b, --base-dir BASE_DIR新账户的主目录的基目录</span><br><span class="line">-c, --comment COMMENT         新账户的 GECOS 字段</span><br><span class="line">-d, --home-dir HOME_DIR       新账户的主目录</span><br><span class="line">-D, --defaults显示或更改默认的 useradd 配置</span><br><span class="line">-e, --expiredate EXPIRE_DATE  新账户的过期日期</span><br><span class="line">-f, --inactive INACTIVE       新账户的密码不活动期</span><br><span class="line">-g, --gid GROUP新账户主组的名称或 ID</span><br><span class="line">-G, --groups GROUPS新账户的附加组列表</span><br><span class="line">-h, --help                    显示此帮助信息并推出</span><br><span class="line">-k, --skel SKEL_DIR使用此目录作为骨架目录</span><br><span class="line">-K, --key KEY&#x3D;VALUE           不使用 &#x2F;etc&#x2F;login.defs 中的默认值</span><br><span class="line">-l, --no-log-init不要将此用户添加到最近登录和登录失败数据库</span><br><span class="line">-m, --create-home创建用户的主目录</span><br><span class="line">-M, --no-create-home不创建用户的主目录</span><br><span class="line">-N, --no-user-group不创建同名的组</span><br><span class="line">-o, --non-unique允许使用重复的 UID 创建用户</span><br><span class="line">-p, --password PASSWORD加密后的新账户密码</span><br><span class="line">-r, --system                  创建一个系统账户</span><br><span class="line">-s, --shell SHELL新账户的登录 shell</span><br><span class="line">-u, --uid UID新账户的用户 ID</span><br><span class="line">-U, --user-group创建与用户同名的组</span><br><span class="line">-Z, --selinux-user SEUSER为 SELinux 用户映射使用指定 SEUSER</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux修改默认shell</title>
      <link href="/2021/04/27/Linux%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4shell/"/>
      <url>/2021/04/27/Linux%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4shell/</url>
      
        <content type="html"><![CDATA[<p>输入<code>cat /etc/shells</code>查看可用shell</p><figure class="highlight sh"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /etc/shells: valid login shells</span></span><br><span class="line">/bin/sh</span><br><span class="line">/bin/bash</span><br><span class="line">/bin/rbash</span><br><span class="line">/bin/dash</span><br></pre></td></tr></table></div></figure><span id="more"></span><p>设置默认shell</p><figure class="highlight sh"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/bash</span><br><span class="line"><span class="comment"># 输入管理员密码就可以了</span></span><br></pre></td></tr></table></div></figure><p>检查是否设置成功</p><figure class="highlight sh"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep 用户名 /etc/passwd</span><br><span class="line"><span class="comment"># 会有设置的shell</span></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql-server-5.7 is not configured yet</title>
      <link href="/2021/04/27/mysql-server-5-7-is-not-configured-yet/"/>
      <url>/2021/04/27/mysql-server-5-7-is-not-configured-yet/</url>
      
        <content type="html"><![CDATA[<figure class="highlight sh"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Do you want to <span class="built_in">continue</span>? [Y/n] Y</span><br><span class="line">Setting up mysql-server-5.7 (5.7.28-0ubuntu0.18.04.4) ...</span><br><span class="line">/var/lib/dpkg/info/mysql-server-5.7.postinst: line 191: /usr/share/mysql-common/configure-symlinks: No such file or directory</span><br><span class="line">dpkg: error processing package mysql-server-5.7 (--configure):</span><br><span class="line"> installed mysql-server-5.7 package post-installation script subprocess returned error <span class="built_in">exit</span> status 127</span><br><span class="line">dpkg: dependency problems prevent configuration of mysql-server:</span><br><span class="line"> mysql-server depends on mysql-server-5.7; however:</span><br><span class="line">  Package mysql-server-5.7 is not configured yet.</span><br><span class="line"></span><br><span class="line">dpkg: error processing package mysql-server (--configure):</span><br><span class="line"> dependency problems - leaving unconfigured</span><br><span class="line">No apport report written because the error message indicates its a followup error from a previous failure.</span><br><span class="line">                                                                                                          Errors were encountered <span class="keyword">while</span> processing:</span><br><span class="line"> mysql-server-5.7</span><br><span class="line"> mysql-server</span><br><span class="line">E: Sub-process /usr/bin/dpkg returned an error code (1)</span><br></pre></td></tr></table></div></figure><span id="more"></span><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt purge mysql-client-5.7 mysql-client-core-5.7 mysql-common mysql-server-5.7 mysql-server-core-5.7 mysql-server</span><br><span class="line">sudo apt update &amp;&amp; sudo apt dist-upgrade &amp;&amp; sudo apt autoremove &amp;&amp; sudo apt -f install</span><br><span class="line">sudo apt install mysql-server</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu 安装python3.8</title>
      <link href="/2021/04/27/ubuntu-%E5%AE%89%E8%A3%85python3-8/"/>
      <url>/2021/04/27/ubuntu-%E5%AE%89%E8%A3%85python3-8/</url>
      
        <content type="html"><![CDATA[<p>下载源码</p><figure class="highlight sh"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/3.8.0/Python-3.8.0.tgz</span><br></pre></td></tr></table></div></figure><p>解压源码</p><figure class="highlight sh"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvzf Python-3.8.0.tgz</span><br></pre></td></tr></table></div></figure><span id="more"></span><p>进入目录</p><figure class="highlight sh"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> Python-3.8.0</span><br></pre></td></tr></table></div></figure><p>配置安装路径</p><figure class="highlight sh"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --with-ssl --prefix=/usr/<span class="built_in">local</span>/python3</span><br></pre></td></tr></table></div></figure><p>安装python3.8依赖</p><figure class="highlight sh"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sudo apt-get update</span></span><br><span class="line"><span class="comment"># sudo apt-get upgrade</span></span><br><span class="line"><span class="comment"># sudo apt-get dist-upgrade</span></span><br><span class="line">sudo apt-get install build-essential python-dev python-setuptools python-pip python-smbus libncursesw5-dev libgdbm-dev libc6-dev zlib1g-dev libsqlite3-dev tk-dev libssl-dev openssl libffi-dev</span><br></pre></td></tr></table></div></figure><p>编译</p><figure class="highlight sh"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></div></figure><p>安装</p><figure class="highlight sh"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></div></figure><p>删除软链接</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /usr/bin/python3</span><br><span class="line">sudo rm -rf /usr/bin/pip3</span><br></pre></td></tr></table></div></figure><p>新建软链接</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/local/python3/bin/python3.8 /usr/bin/python3</span><br><span class="line">sudo ln -s /usr/local/python3/bin/pip3.8 /usr/bin/pip3</span><br></pre></td></tr></table></div></figure><p>检查是否安装成功</p><figure class="highlight sh"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 安装go及换源</title>
      <link href="/2021/04/13/Mac-%E5%AE%89%E8%A3%85go/"/>
      <url>/2021/04/13/Mac-%E5%AE%89%E8%A3%85go/</url>
      
        <content type="html"><![CDATA[        <h2 id="brew-安装-go"   >          <a href="#brew-安装-go" class="heading-link"><i class="fas fa-link"></i></a>brew 安装 go</h2>      <figure class="highlight sh"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install go</span><br></pre></td></tr></table></div></figure>        <h2 id="设置-path"   >          <a href="#设置-path" class="heading-link"><i class="fas fa-link"></i></a>设置 path</h2>      <figure class="highlight sh"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim .zshrc</span><br></pre></td></tr></table></div></figure><span id="more"></span><p>加入下述内容</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># go</span></span><br><span class="line"><span class="built_in">export</span> GOROOT=/usr/<span class="built_in">local</span>/opt/go/libexec</span><br><span class="line"><span class="built_in">export</span> GOPATH=<span class="variable">$HOME</span>/.go</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOROOT</span>/bin:<span class="variable">$GOPATH</span>/bin</span><br></pre></td></tr></table></div></figure>        <h2 id="换源"   >          <a href="#换源" class="heading-link"><i class="fas fa-link"></i></a>换源</h2>      <figure class="highlight sh"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim .zshrc</span><br></pre></td></tr></table></div></figure><figure class="highlight sh"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启用 Go Modules 功能</span></span><br><span class="line">go env -w GO111MODULE=on</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 GOPROXY 环境变量，以下三选一</span></span><br><span class="line"><span class="comment"># 1. 七牛 CDN</span></span><br><span class="line">go env -w  GOPROXY=https://goproxy.cn,direct</span><br><span class="line"><span class="comment"># 2. 阿里云</span></span><br><span class="line">go env -w GOPROXY=https://mirrors.aliyun.com/goproxy/,direct</span><br><span class="line"><span class="comment"># 3. 官方</span></span><br><span class="line">go env -w  GOPROXY=https://goproxy.io,direct</span><br></pre></td></tr></table></div></figure><figure class="highlight sh"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go env | grep GOPROXY</span><br><span class="line">GOPROXY=<span class="string">&quot;https://goproxy.cn&quot;</span></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker 换源</title>
      <link href="/2021/04/11/docker-%E6%8D%A2%E6%BA%90/"/>
      <url>/2021/04/11/docker-%E6%8D%A2%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<figure class="highlight json"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;debug&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;experimental&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://hub-mirror.c.163.com&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac 终端美化 iterm2+zsh</title>
      <link href="/2021/04/09/mac-%E7%BB%88%E7%AB%AF%E7%BE%8E%E5%8C%96-iterm2-zsh/"/>
      <url>/2021/04/09/mac-%E7%BB%88%E7%AB%AF%E7%BE%8E%E5%8C%96-iterm2-zsh/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/pandalzy/cloud_img/raw/master/imgs/%E6%88%AA%E5%B1%8F2021-04-09%20%E4%B8%8B%E5%8D%883.24.39.png"></p><span id="more"></span>        <h2 id="下载-iTerm2"   >          <a href="#下载-iTerm2" class="heading-link"><i class="fas fa-link"></i></a>下载 iTerm2</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://iterm2.com/" >iTerm2 - macOS Terminal Replacement</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>快捷打开快捷键设置</p><p><img src="https://gitee.com/pandalzy/cloud_img/raw/master/imgs/%E6%88%AA%E5%B1%8F2021-04-09%20%E4%B8%8B%E5%8D%883.40.36.png" alt="快捷打开快捷键设置"></p>        <h2 id="配色方案"   >          <a href="#配色方案" class="heading-link"><i class="fas fa-link"></i></a>配色方案</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://ethanschoonover.com/solarized/" >Solarized (ethanschoonover.com)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>下载解压，然后打开 iTerm2 下的偏好设置 preference，选择 solarized 文件下的 Solarized Dark.itermcolors</p><p><img src="https://gitee.com/pandalzy/cloud_img/raw/master/imgs/%E6%88%AA%E5%B1%8F2021-04-09%20%E4%B8%8B%E5%8D%883.44.44.png"></p>        <h2 id="安装-oh-my-zsh"   >          <a href="#安装-oh-my-zsh" class="heading-link"><i class="fas fa-link"></i></a>安装 oh-my-zsh</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://github.com/ohmyzsh/ohmyzsh" >ohmyzsh</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h2 id="配置主题"   >          <a href="#配置主题" class="heading-link"><i class="fas fa-link"></i></a>配置主题</h2>      <ol><li>用 vim 编辑隐藏文件 .zshrc， 终端输入<code>vim ~/.zshrc</code></li><li><code>ZSH_THEME=&quot;agnoster&quot;</code> 将 zsh 主题修改为 agnoster</li></ol><p><img src="https://gitee.com/pandalzy/cloud_img/raw/master/imgs/%E6%88%AA%E5%B1%8F2021-04-09%20%E4%B8%8B%E5%8D%883.50.19.png"></p><ol><li>应用“agnoster”主题需要特殊的字体支持，否则会出现乱码情况，</li><li>[fonts/Meslo LG M Regular for Powerline.ttf at master · powerline/fonts (github.com)](<span class="exturl"><a class="exturl__link"   href="https://github.com/powerline/fonts/blob/master/Meslo" >https://github.com/powerline/fonts/blob/master/Meslo</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> Slashed/Meslo LG M Regular for Powerline.ttf)</li></ol><p><img src="https://gitee.com/pandalzy/cloud_img/raw/master/imgs/%E6%88%AA%E5%B1%8F2021-04-09%20%E4%B8%8B%E5%8D%883.51.00.png"></p>        <h2 id="代码补全"   >          <a href="#代码补全" class="heading-link"><i class="fas fa-link"></i></a>代码补全</h2>      <p>克隆仓库到本地 ~/.oh-my-zsh/custom/plugins 路径下</p><figure class="highlight sh"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://github.com/zsh-users/zsh-autosuggestions <span class="variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></div></figure><p>用 vim 编辑 .zshrc 文件，找到插件设置命令，默认是<code>plugins=(git)</code>，我们把它修改为<code>plugins=(zsh-autosuggestions git)</code></p><p><img src="https://gitee.com/pandalzy/cloud_img/raw/master/imgs/%E6%88%AA%E5%B1%8F2021-04-09%20%E4%B8%8B%E5%8D%883.57.51.png"></p><p>PS：重新打开终端时可能看不到变化，可能字体颜色太淡了，把其改亮一些：</p><ol><li><code>cd ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions</code></li><li>用 vim 编辑 zsh-autosuggestions.zsh 文件，修改<code>ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE=&#39;fg=10&#39;</code></li></ol>        <h2 id="语法高亮"   >          <a href="#语法高亮" class="heading-link"><i class="fas fa-link"></i></a>语法高亮</h2>      <ul><li>使用 homebrew 包管理工具安装 <span class="exturl"><a class="exturl__link"   href="https://github.com/zsh-users/zsh-syntax-highlighting" >zsh-syntax-highlighting</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 插件<ul><li><code>brew install zsh-syntax-highlighting</code></li></ul></li><li>配置 .zshrc 文件，插入一行<ul><li><code>source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</code></li></ul></li></ul><p><img src="https://gitee.com/pandalzy/cloud_img/raw/master/imgs/%E6%88%AA%E5%B1%8F2021-04-09%20%E4%B8%8B%E5%8D%884.13.43.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker 修改时区</title>
      <link href="/2021/04/09/Docker-%E4%BF%AE%E6%94%B9%E6%97%B6%E5%8C%BA/"/>
      <url>/2021/04/09/Docker-%E4%BF%AE%E6%94%B9%E6%97%B6%E5%8C%BA/</url>
      
        <content type="html"><![CDATA[        <h3 id="1-Alpine"   >          <a href="#1-Alpine" class="heading-link"><i class="fas fa-link"></i></a>1. Alpine</h3>      <figure class="highlight sh"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FROM alpine:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装tzdata</span></span><br><span class="line">RUN apk add --no-cache tzdata</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置时区</span></span><br><span class="line">ENV TZ=<span class="string">&quot;Asia/Shanghai&quot;</span></span><br></pre></td></tr></table></div></figure><ul><li>验证</li></ul><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t alpine:time .</span><br><span class="line">docker run --rm -it alpine:time date</span><br></pre></td></tr></table></div></figure><span id="more"></span>        <h3 id="2-Ubuntu"   >          <a href="#2-Ubuntu" class="heading-link"><i class="fas fa-link"></i></a>2. Ubuntu</h3>      <figure class="highlight sh"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置localtime</span></span><br><span class="line"><span class="comment"># 此处需要优先设置localtime，否则安装tzdata将会进入时区选择</span></span><br><span class="line">RUN ln -fs /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装tzdata</span></span><br><span class="line">RUN apt-get update \</span><br><span class="line">&amp;&amp; apt-get install tzdata -y \</span><br><span class="line">&amp;&amp; apt-get clean</span><br></pre></td></tr></table></div></figure><ul><li>验证</li></ul><figure class="highlight sh"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t ubuntu:time .</span><br><span class="line">docker run --rm -it ubuntu:time date</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uWSGI listen queue 队列溢出的问题</title>
      <link href="/2021/04/09/uWSGI-listen-queue-%E9%98%9F%E5%88%97%E6%BA%A2%E5%87%BA%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2021/04/09/uWSGI-listen-queue-%E9%98%9F%E5%88%97%E6%BA%A2%E5%87%BA%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>如果没有设置 uwsgi 的 –listen，如果<code>sysctl -a | grep net.core.somaxconn</code>发现net.core.somaxconn=128。<br>那你使用uwsgi启动的服务，单机最大支持并发数为100*(启动的uwsgi进程数)。<br>如果启动进程为4个，则最大并发只能支持400，这样会在 uwsgi 的 log 日志中出现错误 uWSGI listen queue of socket 4 full。<br>同时，nginx对应也会出现错误 upstream time out。</p><span id="more"></span><p>方法一：</p><p>修改系统参数<code>vim /etc/sysctl.conf</code></p><p>在文件最后添加一行记录<code>net.core.somaxconn=1024</code></p><p>执行<code>sysctl -p</code>重新 load 参数设置，这样会立即生效，并且以后重新启动机器也会生效。</p><p>设置 uwsgi 启动的<code>--listen 1024</code></p><p>这样 你的机器并发数就可以得到一个很大的提升。</p><p>方法二：</p><p>docker 部署，运行时添加 <code>--sysctl net.core.somaxconn=4096</code></p><p>docker-compose 中</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sysctls:</span><br><span class="line">  net.core.somaxconn: 1024</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uwsgi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uwsgi错误：error: lto-wrapper failed collect2</title>
      <link href="/2021/04/09/uwsgi%E9%94%99%E8%AF%AF%EF%BC%9Aerror-lto-wrapper-failed-collect2/"/>
      <url>/2021/04/09/uwsgi%E9%94%99%E8%AF%AF%EF%BC%9Aerror-lto-wrapper-failed-collect2/</url>
      
        <content type="html"><![CDATA[<p>uwsgi错误：error: lto-wrapper failed collect2<br>红色错误警告，主要报错内容是：<br>error: lto-wrapper failed<br>collect2: error: ld returned 1 exit status<br>原因是gcc版本高</p><span id="more"></span><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看当前系统安装所有版本的gcc</span></span><br><span class="line">ls /usr/bin/gcc* -l </span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果gcc有5以下的版本，则不用在安装</span></span><br><span class="line">sudo apt-get install gcc-4.8</span><br><span class="line"><span class="meta">#</span><span class="bash"> 更改gcc系统默认版本</span></span><br><span class="line">sudo rm /usr/bin/gcc # 删除已有软连接</span><br><span class="line">sudo ln -s /usr/bin/gcc-4.8 /usr/bin/gcc # 创建指向gcc4.8的软连接</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uwsgi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Celery Cannot connect to amqp://guest:</title>
      <link href="/2021/04/09/Celery-Cannot-connect-to-amqp-guest/"/>
      <url>/2021/04/09/Celery-Cannot-connect-to-amqp-guest/</url>
      
        <content type="html"><![CDATA[<p>Celery 提示[ERROR/MainProcess] consumer: Cannot connect to amqp://guest: @127.0.0.1:5672//: [Errno 61] Connection refused.<br>解决方法：需要启动rabbitmq-server<br>sudo rabbitmq-server -detached</p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> celery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Web初探</title>
      <link href="/2020/11/14/Java%20Web/"/>
      <url>/2020/11/14/Java%20Web/</url>
      
        <content type="html"><![CDATA[        <h2 id="01-Servlet基础"   >          <a href="#01-Servlet基础" class="heading-link"><i class="fas fa-link"></i></a>01-Servlet基础</h2>              <h3 id="servlet"   >          <a href="#servlet" class="heading-link"><i class="fas fa-link"></i></a>servlet</h3>      <ul><li>什么是servlet<ul><li>运行在Servlet容器/Web应用服务/Tomcat，负责与客户端进行通信</li></ul></li><li>servlet功能<ul><li>创建并返回基于客户请求的动态HTML页面</li><li>与数据库进行通信</li></ul></li><li>如何使用<ul><li>servlet本身是一组接口，自定义一个类，并且实现servlet接口，这个类就具备接受客户端请求以及做出响应的功能。</li></ul></li></ul><span id="more"></span><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iot.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig var1)</span> <span class="keyword">throws</span> ServletException </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是servlet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>浏览器不知能直接访问servlet，需要配置映射访问</p><ul><li><p>基于xml映射（web.xml）</p></li><li><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;         version=&quot;4.0&quot;&gt;    &lt;servlet&gt;        &lt;servlet-name&gt;myservlet&lt;/servlet-name&gt;        &lt;servlet-class&gt;com.iot.servlet.MyServlet&lt;/servlet-class&gt;    &lt;/servlet&gt;    &lt;servlet-mapping&gt;        &lt;servlet-name&gt;myservlet&lt;/servlet-name&gt;        &lt;url-pattern&gt;/myservlet&lt;/url-pattern&gt;    &lt;/servlet-mapping&gt;&lt;/web-app&gt;<figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 基于注解</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96;jaVA</span><br><span class="line">  @WebServlet(&quot;&#x2F;myservlet&quot;)</span><br><span class="line">  public class MyServlet implements Servlet &#123;&#125;</span><br></pre></td></tr></table></div></figure></code></pre></li></ul>        <h3 id="req与res"   >          <a href="#req与res" class="heading-link"><i class="fas fa-link"></i></a>req与res</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;我是servlet&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="乱码问题"   >          <a href="#乱码问题" class="heading-link"><i class="fas fa-link"></i></a>乱码问题</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);  <span class="comment">// 请求中文</span></span><br><span class="line">    System.out.println(<span class="string">&quot;我是servlet&quot;</span>);</span><br><span class="line">    res.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);  <span class="comment">// 响应中文</span></span><br><span class="line">    res.getWriter().write(<span class="string">&quot;哈哈&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="servlet生命周期"   >          <a href="#servlet生命周期" class="heading-link"><i class="fas fa-link"></i></a>servlet生命周期</h3>      <ol><li>当浏览器访问Servlet的时候，Tomcat 会查询当前Servlet的实例化对象是否存在，如果不存在，则通过反射机制动态创建对象。如果存在，直接执行第3步。</li><li>调用init完成初始化。<ol><li>ServletConfig：用来描述Servlet的基本信息</li><li>getServletName() 返回servlet的名称，全类名（带包名）。</li><li>getInitParameter(String key) 获取init参数（web.xml中配置）。</li><li>getInitParameterNames() 返回所有initParameter的name值。</li><li>getServletContext() 返回ServletContext对象，它是Servlet的上下文，整个Servlet的管理者。</li></ol></li><li>调用service完成业务逻辑操作（可以多次调用）。</li><li>关闭tomcat会调用destroy方法，释放资源。</li></ol>        <h3 id="Servlet层次结构"   >          <a href="#Servlet层次结构" class="heading-link"><i class="fas fa-link"></i></a>Servlet层次结构</h3>      <p>Servlet-&gt;GenericServlet-&gt;HttpServlet</p>        <h3 id="HttpServlet"   >          <a href="#HttpServlet" class="heading-link"><i class="fas fa-link"></i></a>HttpServlet</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;哈哈&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="02-JSP基础"   >          <a href="#02-JSP基础" class="heading-link"><i class="fas fa-link"></i></a>02-JSP基础</h2>      <p>JSP本质上是一个Servlet，JSP主要负责与用户交互，将最终的界面呈现给用户，HTML+JS+CSS+Java的混合文件。</p><p>当服务器接收到一个jsp请求时，将该请求交给jsp引擎去处理，每一个jsp页面第一次被访问的时候，jsp引擎会将他翻译成一个servlet文件，再由web容器调用servlet完成响应。</p><p>具体嵌入方式中：</p><ol><li>jsp脚本，执行Java逻辑代码</li></ol><figure class="highlight jsp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    System.out.println(test());</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></div></figure><ol start="2"><li>jsp声明，定义Java方法</li></ol><figure class="highlight jsp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello&quot;</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></div></figure><ol start="3"><li>jsp表达式，把Java对象直接输出到HTML页面中</li></ol><figure class="highlight jsp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%=Java表达式%&gt;</span><br></pre></td></tr></table></div></figure>        <h3 id="jsp的9个内置对象"   >          <a href="#jsp的9个内置对象" class="heading-link"><i class="fas fa-link"></i></a>jsp的9个内置对象</h3>      <ol><li><strong>request</strong>：表示一次请求，HttpServletRequest</li><li><strong>response</strong>：表示一次响应，HttpServletResponse</li><li><strong>pageContext</strong>：页面上下文，获取页面信息，PageContext</li><li><strong>session</strong>：表示一次会话，保存用户信息，HttpSession</li><li><strong>application</strong>：当前web应用，全局对象，保存所有用户的共享信息，ServletContext</li><li>config：当前jsp对应的Servlet的ServletConfig对象，获取当前Servlet信息</li><li>out：向浏览器输出数据，JspWriter</li><li>page：当前jsp对应的Servlet，Servlet</li><li>exception：jsp页面发生的异常，Exception</li></ol>        <h4 id="request常用方法"   >          <a href="#request常用方法" class="heading-link"><i class="fas fa-link"></i></a>request常用方法</h4>      <ol><li><code>String getParameter(String key)</code>：获取客户端传来的参数</li><li><code>void setAttribute(String key, Object value)</code>：通过键值对的形式保存数据</li><li><code>Object getAttribute(String key)</code>：通过key取出value</li><li><code>RequestDispatcher getRequestDispatcher(String path)</code>：返回一个对象，该对象的forward用于转发请求（服务端跳转）</li><li><code>String[] getParameterValues()</code>：获取客户端传来的多个同名参数</li><li><code>void setCharacterEncoding(String charse)</code>：指定每个请求的编码</li></ol>        <h4 id="response常用方法"   >          <a href="#response常用方法" class="heading-link"><i class="fas fa-link"></i></a>response常用方法</h4>      <ol><li><code>sendRedirect(String path)</code>：重定向，页面之间的跳转（客户端跳转）</li></ol>        <h4 id="session"   >          <a href="#session" class="heading-link"><i class="fas fa-link"></i></a>session</h4>      <ul><li>实现会话两种方法<ul><li>session</li><li>cookie</li></ul></li></ul>        <h4 id="session常用方法"   >          <a href="#session常用方法" class="heading-link"><i class="fas fa-link"></i></a>session常用方法</h4>      <ul><li><p><code>String getId()</code>：获取sessionID</p></li><li><p><code>void setMaxInactiveInterval(int interval)</code>：设置session失效时间，单位为秒</p></li><li><p><code>int getMaxInactiveInterval()</code>：获取失效时间</p></li><li><p><code>void invalidate()</code>：设置session立即失效</p></li><li><p><code>void setAttribute(String key, Object value)</code></p></li><li><p><code>Object getAttribute(String key)</code></p></li><li><p><code>void removeAttribute(String key)</code></p></li></ul>        <h4 id="cookie"   >          <a href="#cookie" class="heading-link"><i class="fas fa-link"></i></a>cookie</h4>      <p>服务端在HTTP响应中附带传给浏览器的一个小文本文件，一旦浏览器保存了某个cookie，在之后的请求和响应中，会将此cookie来回传递，这样就可以通过cookie这个载体完成客户端和服务端的数据交互。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">response.addCookie(cookie);</span><br></pre></td></tr></table></div></figure><figure class="highlight jsp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    Cookie[] cookies = request.getCookies();</span><br><span class="line">    <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">        System.out.print(cookie.getName() + <span class="string">&quot;=&quot;</span>);</span><br><span class="line">        System.out.println(cookie.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></div></figure>        <h4 id="cookie常用方法"   >          <a href="#cookie常用方法" class="heading-link"><i class="fas fa-link"></i></a>cookie常用方法</h4>      <ul><li>void setMaxAge(int age)：设置有效时间，单位为秒</li><li>int getMaxAge()：获取有效时间，默认为-1</li><li>String getName()：获取name</li><li>String getValue()：获取value</li></ul>        <h4 id="session和cookie区别"   >          <a href="#session和cookie区别" class="heading-link"><i class="fas fa-link"></i></a>session和cookie区别</h4>      <ul><li>session<ul><li>保存在服务器</li><li>保存的数据是object</li><li>会随着会话的结束而销毁</li><li>保存重要信息</li></ul></li><li>cookie<ul><li>保存在浏览器</li><li>保存的数据是String</li><li>可以长期保存，与会话无关</li><li>保存不重要信息</li></ul></li></ul>        <h2 id="03-JSP内置对象作用域"   >          <a href="#03-JSP内置对象作用域" class="heading-link"><i class="fas fa-link"></i></a>03-JSP内置对象作用域</h2>              <h3 id="作用域"   >          <a href="#作用域" class="heading-link"><i class="fas fa-link"></i></a>作用域</h3>      <p>page&lt;request&lt;session&lt;application</p><p>page只在当前页面有效</p><p>request在一次请求中有效</p><p>session在一次会话中有效</p><p>application对应整个web应用</p>        <h3 id="EL表达式"   >          <a href="#EL表达式" class="heading-link"><i class="fas fa-link"></i></a>EL表达式</h3>      <p>Expression Language表达式，替代JSP页面中数据访问时的复代码，<code>$&#123;表达式&#125;</code></p><p>可以非常便捷的取出域对象（pageContext、request、session、application）中保存的数据，前提是一定要先setAttribute</p><figure class="highlight jsp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    request.setAttribute(<span class="string">&quot;pk&quot;</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">$&#123;pk&#125;</span><br></pre></td></tr></table></div></figure><ul><li>EL对4钟域对象的默认查找顺序：pageContext-&gt;request-&gt;session-&gt;application，找到立即返回</li><li>指定作用域查找：<ul><li>pageContext：<code>$&#123;pageScope.name&#125;</code></li><li>request：<code>$&#123;requestScope.name&#125;</code></li><li>session：<code>$&#123;sessionScope.name&#125;</code></li><li>application：<code>$&#123;applicationScope.name&#125;</code></li></ul></li></ul>        <h4 id="EL执行表达式"   >          <a href="#EL执行表达式" class="heading-link"><i class="fas fa-link"></i></a>EL执行表达式</h4>      <p>&amp;&amp;（and）、||（or）、!（not）、==（eq）、!=（ne）等</p><p>${empty test}，empty判断，长度0（String、集合）为ture</p>        <h3 id="JSTL"   >          <a href="#JSTL" class="heading-link"><i class="fas fa-link"></i></a>JSTL</h3>      <p>JSP为开发者提供的一系列标签，可以完成一些逻辑处理。JSTL与EL结合使用，使代码简洁。</p><ul><li><p>JSTL使用</p><ul><li>导入jar包（jstl.jar、standard.jar）<span class="exturl"><a class="exturl__link"   href="http://archive.apache.org/dist/jakarta/taglibs/standard/binaries/" >下载地址</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li>在JSP页面开始的地方引入，<code>&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</code></li><li>在需要的地方使用</li></ul></li><li><p>优点</p><ul><li>提供了统一的标签</li><li>可以用于编写各种动态功能</li></ul></li><li><p>常用标签</p><ul><li>set、out、remove、catch</li></ul></li><li><p>set：向域对象（默认pageContext）添加数据</p></li></ul><figure class="highlight"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    xxx.setAttribute(k, v);</span><br><span class="line">%&gt;</span><br><span class="line">等价于</span><br><span class="line">&lt;c:set var=&quot;name&quot; value=&quot;name&quot;&gt;&lt;/c:set&gt;</span><br><span class="line">向request中添加</span><br><span class="line">&lt;c:set var=&quot;name&quot; value=&quot;name&quot; scope=&quot;request&quot;&gt;&lt;/c:set&gt;</span><br><span class="line">修改属性</span><br><span class="line">&lt;c:set target=&quot;$&#123;user&#125;&quot; property=&quot;name&quot; value=&quot;李四&quot;&gt;&lt;/c:set&gt;</span><br></pre></td></tr></table></div></figure><figure class="highlight"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:out value=&quot;$&#123;name&#125;&quot; default=&quot;未定义&quot;&gt;&lt;/c:out&gt;</span><br></pre></td></tr></table></div></figure><ul><li>catch：捕获异常</li></ul><figure class="highlight jsp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:<span class="keyword">catch</span> <span class="keyword">var</span>=<span class="string">&quot;error&quot;</span>&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/c:catch&gt;</span><br><span class="line">$&#123;error&#125;</span><br></pre></td></tr></table></div></figure><ul><li>条件标签：if、choose-when</li></ul><figure class="highlight"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:if test=&quot;$&#123;num1 &gt; num2&#125;&quot;&gt;ok&lt;/c:if&gt;</span><br><span class="line">无<span class="keyword">else</span></span><br><span class="line">&lt;c:if test=&quot;$&#123;num1 &lt;= num2&#125;&quot;&gt;fail&lt;/c:if&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:choose&gt;</span><br><span class="line">    &lt;c:when test=&quot;$&#123;num1&gt;num2&#125;&quot;&gt;1&lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=&quot;$&#123;num1&lt;num2&#125;&quot;&gt;2&lt;/c:when&gt;</span><br><span class="line">    &lt;c:otherwise&gt;3&lt;/c:otherwise&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br></pre></td></tr></table></div></figure><ul><li>迭代标签：forEach</li></ul><figure class="highlight"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:forEach items=<span class="string">&quot;$&#123;list&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;user&quot;</span>&gt;</span><br><span class="line">    $&#123;user.name&#125;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--[<span class="number">2</span>, <span class="number">3</span>]--%&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">&quot;$&#123;list&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;user&quot;</span> begin=<span class="string">&quot;2&quot;</span> end=<span class="string">&quot;3&quot;</span> step=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">    $&#123;user.name&#125;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:forEach items=<span class="string">&quot;$&#123;list&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;user&quot;</span> varStatus=<span class="string">&quot;sta&quot;</span>&gt;</span><br><span class="line">    $&#123;sta.index&#125;-$&#123;user.name&#125;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></div></figure><ul><li>格式化标签库常用的标签：时间格式化、格式化数字</li></ul><figure class="highlight jsp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;fmt&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/fmt&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    request.setAttribute(<span class="string">&quot;date&quot;</span>, <span class="keyword">new</span> Date());</span><br><span class="line">%&gt;</span><br><span class="line">&lt;fmt:formatDate value=&quot;$&#123;date&#125;&quot; pattern=&quot;YYYY-mm-dd hh:mm:ss&quot;&gt;&lt;/fmt:formatDate&gt;</span><br><span class="line"></span><br><span class="line">&lt;fmt:formatNumber value=&quot;1234.567&quot; maxIntegerDigits=&quot;2&quot; maxFractionDigits=&quot;2&quot;&gt;&lt;/fmt:formatNumber&gt;</span><br><span class="line">&lt;%--<span class="number">34.57</span>--%&gt;</span><br></pre></td></tr></table></div></figure><ul><li>函数标签库常用的标签：</li></ul><figure class="highlight jsp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;fn&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/functions&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    request.setAttribute(<span class="string">&quot;info&quot;</span>, <span class="string">&quot;Java,C&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">$&#123;fn:contains(info, <span class="string">&quot;python&quot;</span>)&#125;  &lt;%-- <span class="keyword">false</span> --%&gt;</span><br><span class="line">$&#123;fn:startsWith(info, <span class="string">&quot;Java&quot;</span>)&#125;  &lt;%-- <span class="keyword">true</span> --%&gt;</span><br><span class="line">$&#123;fn:indexOf(info, <span class="string">&quot;va&quot;</span>)&#125;  &lt;%-- <span class="number">2</span> --%&gt;</span><br></pre></td></tr></table></div></figure>        <h2 id="04-过滤器"   >          <a href="#04-过滤器" class="heading-link"><i class="fas fa-link"></i></a>04-过滤器</h2>      <ul><li>功能<ul><li>用来拦截传入的请求和传出的响应</li><li>修改或以某种方式处理正在客户端和服务端之间交换的数据流</li></ul></li><li>如何使用<ul><li>与使用Servlet类似，Filter是java web提供的一个接口，只需定义一个类并且实现该接口。</li></ul></li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iot.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharacterFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain fc)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        res.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        fc.doFilter(req, res);  <span class="comment">// 继续向后处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String username = req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(username);</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;哈哈&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>web.xml配置</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>charcater<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.iot.filter.CharacterFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>charcater<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/login<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/test<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="filter生命周期"   >          <a href="#filter生命周期" class="heading-link"><i class="fas fa-link"></i></a>filter生命周期</h3>      <p>当配置多个filter时，根据在web.xml中的顺序来访问（注解@WebFilter不按顺序）</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharacterFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;&#125;</span><br></pre></td></tr></table></div></figure><ul><li>实际开发中filter使用场景<ul><li>统一处理中文乱码</li><li>屏蔽敏感词</li><li>控制资源访问权限</li></ul></li></ul>        <h2 id="05-文件上传下载"   >          <a href="#05-文件上传下载" class="heading-link"><i class="fas fa-link"></i></a>05-文件上传下载</h2>              <h3 id="上传"   >          <a href="#上传" class="heading-link"><i class="fas fa-link"></i></a>上传</h3>      <ul><li><p>JSP</p><ul><li>input的type设置为file</li><li>form表单的method设置为post，get只会传文件名</li><li>form的enctype设置为<code>multipart/form-data</code>，二进制传递数据</li></ul></li><li><p>servlet</p></li></ul><p>底层写法</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 输入流获取客户端传来的数据</span></span><br><span class="line">    InputStream inputStream = req.getInputStream();</span><br><span class="line">    Reader reader = <span class="keyword">new</span> InputStreamReader(inputStream);</span><br><span class="line">    BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(reader);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过输出流将数据输出到本地</span></span><br><span class="line">    String path = req.getServletContext().getRealPath(<span class="string">&quot;file/copy.txt&quot;</span>);</span><br><span class="line">    OutputStream outputStream = <span class="keyword">new</span> FileOutputStream(path);</span><br><span class="line">    Writer writer = <span class="keyword">new</span> OutputStreamWriter(outputStream);</span><br><span class="line">    BufferedWriter bufferedWriter = <span class="keyword">new</span> BufferedWriter(writer);</span><br><span class="line">    String str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> ((str=bufferedReader.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        bufferedWriter.write(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bufferedWriter.close();</span><br><span class="line">    writer.close();</span><br><span class="line">    outputStream.close();</span><br><span class="line">    bufferedReader.close();</span><br><span class="line">    reader.close();</span><br><span class="line">    inputStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>FileUpload组件</p><p>可以将所有请求信息解析成FileItem对象，可以通过对FileItem对象操作完成上传，面向对象思想。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        DiskFileItemFactory diskFileItemFactory = <span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line">        ServletFileUpload servletFileUpload = <span class="keyword">new</span> ServletFileUpload(diskFileItemFactory);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;FileItem&gt; list = servletFileUpload.parseRequest(req);</span><br><span class="line">            <span class="keyword">for</span> (FileItem fileItem : list) &#123;</span><br><span class="line">                <span class="keyword">if</span> (fileItem.isFormField()) &#123;</span><br><span class="line">                    <span class="comment">// 表单文件</span></span><br><span class="line">                    String name = fileItem.getFieldName();</span><br><span class="line">                    String value = fileItem.getString(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                    System.out.println(name + <span class="string">&quot;: &quot;</span> + value);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    String fileName = fileItem.getName();</span><br><span class="line">                    <span class="keyword">long</span> size = fileItem.getSize();</span><br><span class="line">                    System.out.println(fileName + <span class="string">&quot;: &quot;</span> + size + <span class="string">&quot;B&quot;</span>);</span><br><span class="line">                    InputStream inputStream = fileItem.getInputStream();</span><br><span class="line">                    String path = req.getServletContext().getRealPath(<span class="string">&quot;file/&quot;</span> + fileName);</span><br><span class="line"></span><br><span class="line">                    OutputStream outputStream = <span class="keyword">new</span> FileOutputStream(path);</span><br><span class="line">                    <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">while</span> ((t = inputStream.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                        outputStream.write(t);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// close</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileUploadException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="下载"   >          <a href="#下载" class="heading-link"><i class="fas fa-link"></i></a>下载</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/download&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设置相应方式</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;application/x-msdownload&quot;</span>);</span><br><span class="line">        String filename = <span class="string">&quot;109.jpg&quot;</span>;</span><br><span class="line">        <span class="comment">// 设置下载之后的文件名</span></span><br><span class="line">        resp.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + filename);</span><br><span class="line">        <span class="comment">// 获取输出流</span></span><br><span class="line">        OutputStream outputStream = resp.getOutputStream();</span><br><span class="line"></span><br><span class="line">        String path = req.getServletContext().getRealPath(<span class="string">&quot;file/&quot;</span> + filename);</span><br><span class="line">        InputStream inputStream = <span class="keyword">new</span> FileInputStream(path);</span><br><span class="line">        <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((t = inputStream.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            outputStream.write(t);</span><br><span class="line">        &#125;</span><br><span class="line">        inputStream.close();</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="06-异步Ajax请求"   >          <a href="#06-异步Ajax请求" class="heading-link"><i class="fas fa-link"></i></a>06-异步Ajax请求</h2>      <p>Ajax是一种交互方式，异步加载，客户端和服务端的数据交互更新在局部页面的技术，不需要刷新整个页面</p><p>优点：</p><ol><li>局部刷新，效率更高</li><li>用户体验更好</li></ol>        <h2 id="07-JDBC"   >          <a href="#07-JDBC" class="heading-link"><i class="fas fa-link"></i></a>07-JDBC</h2>              <h3 id="JDBC体系结构"   >          <a href="#JDBC体系结构" class="heading-link"><i class="fas fa-link"></i></a>JDBC体系结构</h3>      <p>接口包括两个层面</p><ul><li>面向应用的API，供开发者调用（JDBC API）</li><li>面向数据库的API，供厂商开发数据库的驱动（JDBC Driver Manager）</li></ul>        <h4 id="JDBC-API"   >          <a href="#JDBC-API" class="heading-link"><i class="fas fa-link"></i></a>JDBC API</h4>      <p>java.sql和javax.sql</p><ul><li>DriverManager类</li><li>Connection接口</li><li>Statement接口</li><li>ResultSet接口</li></ul>        <h4 id="Driver-Manager"   >          <a href="#Driver-Manager" class="heading-link"><i class="fas fa-link"></i></a>Driver Manager</h4>      <p>管理不同的JDBC驱动，负责连接不同的数据库</p>        <h3 id="JDBC使用"   >          <a href="#JDBC使用" class="heading-link"><i class="fas fa-link"></i></a>JDBC使用</h3>      <ol><li>加载数据库驱动，Java程序和数据库之间的桥梁</li><li>获取Connection，Java程序与数据库的一次连接</li><li>创建Statement对象，由Connection产生，执行SQL语句</li><li>如果需要接受返回值，创建ResultSet对象，保存Statement执行之后的查询结果</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://xxxxx:3306/cumt_funding&quot;</span>;</span><br><span class="line">        String username = <span class="string">&quot;cumt_funding&quot;</span>;</span><br><span class="line">        String password = <span class="string">&quot;xxxxxxx&quot;</span>;</span><br><span class="line">        Connection connection = DriverManager.getConnection(url, username, password);</span><br><span class="line">        String sql = <span class="string">&quot;insert into user(id, name, age) values(10, &#x27;张三&#x27;, 100)&quot;</span>;</span><br><span class="line">        Statement statement = connection.createStatement();</span><br><span class="line">        statement.executeUpdate(sql);</span><br><span class="line">        statement.close();</span><br><span class="line">connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="PreparedStatement"   >          <a href="#PreparedStatement" class="heading-link"><i class="fas fa-link"></i></a>PreparedStatement</h4>      <p>Statement的子类，提供了SQL占位符的功能。</p><ul><li>使用Statement开发问题<ul><li>需要频繁拼接String字符串，出错率高</li><li>存在SQL注入风险</li></ul></li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Connection connection = DriverManager.getConnection(url, username, password);</span><br><span class="line">String sql = <span class="string">&quot;select * from user where username = ? and password = ?&quot;</span>;</span><br><span class="line">PreparedStatement preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">preparedStatement.setString(<span class="number">1</span>, <span class="string">&quot;zyuanlee&quot;</span>);</span><br><span class="line">preparedStatement.setString(<span class="number">2</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">ResultSet resultSet = preparedStatement.executeQuery();</span><br><span class="line">System.out.println(resultSet);</span><br><span class="line">resultSet.close();</span><br><span class="line">preparedStatement.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></div></figure>        <h2 id="08-数据库连接池"   >          <a href="#08-数据库连接池" class="heading-link"><i class="fas fa-link"></i></a>08-数据库连接池</h2>      <p>JDBC开发流程</p><ul><li>加载驱动（只需加载一次）</li><li>建立数据库连接（Connection）</li><li>执行SQL（Statement）</li><li>ResultSet接受结果集（查询）</li><li>断开连接，释放资源</li></ul><p>数据库连接对象是通过DriverManager来获取的，每次都需要向数据库申请获取连接，验证用户名和密码，执行完SQL语句后断开连接，这样会造成资源浪费，使用数据库连接池解决。</p><p>数据库连接池的基本思想是为数据库建立一个缓冲池，预先向缓冲池中放入一定数量的连接对象，当需要获取数据库连接的时候，只需要从缓冲池中取出一个对象，用完之后再放回缓冲池中，供下一次请求使用。</p><p>当数据库连接池中没有空闲连接时，新的请求就会进入等待队列，等待其他线程释放资源。</p>        <h3 id="数据库连接池实现"   >          <a href="#数据库连接池实现" class="heading-link"><i class="fas fa-link"></i></a>数据库连接池实现</h3>      <p>javax.sql.DataSource，可以不自己实现该接口，使用第三方工具。</p>        <h2 id="09-DBUtils"   >          <a href="#09-DBUtils" class="heading-link"><i class="fas fa-link"></i></a>09-DBUtils</h2>      <p>完成数据封装（结果集到java对象的映射）</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">&quot;select * from student where id = 30&quot;</span>;</span><br><span class="line">QueryRunner queryRunner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">student = queryRunner.query(connection, sql, <span class="keyword">new</span> BeanHanler&lt;&gt;(Student.class));</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">&quot;select * from student where id = ?&quot;</span>;</span><br><span class="line">QueryRunner queryRunner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">student = queryRunner.query(connection, sql, <span class="keyword">new</span> BeanHanler&lt;&gt;(Student.class), id);</span><br></pre></td></tr></table></div></figure><p>ResultHandler接口用来处理结果集，可以将查询到的结果转为java对象，提供了4钟实现类</p><ul><li>BeanHandler：将结果集映射为java对象（单条数据）</li><li>BeanListHandler：映射为List集合（多条数据）</li><li>MapHandler：映射为Map对象</li><li>MapListHandler：映射为MapList集合</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django部署：uwsgi、nginx配置模板</title>
      <link href="/2020/08/11/Django%E9%83%A8%E7%BD%B2%EF%BC%9Auwsgi%E3%80%81nginx%E9%85%8D%E7%BD%AE%E6%A8%A1%E6%9D%BF/"/>
      <url>/2020/08/11/Django%E9%83%A8%E7%BD%B2%EF%BC%9Auwsgi%E3%80%81nginx%E9%85%8D%E7%BD%AE%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[        <h2 id="uwsgi配置"   >          <a href="#uwsgi配置" class="heading-link"><i class="fas fa-link"></i></a>uwsgi配置</h2>      <figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line">socket &#x3D; 127.0.0.1:3001</span><br><span class="line">stats &#x3D; 127.0.0.1:9090</span><br><span class="line">chdir &#x3D; &#x2F;www&#x2F;xxxx&#x2F;app</span><br><span class="line">module &#x3D; app.wsgi</span><br><span class="line">master &#x3D; true </span><br><span class="line"></span><br><span class="line">processes &#x3D; 1</span><br><span class="line">pidfile &#x3D; uwsgi.pid</span><br><span class="line">disable-logging &#x3D; true</span><br><span class="line">daemonize &#x3D; uwsgi.log</span><br></pre></td></tr></table></div></figure><span id="more"></span>        <h2 id="nginx配置"   >          <a href="#nginx配置" class="heading-link"><i class="fas fa-link"></i></a>nginx配置</h2>      <figure class="highlight nginx"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> localhost;</span><br><span class="line">    <span class="attribute">root</span> /www/xxx;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># http自动跳转https</span></span><br><span class="line">    <span class="comment"># rewrite ^(.*)$ https://$host$1 permanent;</span></span><br><span class="line">    </span><br><span class="line">    <span class="attribute">location</span> /media &#123;</span><br><span class="line">        <span class="attribute">alias</span> /www/xxx/app/media;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">location</span> /static &#123;</span><br><span class="line">      <span class="attribute">alias</span> /www/xxx/app/static;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">include</span> uwsgi_params;</span><br><span class="line">        <span class="attribute">uwsgi_pass</span> <span class="number">127.0.0.1:3001</span>;  <span class="comment"># 与uwsgi的scoket对应</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># access_log  /www/wwwlogs/app.log;</span></span><br><span class="line">    <span class="comment"># error_log  /www/wwwlogs/app.error.log;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue 组件</title>
      <link href="/2020/08/07/vue-%E7%BB%84%E4%BB%B6/"/>
      <url>/2020/08/07/vue-%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[        <h2 id="组件"   >          <a href="#组件" class="heading-link"><i class="fas fa-link"></i></a>组件</h2>              <h3 id="全局注册"   >          <a href="#全局注册" class="heading-link"><i class="fas fa-link"></i></a>全局注册</h3>      <figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;my-component&quot;</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &quot;<span class="tag">&lt;<span class="name">div</span>&gt;</span>这里是组件内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&quot;,</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure><blockquote><p>template 中的内容必须带 html 标签</p></blockquote><span id="more"></span>        <h3 id="局部注册"   >          <a href="#局部注册" class="heading-link"><i class="fas fa-link"></i></a>局部注册</h3>      <figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> child = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &quot;<span class="tag">&lt;<span class="name">div</span>&gt;</span>这里是组件内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&quot;,</span></span></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        components: &#123;</span><br><span class="line"><span class="javascript">            <span class="string">&quot;my-component&quot;</span>: child,</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="is-挂载组件"   >          <a href="#is-挂载组件" class="heading-link"><i class="fas fa-link"></i></a>is 挂载组件</h3>      <p><code>&lt;table&gt;</code>中只能是<code>&lt;tr&gt;</code>、<code>&lt;td&gt;</code> 、<code>&lt;th&gt;</code>等这些表格元素，所以在<code>&lt;table&gt;</code>内直接使用组件是无效的。</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">is</span>=<span class="string">&quot;my-component&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;my-component&quot;</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &quot;<span class="tag">&lt;<span class="name">div</span>&gt;</span>这里是组件内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&quot;,</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>使用 is 挂载，tbody 会被替换成组件内容</p>        <h2 id="使用-props-传递数据"   >          <a href="#使用-props-传递数据" class="heading-link"><i class="fas fa-link"></i></a>使用 props 传递数据</h2>              <h3 id="基本使用"   >          <a href="#基本使用" class="heading-link"><i class="fas fa-link"></i></a>基本使用</h3>      <figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component</span> <span class="attr">message</span>=<span class="string">&quot;要传给组件的消息&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;my-component&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        props: [<span class="string">&quot;message&quot;</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &quot;<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">message</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&quot;,</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>HTML 特性不区分大小写，驼峰命名（camelCase）的 props 需要转为短横分割（kebab-case）</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">msg-text</span>=<span class="string">&quot;要传给组件的消息&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span> props: [&#x27;msgText&#x27;]</span><br></pre></td></tr></table></div></figure>        <h3 id="单向数据流"   >          <a href="#单向数据流" class="heading-link"><i class="fas fa-link"></i></a>单向数据流</h3>      <figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component</span> <span class="attr">message</span>=<span class="string">&quot;要传给组件的消息&quot;</span> <span class="attr">:width</span>=<span class="string">&quot;100&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;my-component&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        props: [<span class="string">&quot;message&quot;</span>, <span class="string">&quot;width&quot;</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &quot;<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">message</span>&#125;&#125;</span><span class="xml"> </span><span class="template-variable">&#123;&#123;<span class="name">style</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&quot;,</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                msg: <span class="built_in">this</span>.message,</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line"><span class="javascript">            style: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="string">&quot;width:&quot;</span> + <span class="built_in">this</span>.width + <span class="string">&quot;px&quot;</span>;</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="数据验证"   >          <a href="#数据验证" class="heading-link"><i class="fas fa-link"></i></a>数据验证</h3>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">porps: &#123;</span><br><span class="line">    propA: <span class="built_in">Number</span>,</span><br><span class="line">    propB: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span><br><span class="line">    propC: &#123;</span><br><span class="line">        type: <span class="built_in">Boolean</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    propD: &#123;</span><br><span class="line">        type: <span class="built_in">Number</span>,</span><br><span class="line">        <span class="built_in">require</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 对象或数组函数返回</span></span><br><span class="line">    propE: &#123;</span><br><span class="line">        type: <span class="built_in">Array</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 自定义一个验证函数</span></span><br><span class="line">    propF: &#123;</span><br><span class="line">        validator: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> value &gt; <span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="组件通信"   >          <a href="#组件通信" class="heading-link"><i class="fas fa-link"></i></a>组件通信</h2>              <h3 id="自定义事件"   >          <a href="#自定义事件" class="heading-link"><i class="fas fa-link"></i></a>自定义事件</h3>      <p>子组件用<code>$emit()</code>来触发事件，父组件用<code>$on()</code>来监听子组件的事件</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>总数：&#123;&#123;total&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-comp</span> @<span class="attr">inc</span>=<span class="string">&quot;handleGetTotal&quot;</span> @<span class="attr">dec</span>=<span class="string">&quot;handleGetTotal&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-comp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;my-comp&quot;</span>, &#123;</span></span><br><span class="line">        template: &quot;\</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;handleInc&#x27;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;handleDec&#x27;</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>&quot;,</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">                counter: 0,</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            handleInc: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.counter++;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$emit(<span class="string">&quot;inc&quot;</span>, <span class="built_in">this</span>.counter);</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            handleDec: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.counter--;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$emit(<span class="string">&quot;dec&quot;</span>, <span class="built_in">this</span>.counter);</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            total: 0,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            handleGetTotal: <span class="function"><span class="keyword">function</span> (<span class="params">total</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.total = total;</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="非父子组件通信"   >          <a href="#非父子组件通信" class="heading-link"><i class="fas fa-link"></i></a>非父子组件通信</h3>      <p>使用一个空的 Vue 实例作为中央事件总线（bus），也就是一个中介。</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;msg&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">my-comp</span>&gt;</span><span class="tag">&lt;/<span class="name">my-comp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> bus = <span class="keyword">new</span> Vue();</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;my-comp&quot;</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &quot;<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;handleEvent&#x27;</span>&gt;</span>传递事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span>&quot;,</span></span></span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            handleEvent: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                bus.$emit(<span class="string">&quot;on-msg&quot;</span>, <span class="string">&quot;来自组件的内容&quot;</span>);</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            msg: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> that = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript">            bus.$on(<span class="string">&quot;on-msg&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span></span><br><span class="line">                that.msg = msg;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="使用-slot-分发内容"   >          <a href="#使用-slot-分发内容" class="heading-link"><i class="fas fa-link"></i></a>使用 slot 分发内容</h2>              <h3 id="slot-用法"   >          <a href="#slot-用法" class="heading-link"><i class="fas fa-link"></i></a>slot 用法</h3>              <h4 id="单个-slot"   >          <a href="#单个-slot" class="heading-link"><i class="fas fa-link"></i></a>单个 slot</h4>      <figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-comp</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 将渲染p标签 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>分发更多内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>分发内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">my-comp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;my-comp&quot;</span>, &#123;</span></span><br><span class="line">        template: &quot;\</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">slot</span>&gt;</span>默认消息<span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>&quot;,</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h4 id="多个-slot"   >          <a href="#多个-slot" class="heading-link"><i class="fas fa-link"></i></a>多个 slot</h4>      <figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-comp</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">slot</span>=<span class="string">&quot;header&quot;</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>正文内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>更多内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>底部消息<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">my-comp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;my-comp&quot;</span>, &#123;</span></span><br><span class="line">        template: &quot;\</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>\</span></span></span><br><span class="line"><span class="javascript">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&#x27;header&#x27;</span>&gt;\</span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&#x27;header&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>\</span></span></span><br><span class="line"><span class="javascript">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&#x27;main&#x27;</span>&gt;\</span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>\</span></span></span><br><span class="line"><span class="javascript">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&#x27;footer&#x27;</span>&gt;\</span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&#x27;footer&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>&quot;,</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="作用于插槽"   >          <a href="#作用于插槽" class="heading-link"><i class="fas fa-link"></i></a>作用于插槽</h3>      <figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-comp</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;props&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>正文内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;props.msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">my-comp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;my-comp&quot;</span>, &#123;</span></span><br><span class="line">        template: &quot;\</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">msg</span>=<span class="string">&#x27;来自子组件的消息&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>&quot;,</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="组件高级用法"   >          <a href="#组件高级用法" class="heading-link"><i class="fas fa-link"></i></a>组件高级用法</h2>              <h3 id="递归组件"   >          <a href="#递归组件" class="heading-link"><i class="fas fa-link"></i></a>递归组件</h3>      <p>递归调用自己，需要给组件设置 name 选项</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-comp</span> <span class="attr">:count</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-comp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;my-comp&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;my-comp&quot;</span>,</span></span><br><span class="line">        props: &#123;</span><br><span class="line">            count: &#123;</span><br><span class="line"><span class="javascript">                type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">                <span class="keyword">default</span>: <span class="number">1</span>,</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        template: &quot;\</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            </span><span class="template-variable">&#123;&#123;<span class="name">count</span>&#125;&#125;</span><span class="xml">\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">my-comp</span> <span class="attr">:count</span>=<span class="string">&#x27;count + 1&#x27;</span> <span class="attr">v-if</span>=<span class="string">&#x27;count &lt; 3&#x27;</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">my-comp</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>&quot;,</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="内联模板"   >          <a href="#内联模板" class="heading-link"><i class="fas fa-link"></i></a>内联模板</h3>      <figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-comp</span> <span class="attr">inline-template</span>&gt;</span><span class="tag">&lt;/<span class="name">my-comp</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="动态组件"   >          <a href="#动态组件" class="heading-link"><i class="fas fa-link"></i></a>动态组件</h3>      <figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;currentView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;change(&#x27;A&#x27;)&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;change(&#x27;B&#x27;)&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        components: &#123;</span><br><span class="line">            A: &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">                template: &quot;<span class="tag">&lt;<span class="name">div</span>&gt;</span>组件A<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&quot;,</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            B: &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">                template: &quot;<span class="tag">&lt;<span class="name">div</span>&gt;</span>组件B<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&quot;,</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            currentView: <span class="string">&quot;A&quot;</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            change: <span class="function"><span class="keyword">function</span> (<span class="params">com</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.currentView = com;</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="异步组件"   >          <a href="#异步组件" class="heading-link"><i class="fas fa-link"></i></a>异步组件</h3>      <figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-comp</span>&gt;</span><span class="tag">&lt;/<span class="name">my-comp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;my-comp&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">            resolve(&#123;</span><br><span class="line"><span class="handlebars"><span class="xml">                template: &quot;<span class="tag">&lt;<span class="name">div</span>&gt;</span>异步渲染<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&quot;,</span></span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;, 2000);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>工厂函数，接受一个 resolve 回调，在收到从服务器下载组件定义时调用</p>        <h2 id="其他"   >          <a href="#其他" class="heading-link"><i class="fas fa-link"></i></a>其他</h2>              <h3 id="nextTick"   >          <a href="#nextTick" class="heading-link"><i class="fas fa-link"></i></a>$nextTick</h3>      <p>$nextTick 用来知道什么时候 DOM 更新完成</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.show = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">this</span>.$nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> text = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div&quot;</span>).innerHTML;</span><br><span class="line">    <span class="built_in">console</span>.log(text);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></div></figure>        <h3 id="X-Templates"   >          <a href="#X-Templates" class="heading-link"><i class="fas fa-link"></i></a>X-Templates</h3>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/x-template&quot;</span> id=<span class="string">&quot;my-comp&quot;</span>&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;/script&gt;;</span><br><span class="line">Vue.component(<span class="string">&quot;my-comp&quot;</span>, &#123;</span><br><span class="line">    template: <span class="string">&quot;#my-comp&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>表达式计算</title>
      <link href="/2020/08/06/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
      <url>/2020/08/06/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AE%A1%E7%AE%97/</url>
      
        <content type="html"><![CDATA[        <h2 id="中缀转后缀步骤"   >          <a href="#中缀转后缀步骤" class="heading-link"><i class="fas fa-link"></i></a>中缀转后缀步骤</h2>      <ol><li>如果遇到操作数，直接将其输出</li><li>如果遇到操作符，则放入栈中<ul><li><strong>左括号也放入栈中</strong></li></ul></li><li>如果遇到右括号，则弹出操作符输出至左括号</li><li>遇到其他操作符，从栈中弹出元素直到遇到<strong>更低优先级</strong>的操作符（更低级不弹出），然后将操作符压入栈中<ul><li>弹出过程中不会弹出左括号</li></ul></li><li>中缀<strong>读取完成后</strong>，依次弹出栈中元素<span id="more"></span></li></ol>        <h2 id="算法"   >          <a href="#算法" class="heading-link"><i class="fas fa-link"></i></a>算法</h2>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cal</span>(<span class="params">exp</span>):</span></span><br><span class="line">    // 计算中缀表达式</span><br><span class="line">    temp = <span class="built_in">list</span>()</span><br><span class="line">    operators = <span class="string">&#x27;+-*/&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> exp:</span><br><span class="line">        <span class="keyword">if</span> item <span class="keyword">not</span> <span class="keyword">in</span> operators:</span><br><span class="line">            temp.append(<span class="built_in">float</span>(item))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            right = temp.pop()</span><br><span class="line">            left = temp.pop()</span><br><span class="line">            <span class="keyword">if</span> item == <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                v = left + right</span><br><span class="line">            <span class="keyword">elif</span> item == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                v = left - right</span><br><span class="line">            <span class="keyword">elif</span> item == <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                v = left * right</span><br><span class="line">            <span class="keyword">elif</span> item == <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">                v = left / right</span><br><span class="line">            temp.append(v)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> temp.pop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">infixToSuffix</span>(<span class="params">exp</span>):</span></span><br><span class="line">    // 中缀转后缀</span><br><span class="line">    operators = <span class="string">&#x27;+-*/()&#x27;</span></span><br><span class="line">    priority = &#123;</span><br><span class="line">        <span class="string">&#x27;#&#x27;</span>: -<span class="number">1</span>,</span><br><span class="line">        <span class="string">&#x27;+&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&#x27;-&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&#x27;*&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&#x27;/&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    temp = <span class="built_in">list</span>()</span><br><span class="line">    op_stack = [<span class="string">&#x27;#&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> exp:</span><br><span class="line">        <span class="keyword">if</span> item <span class="keyword">not</span> <span class="keyword">in</span> operators:</span><br><span class="line">            temp.append(item)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># print(op_stack)</span></span><br><span class="line">            <span class="keyword">if</span> item == <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">                <span class="keyword">while</span> op_stack[-<span class="number">1</span>] != <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">                    temp.append(op_stack.pop())</span><br><span class="line">                op_stack.pop()</span><br><span class="line">            <span class="keyword">elif</span> item == <span class="string">&#x27;(&#x27;</span> <span class="keyword">or</span> op_stack[-<span class="number">1</span>] == <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">                op_stack.append(item)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                last = op_stack[-<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">while</span> last != <span class="string">&#x27;#&#x27;</span> <span class="keyword">and</span> priority[last] &gt;= priority[item]:</span><br><span class="line">                    temp.append(op_stack.pop())</span><br><span class="line">                    last = op_stack[-<span class="number">1</span>]</span><br><span class="line">                op_stack.append(item)</span><br><span class="line">    last = op_stack[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">while</span> last != <span class="string">&#x27;#&#x27;</span>:</span><br><span class="line">        temp.append(op_stack.pop())</span><br><span class="line">        last = op_stack[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27; &#x27;</span>.join(temp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    suffix = <span class="string">&#x27;3 5 - 6 17 4 * + * 3 /&#x27;</span></span><br><span class="line">    infix = <span class="string">&#x27;( 3 - 5 ) * ( 6 + 17 * 4 ) / 3&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(infix)</span><br><span class="line">    infix = infix.split()</span><br><span class="line">    suffix = infixToSuffix(infix)</span><br><span class="line">    <span class="built_in">print</span>(suffix)</span><br><span class="line">    res = cal(suffix.split())</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象知识点</title>
      <link href="/2020/06/21/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2020/06/21/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[        <h2 id="1-3-章"   >          <a href="#1-3-章" class="heading-link"><i class="fas fa-link"></i></a>1-3 章</h2>              <h3 id="应用-UML-的三种方式"   >          <a href="#应用-UML-的三种方式" class="heading-link"><i class="fas fa-link"></i></a>应用 UML 的三种方式</h3>      <ul><li>UML 作为草图<ul><li>白板上手绘非正式、不完整的图</li><li>用于探讨问题或解决方案的复杂部分</li></ul></li><li>UML 作为蓝图<ul><li>逆向工程，以 UML 图的方式对现有代码进行可视化，使其易于理解。</li><li>代码生成，一般用其生成部分代码，开发人员填充其他代码</li></ul></li><li>UML 作为编程语言<ul><li>用 UML 完成软件系统可执行规格说明</li><li>可执行代码自动生成</li></ul></li></ul><span id="more"></span>        <h3 id="应用-UML-的三种透视图"   >          <a href="#应用-UML-的三种透视图" class="heading-link"><i class="fas fa-link"></i></a>应用 UML 的三种透视图</h3>      <ul><li>概念透视图<ul><li>用图来描述现实世界或者关注领域中的事务</li></ul></li><li>规格说明（软件）透视图<ul><li>用图来描述软件的抽象物或具有规格说明和接口的构件，但是并不约定特定实现</li></ul></li><li>实现（软件）透视图<ul><li>用图来描述特定技术中（如 java）的软件实现</li></ul></li></ul>        <h3 id="不同视图中类的含义"   >          <a href="#不同视图中类的含义" class="heading-link"><i class="fas fa-link"></i></a>不同视图中类的含义</h3>      <ul><li>概念类：现实世界中的概念或事物</li><li>软件类：无论在过程还是方法中，都表示软件构件在规格说明或实现透视图中的类</li><li>实现类：特定 OO 语言中的类</li></ul>        <h3 id="统一过程特点"   >          <a href="#统一过程特点" class="heading-link"><i class="fas fa-link"></i></a>统一过程特点</h3>      <ul><li>用例驱动</li><li>以架构为中心</li><li>迭代和增量</li></ul>        <h3 id="如何在迭代项目中处理变更"   >          <a href="#如何在迭代项目中处理变更" class="heading-link"><i class="fas fa-link"></i></a>如何在迭代项目中处理变更</h3>      <ul><li>一方面认同和稳定一组需求，另一方面接受需求不断变更的事实</li><li>每次迭代选择一小组需求，快速设计、实现和测试</li><li>早期迭代可能并不准确，但是快速实施可以得到快速反馈</li><li>早期迭代中系统偏离正确轨迹的程度会大于后继迭代。随着时间的发展，系统将会收敛。</li><li>最好及早解决和验证具有风险的、关键的设计决策</li></ul>        <h3 id="早期迭代与后期迭代"   >          <a href="#早期迭代与后期迭代" class="heading-link"><i class="fas fa-link"></i></a>早期迭代与后期迭代</h3>      <ul><li>早期迭代远离系统的“真实路径”。通过反馈和调整，系统向最适宜的需求和设计收敛。</li><li>在后期迭代中，很少会在需求上产生显著变化，这种后期的变化可能会给组织带来业务竞争优势。</li></ul>        <h3 id="迭代开发优点"   >          <a href="#迭代开发优点" class="heading-link"><i class="fas fa-link"></i></a>迭代开发优点</h3>      <ul><li>减少项目失败可能性，提高生产率，降低缺陷率</li><li>在早期缓解高风险</li><li>早期可见进展</li><li>早期反馈、用户参与和调整，会产生更接近涉众真实需求的精华系统</li><li>可控复杂性，团队不会被“分析瘫痪”或长期且复杂的步骤所淹没</li><li>一次迭代中的经验可以被系统地用于改进开发过程本身，并如此反复进行下去</li></ul>        <h3 id="一次迭代的持续时间和时间定量"   >          <a href="#一次迭代的持续时间和时间定量" class="heading-link"><i class="fas fa-link"></i></a>一次迭代的持续时间和时间定量</h3>      <ul><li>大部分迭代方法建议迭代时间在 2 周之内。小步骤、快速反馈和调整是迭代开发的主要思想，时间过长会增加风险。</li><li>1 周的迭代不足以获得有意义的产出和反馈，大于 6 周，复杂性会变得不可控制，反馈将延迟。</li><li>迭代的一个关键思想是时间定量或时长固定。约定了时间，必须按时完成，实在完不成，不能推迟时间，而是剔除一些任务或需求。</li></ul>        <h3 id="UP-核心思想"   >          <a href="#UP-核心思想" class="heading-link"><i class="fas fa-link"></i></a>UP 核心思想</h3>      <ul><li>短时间定量迭代、进化和可适应性开发</li></ul>        <h3 id="UP-的四个阶段"   >          <a href="#UP-的四个阶段" class="heading-link"><i class="fas fa-link"></i></a>UP 的四个阶段</h3>      <ul><li>初始（Inception）：大体上的构想、业务案例、范围和模糊评估——可行性研究。</li><li>细化（Elaboration）：已精化的构想、 核心架构的迭代实现、 高风险的解决、 确定大多数需求和范围以及进行更为实际的评估。</li><li>构造(Construction)：对遗留下来的风险较低和比较简单的元素进行迭代实现，准备部署 。</li><li>移交(Transition)：进行 beta 测试和部署。</li></ul>        <h2 id="4-7-章"   >          <a href="#4-7-章" class="heading-link"><i class="fas fa-link"></i></a>4-7 章</h2>              <h3 id="初始阶段内容"   >          <a href="#初始阶段内容" class="heading-link"><i class="fas fa-link"></i></a>初始阶段内容</h3>      <ul><li>10％的用例进行分析；</li><li>关键的非功能需求的分析；</li><li>业务案例创建；</li><li>开发环境的准备</li></ul>        <h3 id="初始阶段需要回答问题"   >          <a href="#初始阶段需要回答问题" class="heading-link"><i class="fas fa-link"></i></a>初始阶段需要回答问题</h3>      <ul><li>该项目的 vision（设想/愿景） 和 business case（业务案例） ?</li><li>是否可行?</li><li>购买还是开发</li><li>成本的大致估计; 是$10K，100K，1000K?</li><li>项目继续还是停止?</li></ul>        <h3 id="初始阶段制品"   >          <a href="#初始阶段制品" class="heading-link"><i class="fas fa-link"></i></a>初始阶段制品</h3>      <ul><li>设想和业务用例（Vision and Business Case）<ul><li>描述高阶目标与约束、业务案例，并提供执行摘要</li></ul></li><li>用例模型（Use-Case Model）<ul><li>描述功能需求。在初始阶段，确定大部分用例名称，详细分析 10%的用例</li></ul></li><li>补充性规格说明（Supplementary Specification）<ul><li>描述其他需求，主要是非功能性需求。初始阶段，多考虑关键的非功能性需求，其对架构将会产生主要影响</li></ul></li><li>词汇表（Glossary）<ul><li>关键领域术语和数据字典</li></ul></li><li>风险列表和风险管理计划（Risk List&amp;Risk Management Plan）<ul><li>描述风险（业务、技术、资源和进度）及应对和缓解的方法</li></ul></li><li>原型和概念验证（Prototypes and Proof-of-concepts）<ul><li>澄清设想，验证技术思路。</li></ul></li><li>迭代计划（Iteration Plan）<ul><li>描述第一个细化迭代的任务。</li></ul></li><li>阶段计划和软件开发计划（Phase Plan &amp; Software Development Plan）<ul><li>对细化阶段的持续时间和工作量进行粗略估计。工具、人员、教育和其他资源。</li></ul></li><li>开发案例（Development Case）<ul><li>就待定项目，对 UP 步骤和制品进行定制的描述。在 UP 中，通常会为特定项目进行定制。</li></ul></li></ul>        <h3 id="需求——涉众"   >          <a href="#需求——涉众" class="heading-link"><i class="fas fa-link"></i></a>需求——涉众</h3>      <ul><li>涉众是与要建设的业务系统相关的一切人和事。</li><li>涉众是所有会受到项目结果重大影响的人，必须用所提供的解决方案来满足不同的需要。</li><li>许多涉众都是系统的用户（间接或者直接），还有系统的经济型买主或支持者。</li><li>了解涉众的组成及其特定需要是开发有效解决方案的关键。</li></ul>        <h3 id="需求的类型和种类"   >          <a href="#需求的类型和种类" class="heading-link"><i class="fas fa-link"></i></a>需求的类型和种类</h3>      <ul><li>功能性（Functionality）：特性、功能、安全性。</li><li>可用性（Usability）：人性化因素、帮助、文档。</li><li>可靠性（Reliability ）：故障频率、可恢复性、可预测性。</li><li>性能（Performance ）：响应时间、吞吐量、准确性、有效性、资源利用率。</li><li>可支持性（Supportability）：适应性、可维护性、国际化、可配置性</li><li>FURPS+中的“+” 号意味着还有一些其他的约束，如:<ul><li>实现（Implementation）：资源限制、语言和工具、硬件等。</li><li>接口（Interface）：强加于外部系统接口之上的约束。</li><li>操作（Operation）：对其操作设置的系统管理。</li><li>包装（Packaging)：例如物理的包装盒。</li><li>授权（Legal）：许可证或其它方式。</li></ul></li></ul>        <h3 id="UP-制品如何组织需求——关键的-UP-需求制品"   >          <a href="#UP-制品如何组织需求——关键的-UP-需求制品" class="heading-link"><i class="fas fa-link"></i></a>UP 制品如何组织需求——关键的 UP 需求制品</h3>      <ul><li>用例模型<ul><li>一组使用系统的典型场景。主要用于功能（行为的）需求。</li></ul></li><li>补充规格说明<ul><li>基本上是用例之外的所有内容。主要用于所有非功能需求，例如性能或许可发布。 该制品也用来记录没有表示(或不能表示）为用例的功能特性，例如报表生成。</li></ul></li><li>词汇表<ul><li>定义重要的术语，数据字典记录了关于数据的需求，例如有效性规则，容许值等。对象属性、操作调用的参数、报表布局等。</li></ul></li><li>设想<ul><li>概括了高阶需求，这些需求在用例模型和补充性规格说明中进行细化。设想也概括了项目的业务案例。设想是简短的执行概要文档 ，用以快速了解项目的主要思想。</li></ul></li><li>业务规则<ul><li>领域规则，描述了凌驾于某一软件项目的需求或政策，这些规则是领域或业务所要求的，并且许多应用应该遵从这些规则。例如政府的税收法规。</li><li>领域规则的细节可以记录在补充性规格说明中，因为这些规则通常更为持久，对不止一个软件项目适用，应将其放入集中的业务规则制品，以便重用。</li></ul></li></ul>        <h3 id="用例的好处"   >          <a href="#用例的好处" class="heading-link"><i class="fas fa-link"></i></a>用例的好处</h3>      <ul><li>从用户的角度获取操作性需求。</li><li>对系统的功能进行清晰而一致的描述。</li><li>系统测试的基础。</li><li>提供了从功能需求跟踪到系统中真正的类和操作的能力。</li></ul>        <h3 id="为什么使用用例"   >          <a href="#为什么使用用例" class="heading-link"><i class="fas fa-link"></i></a>为什么使用用例</h3>      <ul><li>使工作保持简单的好方法。</li><li>使领域专家或需求提供者自己编写（或参与编写）用例成为可能。</li><li>强调了用户的目标和观点。</li><li>更强调以客户为中心。</li><li>能够根据需要对复杂程度和形式化程度进行增减删节。</li></ul>        <h3 id="参与者的三种类型"   >          <a href="#参与者的三种类型" class="heading-link"><i class="fas fa-link"></i></a>参与者的三种类型</h3>      <ul><li>主要参与者：具有用户目标，并通过使用 SuD 的服务完成。<ul><li>为何确定主要参与者？用来发现驱动用例的用户目标</li></ul></li><li>协助参与者：为 SuD 提供服务，通常是计算机系统，但也可以是组织或人。<ul><li>为何确定协助参与者？为了明确外部接口或利益</li></ul></li><li>幕后参与者：在用例行为中具有影响或利益，但不是主要或协助参与者。例如，政府收税机构。<ul><li>如何要确定幕后参与者？是为了确保确定并满足所有必要的重要事物。如果不明确地对幕后参与者进行命名，则有时很容易忽略其影响或利益。</li></ul></li></ul>        <h3 id="用例的三种常用形式"   >          <a href="#用例的三种常用形式" class="heading-link"><i class="fas fa-link"></i></a>用例的三种常用形式</h3>      <ul><li>摘要：简洁的一段式概要，通常用于主成功场景。<ul><li>何时使用？在早期需求分析过程中，为快速了解主体和范围使用。可能只需要几分钟编写</li></ul></li><li>非正式：非正式的段落格式。用几个段落覆盖不同场景。<ul><li>何时使用？同上</li></ul></li><li>详述：详细编写所有步骤及各种变化，同时具有补充部分，如前置条件和成功保证<ul><li>何时使用？确定并以摘要形式编写了大量用例后，在第一次需求讨论会中，详细地编写其中少量的具有重要架构和高价值的用例</li></ul></li></ul>        <h3 id="详述用例模版"   >          <a href="#详述用例模版" class="heading-link"><i class="fas fa-link"></i></a>详述用例模版</h3>      <ul><li>用例名称：以动词开始</li><li>范围：界定了所要设计的系统</li><li>级别：用户目标级别或子功能级别（重用，如信用卡支付）。</li><li>主要参与者：调用系统，使之交付服务</li><li>涉众及其关注点列表：关注该用例的人及其需要。重要！能够让我们更清楚详细的系统职责</li><li>前置条件：值得告知读者的，开始前必须为真的条件</li><li>成功保证：值得告知读者的，成功完成必须满足的条件</li><li>主成功场景：典型的、无条件的、理想方式的成功场景</li><li>扩展：成功或失败的替代场景</li><li>特殊需求：相关的非功能需求</li><li>技术和数据变元表：不同的 I/O 方法和数据格式</li><li>发生频率：影响对实现的调查、测试和时间安排</li><li>杂项：例如未解决问题</li></ul>        <h3 id="准则：以无用户界面的本质风格编写用例"   >          <a href="#准则：以无用户界面的本质风格编写用例" class="heading-link"><i class="fas fa-link"></i></a>准则：以无用户界面的本质风格编写用例</h3>      <ul><li>收银员会说“登录”。</li><li>收银员想到的图形界面、对话框、用户名、密码。</li><li>这是实现的一种机制，而不是目标本身。</li><li>与实现机制无关的目标：“标识自己的身份并得到认证”。</li><li>或更高层次的目标：“防盗”。</li></ul>        <h3 id="以本质风格编写用例"   >          <a href="#以本质风格编写用例" class="heading-link"><i class="fas fa-link"></i></a>以本质风格编写用例</h3>      <ul><li>本质风格编写用例，摒除用户界面并且关注参与者的意图。</li><li>具体风格用例文本涵盖对用户界面的决策，在早期需求工作中应该避免。</li></ul>        <h3 id="编写黑盒用例"   >          <a href="#编写黑盒用例" class="heading-link"><i class="fas fa-link"></i></a>编写黑盒用例</h3>      <p>编写黑盒用例，不对系统内部工作、构件或设计进行描述，通过职责描述系统。</p>        <h3 id="如何发现用例"   >          <a href="#如何发现用例" class="heading-link"><i class="fas fa-link"></i></a>如何发现用例</h3>      <ul><li>选择系统边界，系统仅仅是软件应用，还是将硬件和作用作为整体，是一个人使用，还是整个组织使用。</li><li>寻找主要参与者，通过使用系统的服务实现目标的人或事。</li><li>确定每个参与者的目标</li><li>定义满足用户目标的用例，根据其目标对用例命名。通常，用户目标级别的用例和用户目标是一一对应的</li></ul>        <h3 id="什么样的问题有助于寻找参与者和目标"   >          <a href="#什么样的问题有助于寻找参与者和目标" class="heading-link"><i class="fas fa-link"></i></a>什么样的问题有助于寻找参与者和目标</h3>      <ul><li>谁来启动和停止系统。</li><li>谁来完成用户管理和安全管理。</li><li>谁来完成系统管理。</li><li>“时间”是管理者吗。因为系统要响应时间事件而完成某些活动。</li><li>系统失败时，是否存在监控进程将系统重新启动。</li><li>软件升级是如何处理的，是推模式还是拉模式。</li><li>除了人作为主要参与者外，还有其他外部的软件或自动机器系统调用该系统的服务吗。</li><li>谁来考察系统活动或性能。</li><li>谁来考察日志，是否可以远程检索。</li><li>系统发生错误或故障时应通知谁</li></ul>        <h3 id="用例的粒度问题"   >          <a href="#用例的粒度问题" class="heading-link"><i class="fas fa-link"></i></a>用例的粒度问题</h3>      <ul><li>大用例<ul><li>我们的企业需要拓宽销售渠道。</li><li>整个系统就只有一个用例!!!</li></ul></li><li>小的用例<ul><li>输入口令。</li><li>系统中可能有成百上千个用例!!!</li></ul></li><li>我们必须权衡</li></ul>        <h3 id="什么样的测试有助于发现有用的用例"   >          <a href="#什么样的测试有助于发现有用的用例" class="heading-link"><i class="fas fa-link"></i></a>什么样的测试有助于发现有用的用例</h3>      <ul><li>老板测试</li><li>EBP 测试</li><li>规模测试</li></ul>        <h3 id="补充性规格说明中的元素"   >          <a href="#补充性规格说明中的元素" class="heading-link"><i class="fas fa-link"></i></a>补充性规格说明中的元素</h3>      <ul><li>FURPS+ 需求-功能性、可用性、可靠性和可支持性。</li><li>报表。</li><li>硬件和软件约束。</li><li>领域 (或者业务) 规则。</li><li>法律问题 – 责任，知识产权，等等。</li><li>包装, 等等。</li></ul>        <h3 id="Vision-设想-愿景）元素"   >          <a href="#Vision-设想-愿景）元素" class="heading-link"><i class="fas fa-link"></i></a>Vision (设想/愿景）元素</h3>      <ul><li>修订历史</li><li>定位</li><li>涉众描述</li><li>产品概述</li><li>系统特性概要</li><li>其他需求和约束</li></ul>        <h3 id="是否应该在设想文档中重复其他需求"   >          <a href="#是否应该在设想文档中重复其他需求" class="heading-link"><i class="fas fa-link"></i></a>是否应该在设想文档中重复其他需求</h3>      <ul><li>设想文档中，系统特性简明概括了通常在用例中要详细说明的功能性需求。</li><li>设想文档能对补充性规格说明中详细说明的其他需求（如可靠性和可用性）加以概括。</li><li>尽量避免陷入对自己的重复当中。</li><li>对于其他需求，需避免在设想和补充性规格说明中重复或近于重复。最好在补充性规格说明中记录这些需求，设想中，加以指引</li></ul>        <h3 id="先写设想还是用例"   >          <a href="#先写设想还是用例" class="heading-link"><i class="fas fa-link"></i></a>先写设想还是用例</h3>      <p>建议如下顺序</p><ul><li>首先编写简要的设想草案。</li><li>确定用户目标和对应的用例名称。</li><li>详细编写一些用例，并且开始编写补充性规格说明。</li><li>精化设想，对以上制品信息进行概括。</li></ul>        <h2 id="8-9-章"   >          <a href="#8-9-章" class="heading-link"><i class="fas fa-link"></i></a>8-9 章</h2>              <h3 id="细化阶段开始构建的制品"   >          <a href="#细化阶段开始构建的制品" class="heading-link"><i class="fas fa-link"></i></a>细化阶段开始构建的制品</h3>      <ul><li>领域模型<ul><li>概念模型的可视化，类似于领域实体的静态信息模型。</li></ul></li><li>设计模型<ul><li>描述逻辑设计的一组图，包括软件类图、对象交互图、包图等。</li></ul></li><li>软件架构文档<ul><li>学习辅助工具，概括关键架构问题及其在设计中的解决方案。该文档是对重要设计思想及其在系统中动机的概要。</li></ul></li><li>数据模型<ul><li>包括数据库方案，以及在对象和非对象表示之间映射的策略。</li></ul></li><li>用例示意板，用户界面原型<ul><li>描述用户界面、导航路径、可用性模型等。</li></ul></li></ul>        <h3 id="领域模型并非表示软件制品或类"   >          <a href="#领域模型并非表示软件制品或类" class="heading-link"><i class="fas fa-link"></i></a>领域模型并非表示软件制品或类</h3>      <p>领域模型是对所关注的现实世界领域中事物的可视化，而不是诸如 java 或 C#类的软件对象，或有职责软件对象</p>        <h3 id="领域模型和数据模型是一回事吗"   >          <a href="#领域模型和数据模型是一回事吗" class="heading-link"><i class="fas fa-link"></i></a>领域模型和数据模型是一回事吗</h3>      <ul><li>领域模型不是数据模型。</li><li>不会排除需求中没有明确要求记录其相关信息的类。</li><li>不会排除没有属性的概念类。</li></ul>        <h3 id="为什么要创建领域模型"   >          <a href="#为什么要创建领域模型" class="heading-link"><i class="fas fa-link"></i></a>为什么要创建领域模型</h3>      <ul><li>它是一种可视化语言，传达了真实世界中的概念或者该领域中的概念类。</li><li>在 UP 领域模型中，涉众对领域内重要概念的看法——影响设计者，降低差异。</li><li>降低与 OO 建模之间的表示差异<ul><li>领域层软件类的名称要源于领域模型中的名称，减少我们的思维与软件模型之间的表示差异</li></ul></li></ul>        <h3 id="如何创建领域模型"   >          <a href="#如何创建领域模型" class="heading-link"><i class="fas fa-link"></i></a>如何创建领域模型</h3>      <p>以当前迭代中所要设计的需求为界</p><ol><li>寻找概念类。</li><li>将其绘制为 UML 类图中的类。</li><li>添加关联和属性</li></ol>        <h3 id="如何找到概念类（扩充）"   >          <a href="#如何找到概念类（扩充）" class="heading-link"><i class="fas fa-link"></i></a>如何找到概念类（扩充）</h3>      <ol><li>重用和修改现有的模型。</li><li>使用分类列表。</li><li>确定名词短语</li></ol>        <h3 id="报表对象——模型中是否要包括“票据”"   >          <a href="#报表对象——模型中是否要包括“票据”" class="heading-link"><i class="fas fa-link"></i></a>报表对象——模型中是否要包括“票据”</h3>      <ul><li>一般来说，在领域模型中显示其它信息的报表并没有意义，因为其所有信息都是源于或者复制于其它信息源的。</li><li>另外一方面，就业务规则而言，收据又有特殊的作用，在我们退货时，我们需要收据作为凭据</li></ul>        <h3 id="为什么需要描述类"   >          <a href="#为什么需要描述类" class="heading-link"><i class="fas fa-link"></i></a>为什么需要描述类</h3>      <ul><li>Item 实例表示商店里实际的商品，他可以拥有一个序列号。</li><li>Item 具有描述、价格和 ID，这些内容不会在任何其他地方记录。</li><li>商店里每个工作人员都有健忘症。</li><li>每售出一件实际的商品，相应的 Item</li></ul>        <h3 id="何时使用“描述”类建模"   >          <a href="#何时使用“描述”类建模" class="heading-link"><i class="fas fa-link"></i></a>何时使用“描述”类建模</h3>      <ul><li>需要有关商品或服务的描述，独立于任何商品或服务的现有实例。</li><li>删除其所描述事务（如 Item）的实例后，导致信息丢失，而这些信息是需要维护的，但是被错误地与所删除的事务关联起来。</li><li>减少冗余或重复信息</li></ul>        <h3 id="何时添加关联"   >          <a href="#何时添加关联" class="heading-link"><i class="fas fa-link"></i></a>何时添加关联</h3>      <ul><li>如果存在需要保持一段时间的关系，将这种语义表示为关联（“需要记住”的关联）。</li><li>可以从常见关联列表中派生的关联</li></ul>        <h3 id="准则：避免加入大量关联"   >          <a href="#准则：避免加入大量关联" class="heading-link"><i class="fas fa-link"></i></a>准则：避免加入大量关联</h3>      <ul><li>如果我们有 n 个类，将会有 n(n-1)个关联。</li><li>“视觉干扰”，使图变得混乱。</li><li>关注“需要记住”的关联。</li></ul>        <h3 id="关联是否会在软件中实现"   >          <a href="#关联是否会在软件中实现" class="heading-link"><i class="fas fa-link"></i></a>关联是否会在软件中实现</h3>      <ul><li>关联不是数据流、数据库外键联系、实例变量或软件方案中的对象连接的语句；</li><li>关联声明的是针对现实领域从纯概念角度看有意义的关系。</li><li>添加关联是为了突出我们对重要关系的大致理解，而非记录对象或数据的结构</li></ul>        <h3 id="何时定义新的数据类型类"   >          <a href="#何时定义新的数据类型类" class="heading-link"><i class="fas fa-link"></i></a>何时定义新的数据类型类</h3>      <p>在下述情况下，在领域模型里，把最初被认为是数字或字符串的数据类型表示为新的数据类型类：</p><ul><li>由不同的小节组成（如电话号码、人名、地址）</li><li>具有与之相关的操作，例如解析或校验（如社会安全号）</li><li>具有其他属性（如促销价格有开始日期和结束日期）</li><li>单位的数量（如支付总额具有货币单位）</li><li>具有以上性质的一个或多个类型的抽象（如商品标识符）</li></ul>        <h2 id="10-16-章"   >          <a href="#10-16-章" class="heading-link"><i class="fas fa-link"></i></a>10-16 章</h2>              <h3 id="什么是系统顺序图"   >          <a href="#什么是系统顺序图" class="heading-link"><i class="fas fa-link"></i></a>什么是系统顺序图</h3>      <ul><li>系统顺序图（SSD）<ul><li>是为阐述与所讨论系统相关的输入和输出事件而快速、简单地创建的制品。</li><li>它展示了对一个特定的用例，直接与系统交互的外部参与者、系统（作为黑盒）以及由参与者发起的系统事件。</li><li>用例文本暗示了 enteritem 事件，SSD 将其变得具体明确。</li></ul></li><li><strong>准则：</strong>应为每个用例的主成功场景，以及频繁发生的或者复杂的替代场景绘制 SSD</li></ul>        <h3 id="为什么绘制-SSD"   >          <a href="#为什么绘制-SSD" class="heading-link"><i class="fas fa-link"></i></a>为什么绘制 SSD</h3>      <p>软件设计的问题：系统会发生什么事件，必须为处理和响应这些事件（来自于鼠标、键盘、其他系统）来设计软件。因此，必须准确地知道，什么事外部输入的事件，即系统事件。这些事件是系统行为分析的重要部分。</p><p>软件系统要对以下三种事件进行响应：</p><ol><li>来自于参与者（人或计算机）的外部事件</li><li>时间事件。</li><li>错误或异常（通常源于外部）</li></ol>        <h3 id="契约有哪些部分"   >          <a href="#契约有哪些部分" class="heading-link"><i class="fas fa-link"></i></a>契约有哪些部分</h3>      <ul><li>操作<ul><li>操作的名称和参数</li></ul></li><li>交叉引用<ul><li>会发生此操作的用例</li></ul></li><li>前置条件<ul><li>执行操作之前，对系统或领域模型对象状态的重要假设。这些假设比较重要，应该告诉读者。</li></ul></li><li>后置条件<ul><li>最重要的部分，完成操作之后，领域模型对象的状态。</li></ul></li></ul>        <h3 id="后置条件描述了领域模型中对象状态的变化"   >          <a href="#后置条件描述了领域模型中对象状态的变化" class="heading-link"><i class="fas fa-link"></i></a>后置条件描述了领域模型中对象状态的变化</h3>      <ul><li>实例创建和删除。</li><li>属性值的变化。</li><li>关联形成和消除</li></ul>        <h3 id="如何创建和编写契约"   >          <a href="#如何创建和编写契约" class="heading-link"><i class="fas fa-link"></i></a>如何创建和编写契约</h3>              <h4 id="创建契约"   >          <a href="#创建契约" class="heading-link"><i class="fas fa-link"></i></a>创建契约</h4>      <ul><li>从 SSD 中识别系统操作</li><li>如果系统操作复杂，其结果可能不明显，或者在用例中表达不清楚的系统操作，构造一个契约</li><li>为了描述后置条件，使用下列列表<ul><li>实例创建或删除</li><li>属性修改</li><li>关联形成和清除</li></ul></li></ul>        <h4 id="编写契约"   >          <a href="#编写契约" class="heading-link"><i class="fas fa-link"></i></a>编写契约</h4>      <ul><li>以说明性的、被动式的过去时态编写后置条件</li><li>要在已有的或新创建的对象之间建立关联</li></ul>        <h3 id="使用层有助于解决以下问题"   >          <a href="#使用层有助于解决以下问题" class="heading-link"><i class="fas fa-link"></i></a>使用层有助于解决以下问题</h3>      <ul><li>源代码的变更波及整个系统——大部分系统是高度耦合。</li><li>应用逻辑与用户界面交织在一起，因此，无法复用于其他不同界面或分布到其他处理节点之上。</li><li>潜在的一般性技术服务或业务逻辑与更特定于应用的逻辑交织在一起，因此无法被复用、分布到其他节点或方便的使用不同实现替换。</li><li>不同的关注领域之间高度耦合。因此，难以为不同开发者清晰地界定和分配任务</li></ul>        <h3 id="使用层的好处"   >          <a href="#使用层的好处" class="heading-link"><i class="fas fa-link"></i></a>使用层的好处</h3>      <ul><li><p>总的来说，使用层可以做到关系分离、高级服务与低级服务分离、特定于应用的服务与一般性服务分离；</p></li><li><p>层可以减少耦合和依赖性、增强内聚性、提高潜在的复用性并且使概念更加清晰。</p></li><li><p>封装和分解了相关的复杂性。</p></li><li><p>某些层能够用新的实现替换。对于较低级的技术服务层来说不大可能（如，java.util），但对于 UI、应用层和领域层来说是可能的。</p></li><li><p>较低层包含可复用功能。</p></li><li><p>某些层（主要是领域层和技术服务层）可以是分布式的。</p></li><li><p>通过逻辑划分，有助于团队开发。</p></li></ul>        <h3 id="观察者模式（选择）"   >          <a href="#观察者模式（选择）" class="heading-link"><i class="fas fa-link"></i></a>观察者模式（选择）</h3>      <p>观察者模式（Observer）是对该原则的合理扩充，即领域对象只能通过 PropertyListener(Java 中的常用接口)的接口向视图的 UI 对象发送消息。</p>        <h3 id="模型-视图分离的动机包括"   >          <a href="#模型-视图分离的动机包括" class="heading-link"><i class="fas fa-link"></i></a>模型-视图分离的动机包括</h3>      <ul><li>支持内聚的模型定义，这些定义只关注领域过程，而不是用户界面。</li><li>允许对模型和用户界面层分别进行开发。</li><li>使界面的需求变更对领域层的影响最小化。</li><li>允许新视图能方便地连接到现有的领域层之上，而不会对领域层产生影响。</li><li>允许对同一模型对象同时使用多个视图，例如，销售信息同时具有表格和业务图表视图。</li><li>允许模型层的运行不依赖于用户界面层。例如，消息处理后批处理模式的系统。</li><li>允许简模型层能方便地移植到另一用户接口框架下</li></ul>        <h3 id="创始消息"   >          <a href="#创始消息" class="heading-link"><i class="fas fa-link"></i></a>创始消息</h3>      <ul><li>最开始的消息在 UML 称为创始消息（Found Message），以实心圆作为起点表示此类消息</li><li>创始消息表示没有特定发送者、发送者不明确或消息源众多的消息。</li></ul>        <h3 id="组合优于聚合"   >          <a href="#组合优于聚合" class="heading-link"><i class="fas fa-link"></i></a>组合优于聚合</h3>      <ul><li>聚合(aggregation)<ul><li>一种模糊的关联，其不精确地暗示了整体-部分关系。</li><li>准则：不要在 UML</li></ul></li><li>组合(composition)<ul><li>组合关系有几个含义<ul><li>在某一时刻，部分的实例（如：Square）只属于一个组成实例(如：Board)</li><li>部分必须总是属于组成（不存在随意游离的 Fingers）。</li><li>组成要负责创建和删除其部分，既可以自己来创建/删除部分，也可以与其他对象协作来创建/删除部分</li></ul></li><li>如果组成被销毁，其部分也必须被销毁</li></ul></li></ul>        <h3 id="主动类"   >          <a href="#主动类" class="heading-link"><i class="fas fa-link"></i></a>主动类</h3>      <ul><li>主动对象（active object）运行于自己控制的执行线程之上。</li><li>主动对象的类即为主动类(active class)</li></ul>        <h2 id="17-21-章"   >          <a href="#17-21-章" class="heading-link"><i class="fas fa-link"></i></a>17-21 章</h2>              <h3 id="职责和职责驱动设计"   >          <a href="#职责和职责驱动设计" class="heading-link"><i class="fas fa-link"></i></a>职责和职责驱动设计</h3>      <ul><li>对象的行为职责<ul><li>自身执行一些行为，例如创建对象或计算。</li><li>初始化其他对象中的动作。</li><li>控制或者协调其它对象的活动。</li></ul></li><li>对象的认知职责<ul><li>对私有封装数据的认知。</li><li>对相关对象的认知。</li><li>对其能够导出或计算的事物的认知</li></ul></li></ul>        <h3 id="设计模式的基本要素"   >          <a href="#设计模式的基本要素" class="heading-link"><i class="fas fa-link"></i></a>设计模式的基本要素</h3>      <ul><li>设计模式一般有如下几个基本要素：模式名称、问题、目的、解决方案、效果、实例代码和相关设计模式，</li><li>其中的关键元素包括以下<strong>四个方面</strong>：<ul><li>模式名称 (Pattern name)</li><li>问题 (Problem)</li><li>解决方案 (Solution)</li><li>效果 (Consequences)</li></ul></li></ul>        <h3 id="坏味代码-Code-Smell）特点"   >          <a href="#坏味代码-Code-Smell）特点" class="heading-link"><i class="fas fa-link"></i></a>坏味代码(Code Smell）特点</h3>      <ul><li>冗余的代码。</li><li>大型方法。</li><li>具有大量实例变量的类。</li><li>具有大量代码的类。</li><li>明显相似的子类。</li><li>在设计中很少使用或者没有使用接口。</li><li>许多对象之间有很多的耦合度。</li><li>包含大量其他的垃圾代码…</li></ul>        <h3 id="什么是可见性"   >          <a href="#什么是可见性" class="heading-link"><i class="fas fa-link"></i></a>什么是可见性</h3>      <p>可见性是对象“看到”或引用其他对象的能力</p><ul><li>实现对象 A 到对象 B 的可见性通常有四种方式:<ul><li>属性可见性 Attribute Visibility：B 是 A 的属性。</li><li>参数可见性 Parameter visibility：B 是 A 方法中的参数。</li><li>局部可见性 Local Visibility：B 是 A 中方法的局部对象（不是参数）。</li><li>全局可见性 Global Visibility：B 具有某种方式的全局可见性。</li></ul></li><li>动机：为了使对象 A 能够向对象 B 发送消息，对于 A 而言，B 必须是可见的。</li></ul>        <h3 id="面向对象设计原则"   >          <a href="#面向对象设计原则" class="heading-link"><i class="fas fa-link"></i></a>面向对象设计原则</h3>      <ul><li>单一职责原则<ul><li>类的职责要单一，不能将太多的职责放在一个类中</li></ul></li><li>开闭原则<ul><li>软件实体对扩展是开放的，但对修改是关闭的，即在不修改一个软件实体的基础上去扩展其功能</li></ul></li><li>里氏代换原则<ul><li>在软件系统中，一个可以接受基类对象的地方必然可以接受一个子类对象</li></ul></li><li>依赖倒转原则<ul><li>要针对抽象层编程，而不要针对具体类编程</li></ul></li><li>接口隔离原则<ul><li>使用多个专门的接口来取代一个统一的接口</li></ul></li><li>合成复用原则<ul><li>在系统中应该尽量多使用组合和聚合关联关系，尽量少使用甚至不使用继承关系</li></ul></li><li>迪米特法则(选择)</li></ul>        <h3 id="在迪米特法则中，对于一个对象，其朋友"   >          <a href="#在迪米特法则中，对于一个对象，其朋友" class="heading-link"><i class="fas fa-link"></i></a>在迪米特法则中，对于一个对象，其朋友</h3>      <ul><li>当前对象本身(this)；</li><li>以参数形式传入到当前对象方法中的对象；</li><li>当前对象的成员对象；</li><li>如果当前对象的成员对象是一个集合，那么集合中的元素也都是朋友；</li><li>当前对象所创建的对象</li></ul>]]></content>
      
      
      <categories>
          
          <category> 课程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人工智能A理论知识点</title>
      <link href="/2020/05/02/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BDA%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2020/05/02/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BDA%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[        <h2 id="绪论"   >          <a href="#绪论" class="heading-link"><i class="fas fa-link"></i></a>绪论</h2>              <h3 id="人工智能定义"   >          <a href="#人工智能定义" class="heading-link"><i class="fas fa-link"></i></a>人工智能定义</h3>      <ul><li>类人行为系统</li><li>类人思维系统</li><li>理性思维系统</li><li>理性行为系统</li></ul><span id="more"></span>        <h3 id="人工智能最终目标"   >          <a href="#人工智能最终目标" class="heading-link"><i class="fas fa-link"></i></a>人工智能最终目标</h3>      <p>建立关于<strong>智能的理论</strong>和让<strong>智能机器达到人类的智能水平</strong>（人工智能体）</p>        <h3 id="图灵测试"   >          <a href="#图灵测试" class="heading-link"><i class="fas fa-link"></i></a>图灵测试</h3>      <ul><li>概念<ul><li>一个人与一台机器置于同一房间，而与另一个人分开，后一个人称为询问者</li><li>询问者不能看到屋中的任何一方，也不能与他们对话，只能通过一个类似终端的文本系统与他们联系。询问者若不能通过终端的回答来判断哪个是人，哪个是机器，则这个机器就是智能的。</li></ul></li><li>通过图灵测试具有如下能力<ul><li><strong>自然语言处理</strong>：实现用自然语言与计算机进行交流</li><li><strong>知识表示</strong>：存储它知道的或听到的、看到的</li><li><strong>自动推理</strong>：能根据存储的信息回答问题，并提出新的结论</li><li><strong>机器学习</strong>：能适应新的环境，并能检测和推断出新的模式</li><li>*计算机视觉：可以感知物体</li><li>*机器人技术：可以操纵和移动物体</li></ul></li><li>重要特征<ul><li>用人类的表现来衡量假设的智能机器的表现，这无疑是评价智能行为的最好且唯一的标准</li></ul></li></ul>        <h3 id="产生和发展"   >          <a href="#产生和发展" class="heading-link"><i class="fas fa-link"></i></a>产生和发展</h3>      <p>人工智能之父：<strong>约翰•麦卡锡</strong></p><ul><li>孕育期</li><li>形成及第一个兴旺期（起源）<ul><li>1956 年夏季</li><li>达特茅斯会议</li></ul></li><li>萧条波折期</li><li>第二个兴旺期</li><li>稳步增长期</li></ul>        <h3 id="主要学派"   >          <a href="#主要学派" class="heading-link"><i class="fas fa-link"></i></a>主要学派</h3>      <ul><li>符号主义<ul><li>（AI 研究的传统观点）人类智能的基本单元是<strong>符号</strong>，认知过程就是<strong>符号操作过程</strong>，从而思维就是<strong>符号计算</strong></li><li>主要特征<ul><li>立足于<strong>逻辑运算</strong>和<strong>符号操作</strong></li><li>知识可用<strong>显示的符号</strong>表示</li><li>便于模块化</li><li>能与传统的符号数据库进行连接</li><li>可对推理结论进行解</li></ul></li><li>人工智能核心问题<ul><li>知识表示</li><li>知识推理</li><li>知识运用</li></ul></li></ul></li><li>联接主义<ul><li>人工智能可以通过仿生人类的大脑的结构来实现，它研究的内容就是神经网络</li><li>主要特征<ul><li>通过神经元之间并行协作实现信息的处理，处理过程具有<strong>并行性、动态性、全局性</strong></li><li>可以实现<strong>联想</strong>的功能，便于对有<strong>噪声</strong>的信息进行处理。</li><li>可以通过对神经元之间<strong>连接强度</strong>的调整实现<strong>学习和分类</strong>。</li><li>适合模拟人<strong>形象思维</strong>的过程。</li><li>求解问题时，可以较快得到一个<strong>近似解</strong></li></ul></li></ul></li><li>行为主义<ul><li>智能行为的基础是<strong>控制论和“感知-行为”</strong>，是在与环境的交互作用中表现出来的</li><li>主要特征<ul><li>智能取决于感知和行动。</li><li>智能行为智能现实在世界中与周围环境交互作用而表现出来。</li><li>人工智能可以像人类智能一样逐步进化，分阶段发展和增</li></ul></li></ul></li></ul>        <h3 id="主要研究内容"   >          <a href="#主要研究内容" class="heading-link"><i class="fas fa-link"></i></a>主要研究内容</h3>      <ul><li>知识表示</li><li>推理</li><li>搜索与规划</li><li>机器学习</li></ul>        <h3 id="应用领域"   >          <a href="#应用领域" class="heading-link"><i class="fas fa-link"></i></a>应用领域</h3>      <ul><li>专家系统</li><li>模式识别</li><li>自然语言处理</li><li>智能决策树支持系统</li><li>神经网络</li><li>自动定理证明</li><li>博弈</li></ul>        <h2 id="知识表示"   >          <a href="#知识表示" class="heading-link"><i class="fas fa-link"></i></a>知识表示</h2>              <h3 id="概念"   >          <a href="#概念" class="heading-link"><i class="fas fa-link"></i></a>概念</h3>      <p>知识表示就是研究用机器表示上述知识的可行性、有效性的一般方法，可以看成将知识符号化，即编码成某种数据结构，并输入到计算机的过程和方法</p><p>$$<br>知识表示=数据结构+处理机制<br>$$</p><p>知识是经过加工的信息，它包括事实、信念和启发式规则</p><ul><li>事实<ul><li>是关于对象和物体的知识。</li></ul></li><li>规则<ul><li>是有关问题中与事物的行动、动作相联系的因果关系的知识。</li></ul></li></ul>        <h4 id="知识作用分类"   >          <a href="#知识作用分类" class="heading-link"><i class="fas fa-link"></i></a>知识作用分类</h4>      <ul><li>描述性知识<ul><li>表示对象及概念的特征及其相互关系的知识，以及问题求解状况的知识，也称为事实性知识</li></ul></li><li>判断性知识<ul><li>表示与领域有关的问题求解知识如推理规则等，也称为启发性知识</li></ul></li><li>过程性知识<ul><li>表示问题求解的控制策略，即如何应用判断性知识进行推理的知识</li></ul></li></ul>        <h4 id="知识表示方法要求"   >          <a href="#知识表示方法要求" class="heading-link"><i class="fas fa-link"></i></a>知识表示方法要求</h4>      <ul><li>表示能力<ul><li>要求能够正确、有效地将问题求解所需要的各类知识都表示出来。</li></ul></li><li>可理解性<ul><li>所表示的知识应易懂、易读</li></ul></li><li>便于知识的获取<ul><li>使得智能系统能够渐近地增加知识，逐步进化</li></ul></li><li>便于搜索<ul><li>表示知识的符号结构和推理机制应支持对知识库的高效搜索，使得智能系统能够迅速地感知事物之间的关系和变化，同时很快地从知识库中找到有关知识</li></ul></li><li>便于推理<ul><li>能够从已有的知识中推出需要的答案和结论</li></ul></li></ul>        <h3 id="基本的知识表示方法"   >          <a href="#基本的知识表示方法" class="heading-link"><i class="fas fa-link"></i></a>基本的知识表示方法</h3>      <ul><li>谓词逻辑表示法</li><li>产生式表示法</li><li>语义网络表示法</li><li>框架表示法</li><li>*脚本</li><li>*面向对象表示法</li></ul><blockquote><p><strong>产生式</strong>系统比较适合与表示<strong>非结构化的知识</strong></p><p><strong>结构化知识</strong>可以用<strong>语义网络或者框架</strong>表示</p></blockquote>        <h4 id="命题与谓词逻辑关系"   >          <a href="#命题与谓词逻辑关系" class="heading-link"><i class="fas fa-link"></i></a>命题与谓词逻辑关系</h4>      <p>谓词逻辑在命题逻辑基础上发展出来，命题逻辑是谓词逻辑的一种特殊形式</p>        <h3 id="谓词逻辑表示法"   >          <a href="#谓词逻辑表示法" class="heading-link"><i class="fas fa-link"></i></a>谓词逻辑表示法</h3>              <h4 id="命题"   >          <a href="#命题" class="heading-link"><i class="fas fa-link"></i></a>命题</h4>      <ul><li>具有真假意义的陈述句<ul><li>如，北京是中华人民共和国的首都</li><li>中国是一个美丽的国家</li></ul></li><li>原子命题<ul><li>不能分解成更简单的陈述语句，称为原子命题</li></ul></li><li>复合命题<ul><li>由联结词、标点符号和原子命题等复合构成的命题，称为复合命题</li></ul></li><li>命题常量<ul><li>如果一个命题标识符表示确定的命题，就称为命题常量</li></ul></li><li>命题变元<ul><li>如果命题标识符只表示任意命题的位置标志，就称为命题变元</li><li>命题变元可以表示任意命题，不能确定真值，<strong>命题变元不是命题</strong></li><li>当命题变元 P 用一个特定的命题取代时，P 才能确定真值，这时也称为<strong>对 P 进行指派</strong></li><li>当命题变元表示原子命题时，该变元称为<strong>原子变元</strong></li></ul></li><li>局限性<ul><li>它无法把它所描述的客观事物的结构及逻辑特征反映出来，也不能把不同事物的共同特征描述出来</li><li>如，对“老李是小李的父亲”这一命题，若用英文字母 P 表示，怎么也看不出老李与小李的父子关系</li></ul></li></ul>        <h4 id="谓词逻辑"   >          <a href="#谓词逻辑" class="heading-link"><i class="fas fa-link"></i></a>谓词逻辑</h4>      <ul><li>根据对象和对象上的谓词（即对象的属性和对象之间的关系），通过使用<strong>连接词和量词</strong>来表示世界</li><li>注意<ul><li>在<strong>命题逻辑</strong>中，每个表达式都是<strong>句子</strong>，表示事实。</li><li>在<strong>谓词逻辑</strong>中，有<strong>句子</strong>，但是也有<strong>项</strong>，表示对象。<strong>常量符号、变量和函数符号</strong>用于表示项，<strong>量词和谓词符号</strong>用于构造句子</li><li>可以表示规则</li></ul></li><li>举例<ul><li>Married(father(L1),x)</li><li>谓词符号(函数符号(常量符号),变量符号)</li></ul></li><li>函数符号与谓词符号<ul><li>若函数符号 f 中包含的个体数目为 n，则称 f 为 n 元函数符号。</li><li>若谓词符号中包含的个体数目为则称为元</li><li>如，father(x)是一元函数，Less(x,y)是二元谓词</li></ul></li><li>原子公式<ul><li>若 P 为 n 元谓词符号,t1,…,tn 都是项，则称 P(t1,…,tn)为原子公式，简称原子。</li><li>在原子中，若 t1,…,tn 都不含变量，则 P(t1,…,tn)是命题。</li></ul></li><li>一阶谓词<ul><li>仅个体常元被量化的谓词</li></ul></li></ul><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200524202455.png" style='width:500px;'/>        <h3 id="产生式表示法"   >          <a href="#产生式表示法" class="heading-link"><i class="fas fa-link"></i></a>产生式表示法</h3>              <h4 id="规则"   >          <a href="#规则" class="heading-link"><i class="fas fa-link"></i></a>规则</h4>      <p>$$<br>IF \quad P \quad then \quad Q \<br>P \quad -&gt; \quad Q<br>$$</p>        <h4 id="产生式系统"   >          <a href="#产生式系统" class="heading-link"><i class="fas fa-link"></i></a>产生式系统</h4>      <p>一组产生式可以放在一起，相互配合，协同作用，一个产生式生成的结论可以供另一个产生式作为已知事实使用，以获得问题的解决</p>        <h5 id="基本结构"   >          <a href="#基本结构" class="heading-link"><i class="fas fa-link"></i></a>基本结构</h5>      <img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200502154225.png" style="width:350px;margin:0 auto;"/><ul><li>规则库<ul><li>规则库是用于描述某领域内的知识的产生式集合，是某领域知识（规则）的存储器，其中的规则以产生式表示。</li></ul></li><li>综合数据库<ul><li>综合数据库又称为事实库，是用于存放输入的事实、从外部数据库输入的事实、中间结果（事实）和最后结果的工作区。</li></ul></li><li>推理机（控制系统）<ul><li>推理机是一个或一组程序，用来控制和协调规则库与综合数据库的运行，包含了推理方式和控制策略。</li><li>控制策略的作用就是确定选用什么规则或如何应用规则。</li><li>通常从选择规则到执行操作分 3 步完成：匹配、冲突解决和操作。</li></ul></li></ul>        <h3 id="语义网络表示法"   >          <a href="#语义网络表示法" class="heading-link"><i class="fas fa-link"></i></a>语义网络表示法</h3>      <ul><li>语义网络是一种通过概念及其语义联系（或语义关系）来表示知识的<strong>有向图</strong>，<strong>结点和弧必须带有标注</strong>。</li><li>其中，有向图的各结点用来表示各种事物、概念、情况、属性、状态、事件和动作等，</li><li>结点上的标注用来区分各结点所表示的不同对象，每个结点可以带有多个属性，以表征其代表的对象的特性。</li><li>基本语义关系有<ul><li>类属关系、包含关系、属性关系、时间关系、位置关系、相近关系、因果关系和组成关系。</li></ul></li></ul><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200524194435.png" style='width:400px;'/><ul><li>情况、动作和事件</li><li>推理过程<ul><li>继承推理</li><li>匹配推理</li></ul></li></ul>        <h3 id="框架表示法"   >          <a href="#框架表示法" class="heading-link"><i class="fas fa-link"></i></a>框架表示法</h3>      <ul><li>用“自顶向下”的方法<ul><li>先匹配一个现有的抽象模型（框架）</li><li>再确定抽象模型（框架）</li></ul></li><li>ISA 槽<ul><li>ISA 槽用于指出对象间抽象概念上的类属关系</li><li>具有继承性</li></ul></li><li>AKO 槽<ul><li>AKO 槽用于具体地指出对象间的类属关系</li><li>具有继承性</li></ul></li><li>Instance 槽<ul><li>Instance 槽用来表示<strong>AKO 槽</strong>的逆关系</li><li>具有继承性</li></ul></li><li>Part-of 槽<ul><li>Part-of 槽用于指出部分和全体的关系</li><li>不具有继承性</li></ul></li><li>对框架的继承、匹配与填槽来实现</li></ul>        <h2 id="确定性推理"   >          <a href="#确定性推理" class="heading-link"><i class="fas fa-link"></i></a>确定性推理</h2>              <h3 id="推理、正向推理、反向推理"   >          <a href="#推理、正向推理、反向推理" class="heading-link"><i class="fas fa-link"></i></a>推理、正向推理、反向推理</h3>      <ul><li>推理<ul><li>推理是按照某种策略从已有事实和知识推理出结论的过程。</li></ul></li><li>正向推理<ul><li>正向推理是由已知事实出发向结论方向的推理，也称为事实驱动推理。</li></ul></li><li>反向推理<ul><li>反向推理是以某个假设目标作为出发点的一种推理，又称为目标驱动推理或逆向推理。</li></ul></li></ul>        <h4 id="常用的推理方式"   >          <a href="#常用的推理方式" class="heading-link"><i class="fas fa-link"></i></a>常用的推理方式</h4>      <ul><li>演绎推理<ul><li>演绎推理是从全称判断推出特称判断或单称判断的过程，即从一般到个别的推理。演绎推理中最常用的形式是三段论法。</li></ul></li><li>归纳推理<ul><li>归纳推理是从足够多的事例中归纳出一般性结论的推理过程，是一种从个别到一般的推理过程。常用的归纳推理有枚举法和类比法。</li></ul></li><li>默认推理<ul><li>默认推理又称为缺省推理，是在知识不完全的情况下假设某些条件已经具备所进行的推理。</li></ul></li></ul>        <h3 id="推理冲突"   >          <a href="#推理冲突" class="heading-link"><i class="fas fa-link"></i></a>推理冲突</h3>      <ul><li>在推理过程中，匹配会出现三种情况<ul><li>已知事实不能与知识库中的任何知识匹配成功</li><li>已知事实恰好只与知识库中的一个知识匹配成功</li><li>已知事实可与知识库中的多个知识匹配成功；或者有多个（组）已知事实都可与知识库中某一知识匹配成功；或者有多个（组）已知事实可与知识库中的多个知识匹配成功</li></ul></li><li>出现冲突的情况<ul><li>正向推理<ul><li>如果有多条产生式规则的前件都和已知的事实匹配成功；</li><li>或者有多组不同的已知事实都与同一条产生式规则的前件匹配成功；</li><li>或者两种情况同时出现</li></ul></li><li>逆向推理<ul><li>如果有多条产生式的后件都和同一假设匹配成功，</li><li>或者有多条产生式后件可与多个假设匹配成功。</li></ul></li></ul></li><li>解决策略<ul><li>专一性排序、规则排序、数据排序、就近排序、上下文限制、按匹配度排序、按条件个数排序。</li></ul></li></ul>        <h3 id="可满足"   >          <a href="#可满足" class="heading-link"><i class="fas fa-link"></i></a>可满足</h3>      <p>如果对于谓词公式 P，至少存在一个解释使得公式 P 在此解释下的真值为真，则称公式 P 是可满足的。</p>        <h3 id="自然演绎推理"   >          <a href="#自然演绎推理" class="heading-link"><i class="fas fa-link"></i></a>自然演绎推理</h3>      <p>从一组事实出发，直接运用经典逻辑中的推理规则推出的结论过程</p>        <h4 id="三段论推理"   >          <a href="#三段论推理" class="heading-link"><i class="fas fa-link"></i></a>三段论推理</h4>      <ul><li>假言推理<ul><li>P, P-&gt;Q =&gt; Q</li></ul></li><li>拒取式<ul><li>~Q, P-&gt;Q =&gt; ~P</li></ul></li><li>假言三段论<ul><li>P-&gt;Q, Q-&gt;R =&gt; P-&gt;R</li></ul></li></ul>        <h4 id="避免两类错误"   >          <a href="#避免两类错误" class="heading-link"><i class="fas fa-link"></i></a>避免两类错误</h4>      <ul><li><strong>肯定后件</strong></li><li><strong>否定前件</strong></li></ul>        <h3 id="归结反演"   >          <a href="#归结反演" class="heading-link"><i class="fas fa-link"></i></a>归结反演</h3>              <h4 id="子句型"   >          <a href="#子句型" class="heading-link"><i class="fas fa-link"></i></a>子句型</h4>      <ul><li>文字<ul><li>原子谓词公式及其否定</li><li>如，P(x)，Q(x)</li></ul></li><li>子句<ul><li>任何文字的<strong>析取式</strong></li></ul></li><li>合取范式<ul><li>子句的合取</li></ul></li></ul>        <h4 id="合取范式标准化过程"   >          <a href="#合取范式标准化过程" class="heading-link"><i class="fas fa-link"></i></a>合取范式标准化过程</h4>      <ul><li>消去蕴涵符号；</li><li>减少否定的辖域（内移否定符号）；</li><li>变量标准化（变量换名）</li><li>消去存在量词(Skolem 变换)</li><li>全称量词前束化（化为前束形）；</li><li>消去全称量词；</li><li>把<strong>母式</strong>转化为<strong>合取范式</strong></li><li>化为子句集，<strong>注意元素不存在相同变元</strong></li></ul>        <h4 id="归结策略大致可分为下面两类"   >          <a href="#归结策略大致可分为下面两类" class="heading-link"><i class="fas fa-link"></i></a>归结策略大致可分为下面两类</h4>      <ul><li>删除策略</li><li>限制策略</li></ul>        <h3 id="推理分类"   >          <a href="#推理分类" class="heading-link"><i class="fas fa-link"></i></a>推理分类</h3>      <ul><li>演绎推理、归纳推理、默认推理</li><li>确定性推理、不确定性推理</li><li>单调推理、非单调推理</li><li>启发式推理、非启发式推理</li></ul>        <h2 id="搜索策略"   >          <a href="#搜索策略" class="heading-link"><i class="fas fa-link"></i></a>搜索策略</h2>              <h3 id="两个重要问题"   >          <a href="#两个重要问题" class="heading-link"><i class="fas fa-link"></i></a>两个重要问题</h3>      <ul><li>搜索什么</li><li>在哪里搜索</li></ul>        <h3 id="搜索策略评价标准"   >          <a href="#搜索策略评价标准" class="heading-link"><i class="fas fa-link"></i></a>搜索策略评价标准</h3>      <ul><li>完备性<ul><li>如果存在一个解答，该策略是否保证能够找到</li></ul></li><li>最优性<ul><li>如果存在不同的解答，该策略是否可以发现最高质量的解答</li></ul></li><li>时间复杂性<ul><li>需要多少时间可以找到解答</li></ul></li><li>空间复杂性<ul><li>执行搜索需要多少存储空间</li></ul></li></ul>        <h3 id="盲目搜索与启发式搜索"   >          <a href="#盲目搜索与启发式搜索" class="heading-link"><i class="fas fa-link"></i></a>盲目搜索与启发式搜索</h3>      <ul><li>在问题的求解过程中，<strong>不运用启发性知识</strong>，只按照一般的逻辑法则或控制性知识，在<strong>预定的控制策略</strong>下进行搜索，在搜索过程中获得的中间信息不用来改进控制策略。</li><li>为了提高效率，<strong>运用与问题有关的启发性知识</strong>，来指导搜索朝着最有希望的方向前进，<strong>加速问题求解</strong>过程并找到最优解。</li></ul>        <h3 id="四种搜索策略比较"   >          <a href="#四种搜索策略比较" class="heading-link"><i class="fas fa-link"></i></a>四种搜索策略比较</h3>      <div class="table-container"><table><thead><tr><th align="center">标准</th><th align="center">宽度优先</th><th align="center">深度优先</th><th align="center">有界深度</th><th align="center">迭代加深</th></tr></thead><tbody><tr><td align="center">时间</td><td align="center">$ b^d $</td><td align="center">$ b^m $</td><td align="center">$ b^l $</td><td align="center">$ b^d $</td></tr><tr><td align="center">空间</td><td align="center">$ b^d $</td><td align="center">$ bm $</td><td align="center">$ bl $</td><td align="center">$ bd $</td></tr><tr><td align="center">最优</td><td align="center">是</td><td align="center">否</td><td align="center">否</td><td align="center">是</td></tr><tr><td align="center">完备</td><td align="center">是</td><td align="center">否</td><td align="center">如果$ l&gt;d $，则是</td><td align="center">是</td></tr></tbody></table></div><blockquote><p>b 是分支系数，d 是解答的深度，m 是搜索树的最大深度，l 是深度限制</p></blockquote>        <h3 id="可采纳性"   >          <a href="#可采纳性" class="heading-link"><i class="fas fa-link"></i></a>可采纳性</h3>      <p>在搜索图存在从初始状态结点到目标状态结点解答路径的情况下，若一个搜索算法总能找到最短（代价最小）的解答路径，则称该算法具有可采纳性。</p>        <h3 id="启发式函数-h-n-的强弱对搜索效率的影响"   >          <a href="#启发式函数-h-n-的强弱对搜索效率的影响" class="heading-link"><i class="fas fa-link"></i></a>启发式函数 h(n)的强弱对搜索效率的影响</h3>      <ul><li>h(n)&lt;h*(n)且差距较大时，OPEN 表中结点排序的误差较大，h(n)过弱，产生较大的搜索图。</li><li>h(n)&gt;h*(n)，h(n)过强，算法失去可采纳性，不能确保找到最短解答路径。</li><li>h(n)=h*(n)是最理想的，OPEN 表中结点排序没有误差，可以确保产生最小的搜索图，搜索到最短解答路径。</li></ul>        <h4 id="如何使图搜索更有效"   >          <a href="#如何使图搜索更有效" class="heading-link"><i class="fas fa-link"></i></a>如何使图搜索更有效</h4>      <p><strong>h(n)在满足 h(n)&lt;=h*(n)的条件下，越大越好</strong></p>        <h3 id="与或图搜索"   >          <a href="#与或图搜索" class="heading-link"><i class="fas fa-link"></i></a>与或图搜索</h3>              <h4 id="能解节点"   >          <a href="#能解节点" class="heading-link"><i class="fas fa-link"></i></a>能解节点</h4>      <ul><li><p><strong>终节点是能解节点</strong></p></li><li><p>若节点 n 有——<strong>K-连接</strong>指向子节点 n1,n2,…,nk，且这些子节点都是能解节点，则 n 是能解节点。</p></li></ul><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200525165055.png" style='width:500px;'/>        <h4 id="不能解节点"   >          <a href="#不能解节点" class="heading-link"><i class="fas fa-link"></i></a>不能解节点</h4>      <ul><li><strong>非终节点的叶节点是不能解节点</strong></li><li>若节点 n 的每一个 K-连接都<strong>至少指向一个不能解节点</strong>，则 n 是不能解节点</li></ul><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200525165157.png" style='width:500px;'/>        <h3 id="搜索算法-AO-与-A-的比较"   >          <a href="#搜索算法-AO-与-A-的比较" class="heading-link"><i class="fas fa-link"></i></a>搜索算法 AO*与 A*的比较</h3>      <ul><li>搜索<strong>解图</strong>——搜索<strong>解答路径</strong></li><li>估计<strong>代价最小的局部解图</strong>加以优先扩展——<strong>OPEN 表中 f(n) 最小的节点</strong></li><li>只考虑<strong>评价函数 f(n)=h(n)**——同时计算分量</strong>g(n)和 h(n)**</li><li>应用<strong>LGS 存放待扩展局部解图</strong>，并依据 <strong>fi(n0) 值排序</strong>——应用<strong>OPEN 表和 CLOSE 表分别存放待扩展节点和已扩展节点</strong>，并依据<strong>f(n)值排序 OPEN</strong>表。</li></ul>        <h3 id="AO-算法的可采纳性条件是什么"   >          <a href="#AO-算法的可采纳性条件是什么" class="heading-link"><i class="fas fa-link"></i></a>AO*算法的可采纳性条件是什么</h3>      <ul><li>总能满足 h(n)≤h*(n)</li><li>且确保 h(n)满足单调限制条件</li></ul>        <h4 id="为什么扩展局部解图时，不必选择-h-n-值最小的结点加以扩展"   >          <a href="#为什么扩展局部解图时，不必选择-h-n-值最小的结点加以扩展" class="heading-link"><i class="fas fa-link"></i></a>为什么扩展局部解图时，不必选择 h(n)值最小的结点加以扩展</h4>      <p>鉴于与/或图搜索的是解图而非解路径，所以选择 f(n)=h(n)的值最小的结点加以扩展并不一定会加速搜索过程。<br>反而应选择导致解图代价发生较大变化的结点优先加以扩展，以使搜索的注意力快速地聚焦到实际代价较小的候选解图上。</p>        <h3 id="问题归约的实质"   >          <a href="#问题归约的实质" class="heading-link"><i class="fas fa-link"></i></a>问题归约的实质</h3>      <p>从目标(要解决的问题)出发逆向推理，建立子问题以及子问题的子问题，直至最后把初始问题归约为一个平凡的本原问题集合。</p>        <h2 id="不确定性推理"   >          <a href="#不确定性推理" class="heading-link"><i class="fas fa-link"></i></a>不确定性推理</h2>              <h3 id="不确定性推理概念"   >          <a href="#不确定性推理概念" class="heading-link"><i class="fas fa-link"></i></a>不确定性推理概念</h3>      <p>所谓不确定性推理就是从<strong>不确定性初始证据</strong>出发，通过<strong>运用不确定性的知识</strong>，最终推出具有一定程度的<strong>不确定性</strong>但却是合理或者近乎合理的结论的思维过程。</p>        <h3 id="为什么采用不确定性推理"   >          <a href="#为什么采用不确定性推理" class="heading-link"><i class="fas fa-link"></i></a>为什么采用不确定性推理</h3>      <p>在运动规律的作用下，精确性往往是暂时的、局部的、相对的，而不精确性才是必然的、动态的、永恒的。</p><p>可见，不精确性是科学认识中的重要规律，不确定性推理的研究是必要的，也是进行机器智能推理的主要工具之一。</p>        <h3 id="出现不确定性推理的原因和特征"   >          <a href="#出现不确定性推理的原因和特征" class="heading-link"><i class="fas fa-link"></i></a>出现不确定性推理的原因和特征</h3>      <ul><li>证据的不确定性</li><li>规则的不确定性</li><li>方法（推理）的不确定性</li></ul>        <h3 id="不确定性要解决的基本问题"   >          <a href="#不确定性要解决的基本问题" class="heading-link"><i class="fas fa-link"></i></a>不确定性要解决的基本问题</h3>      <ul><li><strong>表示问题：采用什么方法描述不确定性</strong><ul><li>规则不确定性，E-&gt;H, f(H, E)</li><li>证据不确定性，E, C(E)</li></ul></li><li><strong>计算问题：不确定性的传播与更新，即获得新信息的过程</strong><ul><li>不确定性的传递算法</li><li>结论不确定性合成</li><li>组合证据的不确定性算法</li></ul></li><li><strong>语义问题：指出表示和计算的含义</strong></li></ul>        <h3 id="不确定推理方法"   >          <a href="#不确定推理方法" class="heading-link"><i class="fas fa-link"></i></a>不确定推理方法</h3>      <ul><li>主观贝叶斯方法</li><li>可信度方法</li><li>证据理论</li><li>模糊推理</li></ul>        <h3 id="确定性理论"   >          <a href="#确定性理论" class="heading-link"><i class="fas fa-link"></i></a>确定性理论</h3>      <ul><li>可信度方法<ul><li><strong>CF(E)**所描述的是证据的</strong>动态强度**</li><li><strong>CF(H，E)**表示的是规则的</strong>静态强度**</li></ul></li><li>可信度性质<ul><li>CF(H，E)=1，<strong>E 支持 H（&gt;0）</strong></li><li>CF(H，E)=0，E 对 H 无影响</li><li>CF(H，E)=-1，<strong>E 不支持 H（&lt;0）</strong></li></ul></li></ul>        <h3 id="证据理论"   >          <a href="#证据理论" class="heading-link"><i class="fas fa-link"></i></a>证据理论</h3>      <ul><li>**m(A)**表示依据当前的环境对假设集 A 的信任程度</li><li><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200526155447.png" style='width:200px;'/></li><li><strong>A(Bel(A), Pl(A))</strong><ul><li>**Pl(A)-Bel(A)**表示既不信任 A，也不信任~A 的程度，即对于 A 是真是假不知道的程度</li><li>**Bel(A)**表示为真的程度</li><li>**1-Pl(A)**表示为假的程度</li></ul></li><li>Bel(A)≤f(A)≤Pl(A)</li><li>Bel(A)+Bel(<del>A)&lt;=1，Pl(A)+Pl(</del>A)&gt;=1</li><li>f(~A)=1-f(A)</li></ul>        <h2 id="机器学习"   >          <a href="#机器学习" class="heading-link"><i class="fas fa-link"></i></a>机器学习</h2>              <h3 id="机器学习概念"   >          <a href="#机器学习概念" class="heading-link"><i class="fas fa-link"></i></a>机器学习概念</h3>      <p>研究计算机模拟人类的学习活动，自动获取知识和技能的理论和方法，改善系统性能的学科。</p>        <h3 id="学习系统的基本模型"   >          <a href="#学习系统的基本模型" class="heading-link"><i class="fas fa-link"></i></a>学习系统的基本模型</h3>      <img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200526112054.png" style='width:500px;'/><ul><li><strong>环境</strong>向系统的学习部分<strong>提供某些信息</strong>，</li><li><strong>学习</strong>部分利用这些信息<strong>修改知识库</strong>，以<strong>增进系统执行部分完成任务的效能</strong>，</li><li><strong>知识库</strong>用于存放由学习环节所学到的知识</li><li><strong>执行</strong>部分根据知识库完成任务，同时<strong>把获得的信息反馈给学习部分</strong>。</li><li>在具体的应用中，<strong>环境、知识库和执行部分</strong>决定了具体的工作内容，<strong>学习部分</strong>所需要解决的问题完全由上述三部分确定。</li><li>影响学习系统设计的最重要的因素是<strong>环境向系统提供的信息</strong>。</li></ul>        <h3 id="机器学习分类"   >          <a href="#机器学习分类" class="heading-link"><i class="fas fa-link"></i></a>机器学习分类</h3>      <p>会按照训练样本提供的信息以及反馈方式的不同，将机器学习算法分为监督学习、无监督学习和强化学习</p><div class="table-container"><table><thead><tr><th align="center"></th><th align="center">监督学习</th><th align="center">无监督学习</th><th align="center">强化学习</th></tr></thead><tbody><tr><td align="center">输入</td><td align="center">有标记数据</td><td align="center">无标记数据</td><td align="center">决策过程</td></tr><tr><td align="center">反馈方式</td><td align="center">直接反馈</td><td align="center">无反馈</td><td align="center">激励</td></tr><tr><td align="center">目标</td><td align="center">分类、预测</td><td align="center">聚类、降维</td><td align="center">动作</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 课程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能A </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TensorFlow卷积神经网络</title>
      <link href="/2020/03/19/TensorFlow%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
      <url>/2020/03/19/TensorFlow%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[        <h2 id="卷积神经网络简介"   >          <a href="#卷积神经网络简介" class="heading-link"><i class="fas fa-link"></i></a>卷积神经网络简介</h2>              <h3 id="与传统多层神经网络对比"   >          <a href="#与传统多层神经网络对比" class="heading-link"><i class="fas fa-link"></i></a>与传统多层神经网络对比</h3>      <ul><li>传统意义上的多层神经网络是只有输入层、隐藏层与输出层。其中隐藏层的层数根据需要而定，没有明确的理论推导来说明到底多少层合适</li><li>卷积神经网络 CNN，在原来多层神经网络的基础上，加入了更加有效的特征学习部分，具体操作就是在原来的全连接层前面加入了卷积层与池化层。<strong>卷积神经网络出现，使得神经网络层数得以加深，“深度”学习由此而来</strong><span id="more"></span></li></ul><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入层</span><br><span class="line">隐藏层</span><br><span class="line">卷积层</span><br><span class="line">激活层</span><br><span class="line">池化层</span><br><span class="line">全连接层</span><br><span class="line">输出层</span><br></pre></td></tr></table></div></figure><blockquote><p>通常所说的深度学习，一般指的是这些 CNN 等新的结构以及一些新的方法（比如新的激活函数 Relu 等），解决了传统多层神经网路的一些难以解决的问题</p></blockquote>        <h2 id="卷积神经网络原理"   >          <a href="#卷积神经网络原理" class="heading-link"><i class="fas fa-link"></i></a>卷积神经网络原理</h2>      <p>在隐藏层加入卷积层和池化层，激活层</p>        <h3 id="结构"   >          <a href="#结构" class="heading-link"><i class="fas fa-link"></i></a>结构</h3>      <ul><li>卷积层<ul><li>通过在原始图像上平移来提取特征</li></ul></li><li>激活层<ul><li>增加非线性分割能力</li></ul></li><li>池化层<ul><li>减少学习的参数，降低网络的复杂度（最大池化和平均池化）</li></ul></li><li>全连接层<ul><li>为了能够达到分类效果</li></ul></li></ul>        <h3 id="卷积层（Convolution-Layer）"   >          <a href="#卷积层（Convolution-Layer）" class="heading-link"><i class="fas fa-link"></i></a>卷积层（Convolution Layer）</h3>      <p>卷积神经网络中每层卷积层由若干卷积单元（卷积核）组成，每个卷积单元的参数都是通过反向传播算法最佳化得到的。</p><p>卷积运算的目的是特征提取，第一层卷积层可能只能提取一些低级的特征如，边缘、线条和角等层级，更多层的网络能从低级特征中迭代提取更复杂的特征</p><p>卷积核、filter、过滤器、模型参数、卷积单元，相同</p>        <h4 id="卷积核四大要素"   >          <a href="#卷积核四大要素" class="heading-link"><i class="fas fa-link"></i></a>卷积核四大要素</h4>      <ul><li>个数<ul><li>不同的卷积核带的权重和偏置都不一样，即随机初始化的参数</li></ul></li><li>大小<ul><li><code>1*1 3*3 5*5</code></li></ul></li><li>步长<ul><li>跳几格</li></ul></li><li>零填充大小</li></ul><p>卷积核可以理解为一个观察的人，带着若干权重和一个偏置去观察，进行特征加运算</p><p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200314195926.png"></p><blockquote><p>上述要加上偏置</p></blockquote>        <h4 id="输出大小计算公式"   >          <a href="#输出大小计算公式" class="heading-link"><i class="fas fa-link"></i></a>输出大小计算公式</h4>      <ul><li>输出体积大小<code>H1*W1*D1</code><ul><li>输入图像<code>32*32*1</code></li></ul></li><li>四个超参数<ul><li>filter 数量 K</li><li>filter 大小 F</li><li>步长 S</li><li>零填充大小 P</li></ul></li><li>输出体积大小<code>H2*W2*D2</code><ul><li><code>H2=(H1-F+2P)/S+1</code></li><li><code>W2=(W1-F+2P)/S+1</code></li><li><code>D2=K</code></li></ul></li></ul>        <h4 id="计算案例"   >          <a href="#计算案例" class="heading-link"><i class="fas fa-link"></i></a>计算案例</h4>      <ul><li><p>假设已知的条件：输入图像<code>32*32*1</code>，50 个 filter，大小为<code>5*5</code>，移动步长为 1，零填充为 1，请求出输出大小</p><ul><li><code>H2=(H1-F+2P)/S+1=(32-5+2)/1+1=30</code></li><li><code>W2=(H1-F+2P)/S+1=(32-5+2)/1+1=30</code></li><li><code>D2=K=50</code></li><li><code>[30, 30, 50]</code></li></ul></li><li><p>假设已知的条件：输入图像<code>32*32*1</code>，50 个 filter，大小为<code>3*3</code>，移动步长为 1，输出大小<code>32*32</code>，求零填充</p></li></ul>        <h4 id="多通道图片观察"   >          <a href="#多通道图片观察" class="heading-link"><i class="fas fa-link"></i></a>多通道图片观察</h4>              <h3 id="卷积网络-API"   >          <a href="#卷积网络-API" class="heading-link"><i class="fas fa-link"></i></a>卷积网络 API</h3>      <ul><li><code>tf.nn.conv2d(input, filter, strides, padding, name)</code><ul><li>计算给定 4-D input 和 filter 张量的 2 维卷积</li><li>input：给定的输入张量，具有<code>[batch, height, width, channel]</code>，类型为 float32, 64<ul><li>batch：批数量</li></ul></li><li>filter：指定过滤器的权重数量<ul><li><code>[filter_height, filter_width, in_channels, out_channels]</code><ul><li>[卷积核的高度，卷积核的宽度，图像通道数，卷积核个数]</li><li>第三维<code>in_channels</code>，就是参数 input 的第四维</li></ul></li><li>变量，<code>initial_value=random_normal(shape=[F, F, 3/1, K])</code></li></ul></li><li>strides：<code>strides = [1, stride, stride, 1]</code>，步长</li><li>padding：“SAME”，“VAKID”</li></ul></li><li>零填充的两种方式<ul><li>SAME：越过边缘取样，取样的面积和输入图像的像素宽度一致<ul><li>公式：<code>ceil(H/S)</code><ul><li>H 为输入图片的高或者宽，S 为步长</li><li>无论过滤器的大小是多少，零填充的数量由 API 计算</li></ul></li></ul></li><li>VALID：不越过边缘取样，取样的面积小于输入人的图像的像素宽度，不填充</li></ul></li></ul><blockquote><p>在 Tensorflow 中，卷积 API 设置为“SAME”之后，如果步长为 1，输出高度与输入大小一样</p></blockquote>        <h3 id="激活函数"   >          <a href="#激活函数" class="heading-link"><i class="fas fa-link"></i></a>激活函数</h3>              <h4 id="Relu"   >          <a href="#Relu" class="heading-link"><i class="fas fa-link"></i></a>Relu</h4>      <p>$$<br>relu=max(0,x)<br>$$</p><p>x 小于 0，值为 0，大于 0，为其本身</p>        <h4 id="为什么采用新的激活函数"   >          <a href="#为什么采用新的激活函数" class="heading-link"><i class="fas fa-link"></i></a>为什么采用新的激活函数</h4>      <ul><li>Relu 优点<ul><li>有效解决梯度消失问题</li><li>计算速度非常快，只需要判断输入是否大于 0，SGD（批梯度下降）的求解速度远快于 sigmoid 和 tanh</li></ul></li><li>sigmoid 缺点<ul><li>计算量相对较大，在深层网络中，sigmoid 函数反向传播时，很容易就会出现梯度消失的情况</li></ul></li></ul>        <h4 id="激活函数-API"   >          <a href="#激活函数-API" class="heading-link"><i class="fas fa-link"></i></a>激活函数 API</h4>      <ul><li><code>tf.nn.relu(features, name=None)</code><ul><li>features：卷积后加上偏置的结果</li><li>return：结果</li></ul></li></ul>        <h3 id="池化层"   >          <a href="#池化层" class="heading-link"><i class="fas fa-link"></i></a>池化层</h3>      <p>Pooling 层主要的作用是特征提取，通过去掉 Feature Map 中不重要的样本，进一步减少参数的数量。方法有很多，通常采用最大池化</p><ul><li>max_polling：取池化窗口的最大值</li><li>avg_poling：取池化窗口的平均值</li></ul>        <h4 id="池化层-API"   >          <a href="#池化层-API" class="heading-link"><i class="fas fa-link"></i></a>池化层 API</h4>      <ul><li><code>tf.nn.max_pool(value, ksize, strides, padding, name)</code><ul><li>输入上执行最大池数</li><li>value：4-D Tensor 形状<code>[batch, height, width, channel]</code></li><li>channel：不是原始图片的通道数，而是多少 filter 观察</li><li>ksize：池化窗口大小，<code>[1, ksize, ksize, 1]</code></li><li>strides：步长大小，<code>[1, strides, strides, 1]</code></li><li>padding：使用填充算法类型，“SAME”，“VAKID”</li></ul></li></ul><blockquote><p>卷积向下取整，池化向上取整</p></blockquote>        <h2 id="案例：CNN-Mnist-手写数字识别"   >          <a href="#案例：CNN-Mnist-手写数字识别" class="heading-link"><i class="fas fa-link"></i></a>案例：CNN-Mnist 手写数字识别</h2>              <h3 id="网络设计"   >          <a href="#网络设计" class="heading-link"><i class="fas fa-link"></i></a>网络设计</h3>      <ul><li>第一个卷积大层<ul><li>卷积层：32 个 filter、大小 5*5、strides=1、padding=’SAME’<ul><li><code>tf.nn.conv2d(input, filter, strides, padding&#39;SAME&#39;)</code></li><li>input<ul><li><code>[None, 28, 28, 1]</code></li></ul></li><li>filter<ul><li><code>weights = tf.Variable(initial_value=tf.random_normal(shape=[5, 5, 1, 32]))</code></li><li><code>bias = tf.Variable(initial_value=tf.random_normal(shape=[32]))</code></li></ul></li><li>strides<ul><li><code>[1, 1, 1, 1]</code></li></ul></li><li>输出形状：<code>[None, 28, 28, 32]</code></li></ul></li><li>激活层：Relu<ul><li><code>tf.nn.relu(features)</code></li></ul></li><li>池化层：大小<code>2*2</code>、strides=2<ul><li><code>tf.nn.max_pool()</code></li><li>输入形状：<code>[None, 28, 28, 32]</code></li><li>输出形状：<code>[None, 14, 14, 32]</code>（公式计算）</li></ul></li></ul></li><li>第二个卷积大层<ul><li>卷积层：64 个 filter、大小 5*5、strides=1、padding=’SAME’<ul><li><code>tf.nn.conv2d(input, filter, strides, padding&#39;SAME&#39;)</code></li><li>input<ul><li><code>[None, 14, 14, 32]</code></li></ul></li><li>filter<ul><li><code>weights = tf.Variable(initial_value=tf.random_normal(shape=[5, 5, 32, 64]))</code></li><li><code>bias = tf.Variable(initial_value=tf.random_normal(shape=[64]))</code></li></ul></li><li>strides<ul><li><code>[1, 1, 1, 1]</code></li></ul></li><li>输出形状：<code>[None, 14, 14, 64]</code></li></ul></li><li>激活层：Relu<ul><li><code>tf.nn.relu(features)</code></li></ul></li><li>池化层：大小<code>2*2</code>、strides=2<ul><li>输入形状：<code>[None, 14, 14, 64]</code></li><li>输出形状：<code>[None, 7, 7, 64]</code>（公式计算）</li></ul></li></ul></li><li>全连接层<ul><li><code>tf.reshape()</code></li><li><code>[None, 7, 7, 64]-&gt;[None, 7*7*64]</code></li><li><code>[None, 7*7*64] * [7*7*64, 10] = [None, 10]</code></li><li><code>y_predict = tf.matmul(pool2, weights) + bias</code></li></ul></li></ul>        <h3 id="调参：提高准确率"   >          <a href="#调参：提高准确率" class="heading-link"><i class="fas fa-link"></i></a>调参：提高准确率</h3>      <ul><li>学习率，一般：0.01</li><li>随机初始化的权重、偏置的值<ul><li><code>tf.Variable(initial_value=tf.random_normal(shape=shape, stddev=0.01))</code></li><li><code>stddev</code></li></ul></li><li>选择优化器<ul><li><code>tf.train.AdamOptimizer(0.01).minimize(loss)</code></li></ul></li><li>调整网络<ul><li>使用<code>batch normalization</code>：批标准化</li><li><code>droupout</code>层：使一些神经元失效</li><li>防止过拟合</li></ul></li></ul>        <h3 id="改为高级-API"   >          <a href="#改为高级-API" class="heading-link"><i class="fas fa-link"></i></a>改为高级 API</h3>              <h3 id="主要代码"   >          <a href="#主要代码" class="heading-link"><i class="fas fa-link"></i></a>主要代码</h3>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_model</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    实现构建卷积神经网络</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    y_predict = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 第一个卷积大层</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;conv1&#x27;</span>):</span><br><span class="line">        <span class="comment"># 卷积层</span></span><br><span class="line">        input_x = tf.reshape(x, shape=[-<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        conv1_weights = create_variable([<span class="number">5</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">32</span>])</span><br><span class="line">        conv1_bias = create_variable([<span class="number">32</span>])</span><br><span class="line">        conv1_x = tf.nn.conv2d(input_x, <span class="built_in">filter</span>=conv1_weights, strides=[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], padding=<span class="string">&#x27;SAME&#x27;</span>) + conv1_bias</span><br><span class="line">        <span class="comment"># 激活层</span></span><br><span class="line">        relu1_x = tf.nn.relu(conv1_x)</span><br><span class="line">        <span class="comment"># 池化层</span></span><br><span class="line">        pool1_x = tf.nn.max_pool(relu1_x, ksize=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>], strides=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>], padding=<span class="string">&quot;SAME&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第二个卷积大层</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;conv2&#x27;</span>):</span><br><span class="line">        <span class="comment"># 卷积层</span></span><br><span class="line"></span><br><span class="line">        conv2_weights = create_variable([<span class="number">5</span>, <span class="number">5</span>, <span class="number">32</span>, <span class="number">64</span>])</span><br><span class="line">        conv2_bias = create_variable([<span class="number">64</span>])</span><br><span class="line">        conv2_x = tf.nn.conv2d(pool1_x, <span class="built_in">filter</span>=conv2_weights, strides=[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], padding=<span class="string">&#x27;SAME&#x27;</span>) + conv2_bias</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 激活层</span></span><br><span class="line">        relu2_x = tf.nn.relu(conv2_x)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 池化层</span></span><br><span class="line">        pool2_x = tf.nn.max_pool(relu2_x, ksize=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>], strides=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>], padding=<span class="string">&quot;SAME&quot;</span>)</span><br><span class="line">    <span class="comment"># 全连接层</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">&quot;full_connection&quot;</span>):</span><br><span class="line">        <span class="comment"># [None, 7, 7, 64]-&gt;[None, 7 * 7 * 64]</span></span><br><span class="line">        <span class="comment"># [None, 7 * 7 * 64] * [7 * 7 * 64, 10] = [None, 10]</span></span><br><span class="line">        x_fc = tf.reshape(pool2_x, shape=[-<span class="number">1</span>, <span class="number">7</span> * <span class="number">7</span> * <span class="number">64</span>])</span><br><span class="line">        weights_fc = create_variable(shape=[<span class="number">7</span> * <span class="number">7</span> * <span class="number">64</span>, <span class="number">10</span>])</span><br><span class="line">        bias_fc = create_variable(shape=[<span class="number">10</span>])</span><br><span class="line">        y_predict = tf.matmul(x_fc, weights_fc) + bias_fc</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> y_predict</span><br></pre></td></tr></table></div></figure>        <h2 id="实战：验证码识别"   >          <a href="#实战：验证码识别" class="heading-link"><i class="fas fa-link"></i></a>实战：验证码识别</h2>              <h3 id="数据集"   >          <a href="#数据集" class="heading-link"><i class="fas fa-link"></i></a>数据集</h3>      <p>一个图片对应 4 个目标值</p><p><code>NZPP -&gt; [13, 25, 15, 15] -&gt; [[one-hot], [], [], []]</code></p>        <h3 id="损失衡量"   >          <a href="#损失衡量" class="heading-link"><i class="fas fa-link"></i></a>损失衡量</h3>      <p>softmax 交叉熵，只适用于类别相互排斥的，一个样本对应一个目标值</p><p><code>[4, 26] -&gt; [4*26]</code></p><p>使用 sigmoid 交叉熵</p><ul><li><p>sigmoid 交叉熵损失函数</p></li><li><p><code>tf.nn.sigmoid_cross_entropy_with_logits(labels=None, logits=None)</code></p><ul><li>labels：真实值，为 one_hot 编码形式，和 logits 一样</li><li>logits：logits 值，输出层的加权计算结果</li></ul></li><li><p>对真实值进行 one_hot 编码</p></li><li><p><code>tf.one_hot(indices, depth, axis=None, name=None)</code></p><ul><li>indices：需要编码的张量</li><li>depth：one_hot 编码的深度，这里 26 个字母，为 26</li><li>axis：填充的维度，默认是-1</li></ul></li></ul>        <h3 id="流程分析"   >          <a href="#流程分析" class="heading-link"><i class="fas fa-link"></i></a>流程分析</h3>      <ol><li>读取图片数据<ol><li>filename -&gt; 标签值</li></ol></li><li>解析 csv 文件，将标签值转为<code>[字母序号, 字母序号, 字母序号, 字母序号]</code></li><li>将 filename 与标签值联系起来</li><li>构建卷积神经网络<ol><li>利用手写识别网络</li><li>产生 y_predict</li></ol></li><li>构造损失函数</li><li>优化损失</li><li>计算准确率</li><li>开启会话、开启线程</li></ol>        <h3 id="代码"   >          <a href="#代码" class="heading-link"><i class="fas fa-link"></i></a>代码</h3>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_pic</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    读取图片数据</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 1、文件队列</span></span><br><span class="line">    file_names = glob.glob(<span class="string">&#x27;./GenPics/*.jpg&#x27;</span>)</span><br><span class="line">    file_queue = tf.train.string_input_producer(file_names)</span><br><span class="line">    <span class="comment"># 2、读取与解码</span></span><br><span class="line">    reader = tf.WholeFileReader()</span><br><span class="line">    file_name, image = reader.read(file_queue)</span><br><span class="line">    decoded = tf.image.decode_jpeg(image)</span><br><span class="line">    <span class="comment"># 更新形状，将图片形状确定下来</span></span><br><span class="line">    decoded.set_shape([<span class="number">20</span>, <span class="number">80</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改图片类型</span></span><br><span class="line">    image_cast = tf.cast(decoded, tf.float32)</span><br><span class="line">    <span class="comment"># 3、批处理</span></span><br><span class="line">    filename_batch, image_batch = tf.train.batch([file_name, image_cast], batch_size=<span class="number">100</span>, num_threads=<span class="number">1</span>, capacity=<span class="number">200</span>)</span><br><span class="line">    <span class="keyword">return</span> filename_batch, image_batch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_csv</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    解析csv文件，建立文件名与标签值表格</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    csv_data = pd.read_csv(<span class="string">&quot;./GenPics/labels.csv&quot;</span>, names=[<span class="string">&quot;file_num&quot;</span>, <span class="string">&quot;chars&quot;</span>], index_col=<span class="string">&quot;file_num&quot;</span>)</span><br><span class="line"></span><br><span class="line">    labels = []</span><br><span class="line">    <span class="keyword">for</span> label <span class="keyword">in</span> csv_data[<span class="string">&quot;chars&quot;</span>]:</span><br><span class="line">        tmp = []</span><br><span class="line">        <span class="keyword">for</span> letter <span class="keyword">in</span> label:</span><br><span class="line">            tmp.append(<span class="built_in">ord</span>(letter) - <span class="built_in">ord</span>(<span class="string">&quot;A&quot;</span>))</span><br><span class="line">        labels.append(tmp)</span><br><span class="line"></span><br><span class="line">    csv_data[<span class="string">&quot;labels&quot;</span>] = labels</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> csv_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filename2label</span>(<span class="params">filenames, csv_data</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    将样本特征值与目标值一一对应</span></span><br><span class="line"><span class="string">    :param filenames:</span></span><br><span class="line"><span class="string">    :param csv_data:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    labels = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将b&#x27;文件名中的数字提取出来并索引相应的标签值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> file_name <span class="keyword">in</span> filenames:</span><br><span class="line">        digit_str = <span class="string">&quot;&quot;</span>.join(<span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="built_in">str</span>.isdigit, <span class="built_in">str</span>(file_name))))</span><br><span class="line">        label = csv_data.loc[<span class="built_in">int</span>(digit_str), <span class="string">&quot;labels&quot;</span>]</span><br><span class="line">        labels.append(label)</span><br><span class="line">    <span class="keyword">return</span> np.array(labels)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_variable</span>(<span class="params">shape</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    创建变量</span></span><br><span class="line"><span class="string">    :param shape:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> tf.Variable(initial_value=tf.random_normal(shape=shape, stddev=<span class="number">0.01</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_model</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    实现构建卷积神经网络</span></span><br><span class="line"><span class="string">    :param x:[None, 20, 80, 3]</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 第一个卷积大层</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;conv1&#x27;</span>):</span><br><span class="line">        <span class="comment"># 卷积层</span></span><br><span class="line">        conv1_weights = create_variable([<span class="number">5</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">32</span>])</span><br><span class="line">        conv1_bias = create_variable([<span class="number">32</span>])</span><br><span class="line">        conv1_x = tf.nn.conv2d(x, <span class="built_in">filter</span>=conv1_weights, strides=[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], padding=<span class="string">&#x27;SAME&#x27;</span>) + conv1_bias</span><br><span class="line">        <span class="comment"># 激活层</span></span><br><span class="line">        relu1_x = tf.nn.relu(conv1_x)</span><br><span class="line">        <span class="comment"># 池化层</span></span><br><span class="line">        pool1_x = tf.nn.max_pool(relu1_x, ksize=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>], strides=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>], padding=<span class="string">&quot;SAME&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第二个卷积大层</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;conv2&#x27;</span>):</span><br><span class="line">        <span class="comment"># [None, 20, 80, 3] --&gt; [None, 10, 40, 32]</span></span><br><span class="line">        <span class="comment"># 卷积层</span></span><br><span class="line">        conv2_weights = create_variable([<span class="number">5</span>, <span class="number">5</span>, <span class="number">32</span>, <span class="number">64</span>])</span><br><span class="line">        conv2_bias = create_variable([<span class="number">64</span>])</span><br><span class="line">        conv2_x = tf.nn.conv2d(pool1_x, <span class="built_in">filter</span>=conv2_weights, strides=[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], padding=<span class="string">&#x27;SAME&#x27;</span>) + conv2_bias</span><br><span class="line">        <span class="comment"># 激活层</span></span><br><span class="line">        relu2_x = tf.nn.relu(conv2_x)</span><br><span class="line">        <span class="comment"># 池化层</span></span><br><span class="line">        pool2_x = tf.nn.max_pool(relu2_x, ksize=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>], strides=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>], padding=<span class="string">&quot;SAME&quot;</span>)</span><br><span class="line">    <span class="comment"># 全连接层</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">&quot;full_connection&quot;</span>):</span><br><span class="line">        <span class="comment"># [None, 10, 40, 32] -&gt; [None, 5, 20, 64]</span></span><br><span class="line">        <span class="comment"># [None, 5, 20, 64] -&gt; [None, 5 * 20 * 64]</span></span><br><span class="line">        <span class="comment"># [None, 5 * 20 * 64] * [5 * 20 * 64, 4 * 26] = [None, 4 * 26]</span></span><br><span class="line">        x_fc = tf.reshape(pool2_x, shape=[-<span class="number">1</span>, <span class="number">5</span> * <span class="number">20</span> * <span class="number">64</span>])</span><br><span class="line">        weights_fc = create_variable(shape=[<span class="number">5</span> * <span class="number">20</span> * <span class="number">64</span>, <span class="number">4</span> * <span class="number">26</span>])</span><br><span class="line">        bias_fc = create_variable(shape=[<span class="number">104</span>])</span><br><span class="line">        y_predict = tf.matmul(x_fc, weights_fc) + bias_fc</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> y_predict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    filename, image = read_pic()</span><br><span class="line">    csv_data = parse_csv()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1、准备数据</span></span><br><span class="line">    x = tf.placeholder(dtype=tf.float32, shape=[<span class="literal">None</span>, <span class="number">20</span>, <span class="number">80</span>, <span class="number">3</span>])</span><br><span class="line">    y_true = tf.placeholder(tf.float32, shape=[<span class="literal">None</span>, <span class="number">4</span> * <span class="number">26</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2、构建模型</span></span><br><span class="line">    y_predict = create_model(x)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3、构造损失函数</span></span><br><span class="line">    loss_list = tf.nn.sigmoid_cross_entropy_with_logits(labels=y_true, logits=y_predict)</span><br><span class="line">    loss = tf.reduce_mean(loss_list)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4、优化损失</span></span><br><span class="line">    optimizer = tf.train.AdamOptimizer(learning_rate=<span class="number">0.001</span>).minimize(loss)</span><br><span class="line">    <span class="comment"># optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.001).minimize(loss)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5、计算准确率</span></span><br><span class="line">    y_predict_argmax = tf.argmax(tf.reshape(y_predict, shape=[-<span class="number">1</span>, <span class="number">4</span>, <span class="number">26</span>]), axis=<span class="number">2</span>)</span><br><span class="line">    y_true_argmax = tf.argmax(tf.reshape(y_true, shape=[-<span class="number">1</span>, <span class="number">4</span>, <span class="number">26</span>]), axis=<span class="number">2</span>)</span><br><span class="line">    equal = tf.equal(y_predict_argmax, y_true_argmax)</span><br><span class="line">    equal_list = tf.reduce_all(equal, axis=<span class="number">1</span>)</span><br><span class="line">    accuracy = tf.reduce_mean(tf.cast(equal_list, tf.float32))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化变量</span></span><br><span class="line">    init = tf.global_variables_initializer()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        sess.run(init)</span><br><span class="line">        coord = tf.train.Coordinator()</span><br><span class="line">        threads = tf.train.start_queue_runners(sess=sess, coord=coord)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">            filename_value, image_value = sess.run([filename, image])</span><br><span class="line">            labels = filename2label(filename_value, csv_data)</span><br><span class="line">            <span class="comment"># 标签值转换为one-hot</span></span><br><span class="line">            labels_value = tf.reshape(tf.one_hot(labels, depth=<span class="number">26</span>), shape=[-<span class="number">1</span>, <span class="number">4</span> * <span class="number">26</span>]).<span class="built_in">eval</span>()</span><br><span class="line">            _, error, accuracy_value = sess.run([optimizer, loss, accuracy],</span><br><span class="line">                                                feed_dict=&#123;x: image_value, y_true: labels_value&#125;)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;第%d次训练后损失为%f，准确率为%f&quot;</span> % (i + <span class="number">1</span>, error, accuracy_value))</span><br><span class="line"></span><br><span class="line">        coord.request_stop()</span><br><span class="line">        coord.join(threads)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TensorFlow </tag>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TensorFlow数据读取、神经网络</title>
      <link href="/2020/03/14/TensorFlow%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96%E3%80%81%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
      <url>/2020/03/14/TensorFlow%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96%E3%80%81%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[        <h2 id="文件读取流程"   >          <a href="#文件读取流程" class="heading-link"><i class="fas fa-link"></i></a>文件读取流程</h2>      <ul><li>QueueRunner<ul><li>基于队列的输入管道从 TensorFLow 图形开头文件中读取数据</li></ul></li><li>Feeding<ul><li>运行每一步时，Python 代码提供数据</li></ul></li><li>预加载数据<ul><li>TensorFlow 图中的张量包含的数据（对于小数据集）</li></ul></li></ul><span id="more"></span>        <h3 id="文件读取流程-1"   >          <a href="#文件读取流程-1" class="heading-link"><i class="fas fa-link"></i></a>文件读取流程</h3>      <ul><li>第一阶段：构造文件名队列</li><li>第二阶段：读取与解码</li><li>第三阶段：批处理</li></ul>        <h4 id="构造文件名队列"   >          <a href="#构造文件名队列" class="heading-link"><i class="fas fa-link"></i></a>构造文件名队列</h4>      <ul><li><code>tf.train.string_input_producer(string_tensor, shuffle=True)</code><ul><li>string_tensor：含有文件名+路径的一阶张量</li><li>num_epochs：过几遍数据，默认无限遍数据</li><li>return：文件队列<code>file_queue</code></li></ul></li></ul>        <h4 id="读取和解码"   >          <a href="#读取和解码" class="heading-link"><i class="fas fa-link"></i></a>读取和解码</h4>      <p>从队列当中读取文件内容，并进行解码操作</p>        <h5 id="读取文件内容"   >          <a href="#读取文件内容" class="heading-link"><i class="fas fa-link"></i></a>读取文件内容</h5>      <p>默认每次读取一个样本</p><blockquote><p>文本文件默认一次读取一行，图片默认一次读取一张图片，二进制文件一次读取指定字节数（最好一个样本的字节数），TFRecords 默认一次读取一个 example</p></blockquote><ul><li><code>tf.TextLineReader</code><ul><li>阅读文本文件都好分隔符值（CSV）格式，默认按行读取</li><li>return：读取器实例</li></ul></li><li><code>tf.WholeFileReader()</code><ul><li>用于读取图片文件</li><li>return：读取器实例</li></ul></li><li><code>tf.FixedLengthRecordReader(record_bytes)</code><ul><li>二进制文件</li><li>要读取每个记录是固定数量字节的二进制文件</li><li>record_bytes：整数，指定每次读取（一个样本）的字节数</li><li>return：读取器实例</li></ul></li><li><code>tf.TFRecordReader</code><ul><li>读取 TFRecords 文件</li><li>return：读取器实例</li></ul></li></ul><blockquote><p>它们有共同的读取方法：<code>read(file_queue)</code>，并且都会返回一个 Tensor 元组</p><p><code>(key文件名字, value默认的内容（一个文本）)</code></p><p>由于默认只会读取一个样本，所以如果想要进行批处理，需要使用<code>tf.train.batch</code>或<code>tf.train.shuffle_batch</code>进行批处理操作，便于之后指定每批次多个样本的训练</p></blockquote>        <h5 id="内容解码"   >          <a href="#内容解码" class="heading-link"><i class="fas fa-link"></i></a>内容解码</h5>      <ul><li>文本<ul><li><code>tf.decode_csv()</code></li></ul></li><li>图片<ul><li><code>tf.image.decode_jpeg(contents)</code><ul><li>将 JPEG 编码的图像解码为 uint8 张量</li><li>return：uint8 张量，3-D 形状[height, width, channels]</li></ul></li><li><code>tf.image.decode_png(contents)</code></li></ul></li><li>二进制<ul><li><code>tf.decode_raw(value, tf.uint8)</code><ul><li>与<code>tf.FixedLengthRecordReader</code>搭配使用，二进制读取为 uint8</li></ul></li></ul></li></ul><blockquote><p>解码阶段，默认所有的内容都解码成<code>tf.uint8</code>类型，如果需要转换成指定类型，可以使用<code>tf.cast()</code>进行转换</p></blockquote>        <h4 id="批处理"   >          <a href="#批处理" class="heading-link"><i class="fas fa-link"></i></a>批处理</h4>      <p>解码之后，可以直接获取默认的一个样本内容，但如果想要获取多个样本，需要加入到新的队列进行批处理</p><ul><li><code>tf.train.batch(tensors, batch_size, num_threads=1, capacity=32, name=None)</code><ul><li>读取指定大小（个数）的张量</li><li>tensors：可以是包含张量的列表，批处理的内容放到列表当中</li><li>batch_size：从队列中读取的批处理大小</li><li>num_threads：进入队列的线程数</li><li>capacity：整数，队列中元素的最大数量</li><li>return：tensors</li></ul></li><li><code>tf.train.shuffle_batch</code></li></ul>        <h3 id="线程操作"   >          <a href="#线程操作" class="heading-link"><i class="fas fa-link"></i></a>线程操作</h3>      <p>以上的队列都是<code>tf.train.QueueRunner</code>对象</p><p>每个 QueueRunner 都负责一个阶段，会话中，<code>tf.train.start_queue_runners</code>函数会要求图中的每个 QueueRunner 启动它的运行队列操作的线程，（这些操作需要在会话中开启）</p><ul><li><code>tf.train.start_queue_runners(sess=None, coord=None)</code><ul><li>收集图中所有的队列线程，默认同时启动线程</li><li>sess：所在的会话</li><li>coord：线程协调器</li><li>return：所有线程</li></ul></li><li><code>tf.train.Coordinator()</code><ul><li>线程调度员，对线程进行管理和协调</li><li><code>request_stop()</code>：请求停止</li><li><code>should_stop()</code>：询问是否结束</li><li><code>join(threads=None, stop_grace_period_secs=120)</code>：回收线程</li><li>return：线程协调员实例</li></ul></li></ul>        <h2 id="图片数据"   >          <a href="#图片数据" class="heading-link"><i class="fas fa-link"></i></a>图片数据</h2>              <h3 id="图片基本知识"   >          <a href="#图片基本知识" class="heading-link"><i class="fas fa-link"></i></a>图片基本知识</h3>      <ul><li>特征抽取<ul><li>文本——数值（二维数组<code>shape(n_samples, m_features)</code>）</li><li>字典——数值（二维数组<code>shape(n_samples, m_features)</code>）</li><li>图片——数值（二维数组<code>shape(n_samples, m_features)</code>）</li></ul></li></ul>        <h4 id="图片三要素"   >          <a href="#图片三要素" class="heading-link"><i class="fas fa-link"></i></a>图片三要素</h4>      <ul><li>图片长度、图片宽度、图片通道数</li><li>灰度图<ul><li>[长, 宽, 1]</li><li>每一个像素点一个[0, 255]数</li></ul></li><li>彩色图<ul><li>[长, 宽, 3]</li><li>每一个像素点三个[0, 255]数组成</li></ul></li></ul>        <h4 id="张量形状"   >          <a href="#张量形状" class="heading-link"><i class="fas fa-link"></i></a>张量形状</h4>      <p><code>Tensor(指令名称, shape, dtype)</code></p><ul><li>一张图片<ul><li><code>shape = (height, width, channels)</code></li></ul></li><li>多张图片<ul><li><code>shape = (batch, height, width, channels)</code></li><li>batch：表示一个批次的张量数量</li></ul></li></ul>        <h3 id="图片特征值处理"   >          <a href="#图片特征值处理" class="heading-link"><i class="fas fa-link"></i></a>图片特征值处理</h3>      <ul><li>样本数据量大</li><li>样本大小形状不统一</li><li>解决：把图片缩小到统一大小</li><li><code>tf.image.resize_images(imags, size)</code><ul><li>缩小放大图片</li><li>images：4-D 形状<code>[batch, height, width, channels]</code>或 3-D 形状的张量<code>[height, width, channels]</code>的图片数据</li><li>size：1-D int32 张量：new_height, new_width, 图像的新尺寸</li><li>返回 4-D 格式或者 3-D 格式图片</li></ul></li></ul>        <h3 id="数据格式"   >          <a href="#数据格式" class="heading-link"><i class="fas fa-link"></i></a>数据格式</h3>      <ul><li>存储：uint8（节约空间）</li><li>矩阵计算：float32（提高精度）</li></ul>        <h3 id="案例：狗图片读取"   >          <a href="#案例：狗图片读取" class="heading-link"><i class="fas fa-link"></i></a>案例：狗图片读取</h3>              <h4 id="构造文件名队列-1"   >          <a href="#构造文件名队列-1" class="heading-link"><i class="fas fa-link"></i></a>构造文件名队列</h4>              <h4 id="读取与解码"   >          <a href="#读取与解码" class="heading-link"><i class="fas fa-link"></i></a>读取与解码</h4>      <p>使样本的形状和类型统一</p>        <h4 id="批处理-1"   >          <a href="#批处理-1" class="heading-link"><i class="fas fa-link"></i></a>批处理</h4>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pic_read</span>(<span class="params">file_list</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    狗图片读取</span></span><br><span class="line"><span class="string">    :param file_list:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 1、构造文件名队列</span></span><br><span class="line">    file_queue = tf.train.string_input_producer(file_list)</span><br><span class="line">    <span class="comment"># 2、读取与解码</span></span><br><span class="line">    reader = tf.WholeFileReader()</span><br><span class="line">    key, value = reader.read(file_queue)</span><br><span class="line">    <span class="comment"># print(key, value)</span></span><br><span class="line">    image = tf.image.decode_jpeg(value)</span><br><span class="line">    <span class="comment"># print(image)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3、批处理</span></span><br><span class="line">    <span class="comment"># 图片统一</span></span><br><span class="line">    resize_image = tf.image.resize_images(image, [<span class="number">200</span>, <span class="number">200</span>])</span><br><span class="line">    <span class="built_in">print</span>(resize_image)</span><br><span class="line">    <span class="comment"># Tensor(&quot;resize/Squeeze:0&quot;, shape=(200, 200, ?), dtype=float32)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 通道数固定，shape形状确定</span></span><br><span class="line">    <span class="comment"># 也可用动态修改</span></span><br><span class="line">    resize_image.set_shape(shape=[<span class="number">200</span>, <span class="number">200</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">    image_batch = tf.train.batch([resize_image], batch_size=<span class="number">100</span>, num_threads=<span class="number">2</span>, capacity=<span class="number">100</span>)</span><br><span class="line">    <span class="built_in">print</span>(image_batch)</span><br><span class="line">    <span class="comment"># Tensor(&quot;batch:0&quot;, shape=(100, 200, 200, 3), dtype=float32)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        <span class="comment"># 开启线程</span></span><br><span class="line">        <span class="comment"># 创建线程协调员</span></span><br><span class="line">        coord = tf.train.Coordinator()</span><br><span class="line">        threads = tf.train.start_queue_runners(sess=sess, coord=coord)</span><br><span class="line">        key_new, value_new, image_new = sess.run([key, value, image])</span><br><span class="line">        <span class="built_in">print</span>(key_new)</span><br><span class="line">        <span class="built_in">print</span>(value_new)</span><br><span class="line">        <span class="built_in">print</span>(image_new)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 回收线程</span></span><br><span class="line">        coord.request_stop()</span><br><span class="line">        coord.join(threads=threads)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 构造路径+文件名列表</span></span><br><span class="line">    filename = os.listdir(<span class="string">r&#x27;.\dog&#x27;</span>)</span><br><span class="line">    <span class="comment"># print(filename)</span></span><br><span class="line">    file_list = [os.path.join(<span class="string">r&#x27;.\dog&#x27;</span>, file) <span class="keyword">for</span> file <span class="keyword">in</span> filename]</span><br><span class="line">    <span class="comment"># print(file_list)</span></span><br><span class="line">    pic_read(file_list)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="二进制文件"   >          <a href="#二进制文件" class="heading-link"><i class="fas fa-link"></i></a>二进制文件</h2>              <h3 id="CIFAR10-二进制数据集介绍"   >          <a href="#CIFAR10-二进制数据集介绍" class="heading-link"><i class="fas fa-link"></i></a>CIFAR10 二进制数据集介绍</h3>      <p>每 3073 个字节是一个样本</p><ul><li>1 个目标值+3072 像素<ul><li>1024 字节，红色通道</li><li>1024 字节，绿色通道</li><li>1024，蓝色通道</li></ul></li></ul>        <h3 id="流程"   >          <a href="#流程" class="heading-link"><i class="fas fa-link"></i></a>流程</h3>              <h4 id="构造文件名队列-2"   >          <a href="#构造文件名队列-2" class="heading-link"><i class="fas fa-link"></i></a>构造文件名队列</h4>              <h4 id="读取与解码-1"   >          <a href="#读取与解码-1" class="heading-link"><i class="fas fa-link"></i></a>读取与解码</h4>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reader = tf.FixedLengthRecordReader(<span class="number">3073</span>)</span><br><span class="line">key, value = reader.read(file_queue)</span><br><span class="line">decode = tf.decode_raw(value, tf.uint8)</span><br></pre></td></tr></table></div></figure><p>对 tensor 对象切片</p><p>原图片矩阵<br>[[32 * 32 的二维数组],<br>[32 * 32 的二维数组],<br>[32 * 32 的二维数组]]<br>–&gt; [3, 32, 32]</p><p>需转换为 shape：[height, width, channel] -&gt; [32, 32, 3]</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tf.transpose(data, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>])</span><br><span class="line"><span class="comment"># [0, 1, 2] --&gt; [1, 2, 0]，三维数组位置转换，</span></span><br><span class="line"><span class="comment"># 原来1号位置放到0号，2号位置放到1号，0号放到3号</span></span><br></pre></td></tr></table></div></figure>        <h4 id="批处理-2"   >          <a href="#批处理-2" class="heading-link"><i class="fas fa-link"></i></a>批处理</h4>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinRead</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 初始化</span></span><br><span class="line">        self.height = <span class="number">32</span></span><br><span class="line">        self.width = <span class="number">32</span></span><br><span class="line">        self.channels = <span class="number">3</span></span><br><span class="line">        <span class="comment"># 字节数</span></span><br><span class="line">        self.image_bytes = self.height * self.width * self.channels</span><br><span class="line">        self.label_bytes = <span class="number">1</span></span><br><span class="line">        self.all_bytes = self.image_bytes + self.label_bytes</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bin_read</span>(<span class="params">self, file_l</span>):</span></span><br><span class="line">        <span class="comment"># 1、构造文件名队列</span></span><br><span class="line">        file_queue = tf.train.string_input_producer(file_l)</span><br><span class="line">        <span class="comment"># 2、读取与解码</span></span><br><span class="line">        reader = tf.FixedLengthRecordReader(self.all_bytes)</span><br><span class="line">        key, value = reader.read(file_queue)</span><br><span class="line">        <span class="comment"># 解码</span></span><br><span class="line">        value_decode = tf.decode_raw(value, tf.uint8)</span><br><span class="line">        <span class="comment"># 将目标值与特征值切片</span></span><br><span class="line">        label = tf.<span class="built_in">slice</span>(value_decode, [<span class="number">0</span>], [self.label_bytes])</span><br><span class="line">        image = tf.<span class="built_in">slice</span>(value_decode, [<span class="number">1</span>], [self.image_bytes])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 调整图片形状，动态调整</span></span><br><span class="line">        image_reshape = tf.reshape(image, shape=[self.channels, self.height, self.width])</span><br><span class="line">        <span class="comment"># 图片转置</span></span><br><span class="line">        image_transpose = tf.transpose(image_reshape, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>])</span><br><span class="line">        <span class="comment"># 调整图片类型</span></span><br><span class="line">        <span class="comment"># image_cast = tf.cast(image_transpose, tf.float32)</span></span><br><span class="line">        <span class="comment"># 3、批处理</span></span><br><span class="line">        <span class="comment"># image_batch = tf.train.batch([image_cast], batch_size=100, num_threads=2, capacity=100)</span></span><br><span class="line">        image_batch = tf.train.batch([image_transpose], batch_size=<span class="number">100</span>, num_threads=<span class="number">2</span>, capacity=<span class="number">100</span>)</span><br><span class="line">        <span class="built_in">print</span>(image_batch)</span><br><span class="line">        <span class="comment"># Tensor(&quot;batch:0&quot;, shape=(100, 32, 32, 3), dtype=float32)</span></span><br><span class="line">        <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">            <span class="comment"># 开启线程，创建线程协调员</span></span><br><span class="line">            coord = tf.train.Coordinator()</span><br><span class="line">            threads = tf.train.start_queue_runners(sess=sess, coord=coord)</span><br><span class="line"></span><br><span class="line">            key_new, value_new, value_decode_new, image_batch_new = sess.run([key, value, value_decode, image_batch])</span><br><span class="line">            <span class="built_in">print</span>(key_new)</span><br><span class="line">            <span class="built_in">print</span>(value_new)</span><br><span class="line">            <span class="built_in">print</span>(value_decode_new)</span><br><span class="line">            <span class="comment"># [  1  35  27 ... 169 168 168]</span></span><br><span class="line">            <span class="built_in">print</span>(image_batch_new)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 回收线程</span></span><br><span class="line">            coord.request_stop()</span><br><span class="line">            coord.join(threads=threads)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 构造路径+文件名列表</span></span><br><span class="line">    filename = os.listdir(<span class="string">r&#x27;.\cifar-10-batches-bin&#x27;</span>)</span><br><span class="line">    <span class="comment"># print(filename)</span></span><br><span class="line">    file_list = [os.path.join(<span class="string">r&#x27;.\cifar-10-batches-bin&#x27;</span>, file) <span class="keyword">for</span> file <span class="keyword">in</span> filename <span class="keyword">if</span> file[-<span class="number">3</span>:] == <span class="string">&#x27;bin&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(file_list)</span><br><span class="line">    BinRead().bin_read(file_list)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="TFRecords-文件"   >          <a href="#TFRecords-文件" class="heading-link"><i class="fas fa-link"></i></a>TFRecords 文件</h2>      <p>它其实是一种二进制文件，能够更好的利用内存，更方便复制和移动，并且不需要单独的标签文件</p><p>使用步骤：</p><ol><li>获取数据</li><li>将数据填入到 Example 协议内存块（protocol buffer）</li><li>将协议内存块序列化为字符串，并且通过<code>tf.python_io.TFRecordWriter</code>写入到 TFRecords 文件</li></ol><p>文件格式：*.tfrecords</p>        <h3 id="结构分析"   >          <a href="#结构分析" class="heading-link"><i class="fas fa-link"></i></a>结构分析</h3>      <figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">features &#123;</span><br><span class="line">    feature &#123;</span><br><span class="line">        key: &quot;age&quot;</span><br><span class="line">        value &#123; float_list &#123;</span><br><span class="line">            value: 29.0</span><br><span class="line">       &#125;&#125;</span><br><span class="line">     &#125;</span><br><span class="line">    feature &#123;</span><br><span class="line">        key: &quot;movie&quot;</span><br><span class="line">        value &#123; bytes_list &#123;</span><br><span class="line">            value: &quot;The Shawshank Redemption&quot;</span><br><span class="line">            value: &quot;Fight Club&quot;</span><br><span class="line">       &#125;&#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></div></figure><ul><li><code>tf.train.Example</code>协议内存块（协议内存块包含了字段<code>Features</code>）</li><li><code>Features</code>包含了一个<code>Feature</code>字段</li><li><code>Feature</code>包含了要写入的数据、并指明数据类型<ul><li>这是一个样本的结构，批数据需要循环存入这样的结构</li></ul></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">example = tf.train.Example(features=tf.train.Features(feature=&#123;</span><br><span class="line">    <span class="string">&#x27;image&#x27;</span>: tf.train.Feature(bytes_list=tf.train.BytesList(value=[image])),</span><br><span class="line">    <span class="string">&#x27;label&#x27;</span>: tf.train.Feature(int64_list=tf.train.Int64List(value=[label])),</span><br><span class="line">&#125;))</span><br><span class="line">example.SerializeToString()</span><br></pre></td></tr></table></div></figure><ul><li><code>tf.train.Example(features=None)</code><ul><li>写入 tfrecords 文件</li><li>features：<code>tf.train.Features</code>类型的特征实例</li><li>return：example 格式协议块</li></ul></li><li><code>tf.train.Features(feature=None)</code><ul><li>构建每个样本的信息键值对</li><li>feature：<strong>字典数据</strong>，key 为要保存的名字</li><li>value：<code>tf.train.Feature</code>实例</li><li>return：Features 类型</li></ul></li><li><code>tf.train.Feature(options)</code><ul><li>options<ul><li><code>bytes_list=tf.train.BytesList(value=[Bytes])</code></li><li><code>int64_list=tf.train.Int64List(value=[Value])</code></li><li>等</li></ul></li><li>支持存入的类型如下<ul><li><code>tf.train.BytesList(value=[Bytes])</code></li><li><code>tf.train.Int64List(value=[Value])</code></li><li><code>tf.train.FloatList(value=[Value])</code></li></ul></li></ul></li></ul><blockquote><p>这种结构很好的实现了数据和标签（训练的类别标签）或者其他属性数据存储在同一文件中</p></blockquote>        <h3 id="案例：CIFAR10-数据存入-TFRecords"   >          <a href="#案例：CIFAR10-数据存入-TFRecords" class="heading-link"><i class="fas fa-link"></i></a>案例：CIFAR10 数据存入 TFRecords</h3>              <h4 id="分析"   >          <a href="#分析" class="heading-link"><i class="fas fa-link"></i></a>分析</h4>      <ul><li>构造存储实例，<code>tf.python_io.TFRecordWriter(path)</code><ul><li>写入 tfrecord 文件</li><li>path：文件路径</li><li>return：写方法<ul><li><code>.write(record)</code>：写入一个 example</li><li><code>close()</code></li></ul></li></ul></li><li>循环将数据填入到<code>Example</code>协议内存块</li></ul>        <h4 id="代码"   >          <a href="#代码" class="heading-link"><i class="fas fa-link"></i></a>代码</h4>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_to_tfr</span>(<span class="params">image_batch, label_batch</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    将样本特征值目标值一起写入文件</span></span><br><span class="line"><span class="string">    :param image_batch:</span></span><br><span class="line"><span class="string">    :param label_batch:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> tf.python_io.TFRecordWriter(<span class="string">&#x27;cifar.tfrecords&#x27;</span>) <span class="keyword">as</span> writer:</span><br><span class="line">        <span class="comment"># 循环构造example对象，并序列化写入</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">            image = image_batch[i].tostring()</span><br><span class="line">            label = label_batch[i][<span class="number">0</span>]</span><br><span class="line">            example = tf.train.Example(features=tf.train.Features(feature=&#123;</span><br><span class="line">                <span class="string">&#x27;image&#x27;</span>: tf.train.Feature(bytes_list=tf.train.BytesList(value=[image])),</span><br><span class="line">                <span class="string">&#x27;label&#x27;</span>: tf.train.Feature(int64_list=tf.train.Int64List(value=[label])),</span><br><span class="line">            &#125;))</span><br><span class="line"></span><br><span class="line">            writer.write(example.SerializeToString())</span><br></pre></td></tr></table></div></figure>        <h3 id="案例：读取-TFRecords"   >          <a href="#案例：读取-TFRecords" class="heading-link"><i class="fas fa-link"></i></a>案例：读取 TFRecords</h3>      <p>需要有一个解析 Example 过程，可以使用<code>tf.TFRecordReader</code>的<code>tf.parse_single_example</code>解析器，可以将<code>Example</code>协议内存块解析为张量</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">feature = tf.parse_single_example(value, features=&#123;</span><br><span class="line">    <span class="string">&#x27;image&#x27;</span>: tf.FixedLenFeature([], tf.string),</span><br><span class="line">    <span class="string">&#x27;label&#x27;</span>: tf.FixedLenFeature([], tf.int64),</span><br><span class="line">&#125;)</span><br><span class="line">image = feature[<span class="string">&#x27;image&#x27;</span>]</span><br><span class="line">label = feature[<span class="string">&#x27;label&#x27;</span>]</span><br></pre></td></tr></table></div></figure><ul><li><code>tf.parse_single_example(serialized, features=None, name=None)</code><ul><li>解析一个单一的 Example 原型</li><li>serialized：标量字符串 Tensor，一个序列化的 Example</li><li>features：dict’字典数据，键为读取的名字，值为 FixedLenFeature</li><li>return：一个 键值对组成的字典，键为读取的名字</li></ul></li><li><code>tf.FixedLenFeature(shape,dtype)</code><ul><li>shape：输入数据的形状，一般不指定，为空列表</li><li>dtype：输入数据类型，与存储进文件的类型要一致</li><li>类型只能是 float32，int64，string</li></ul></li></ul>        <h4 id="步骤"   >          <a href="#步骤" class="heading-link"><i class="fas fa-link"></i></a>步骤</h4>      <ol><li>构造文件名队列</li><li>读取与解码<ol><li>读取</li><li>解析 example</li><li>解码<code>tf.decode_raw()</code></li></ol></li><li>构造批处理队列</li></ol><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_tfrecords</span>():</span></span><br><span class="line">    <span class="comment"># 1、构造文件名队列</span></span><br><span class="line">    file_queue = tf.train.string_input_producer([<span class="string">&#x27;cifar.tfrecords&#x27;</span>])</span><br><span class="line">    <span class="comment"># 2、读取与解码</span></span><br><span class="line">    <span class="comment"># 读取</span></span><br><span class="line">    reader = tf.TFRecordReader()</span><br><span class="line">    key, value = reader.read(file_queue)</span><br><span class="line">    <span class="comment"># 解析example</span></span><br><span class="line">    feature = tf.parse_single_example(value, features=&#123;</span><br><span class="line">        <span class="string">&#x27;image&#x27;</span>: tf.FixedLenFeature([], tf.string),</span><br><span class="line">        <span class="string">&#x27;label&#x27;</span>: tf.FixedLenFeature([], tf.int64),</span><br><span class="line">    &#125;)</span><br><span class="line">    image = feature[<span class="string">&#x27;image&#x27;</span>]</span><br><span class="line">    label = feature[<span class="string">&#x27;label&#x27;</span>]</span><br><span class="line">    <span class="comment"># 解码</span></span><br><span class="line">    image_decoded = tf.decode_raw(image, tf.uint8)</span><br><span class="line">    <span class="comment"># 形状调整</span></span><br><span class="line">    image_reshaped = tf.reshape(image_decoded, [<span class="number">32</span>, <span class="number">32</span>, <span class="number">3</span>])</span><br><span class="line">    <span class="comment"># 3、构造批处理队列</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开启会话</span></span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        <span class="comment"># 开启线程</span></span><br><span class="line">        <span class="comment"># 创建线程协调员</span></span><br><span class="line">        coord = tf.train.Coordinator()</span><br><span class="line">        threads = tf.train.start_queue_runners(sess=sess, coord=coord)</span><br><span class="line"></span><br><span class="line">        image_new, label_new = sess.run([image_reshaped, label])</span><br><span class="line">        <span class="built_in">print</span>(image_new)</span><br><span class="line">        <span class="built_in">print</span>(label_new)</span><br><span class="line">        <span class="comment"># 回收线程</span></span><br><span class="line">        coord.request_stop()</span><br><span class="line">        coord.join(threads=threads)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="神经网络基础"   >          <a href="#神经网络基础" class="heading-link"><i class="fas fa-link"></i></a>神经网络基础</h2>              <h3 id="神经网络"   >          <a href="#神经网络" class="heading-link"><i class="fas fa-link"></i></a>神经网络</h3>      <p>由三层构成：输入层，隐藏层，输出层</p><p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200312214125.jpg"></p><blockquote><p>​ 其中每层圆圈代表一个神经元，隐藏层和输出层的神经元把输入的数据计算后输出，输出层的神经元只是输出</p></blockquote><ul><li>神经网络特点<ul><li>每个连接都有权值</li><li>同一层神经元之间没有连接</li><li>最后的输出结果对应的层也称之为<strong>全连接层</strong></li></ul></li></ul>        <h4 id="感知机"   >          <a href="#感知机" class="heading-link"><i class="fas fa-link"></i></a>感知机</h4>      <p>感知机就是模拟大脑神经网络处理数据的过程</p><p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200313180033.png"></p><blockquote><p>感知机是一种基础分类模型，类似于逻辑回归，不同的是，感知机的激活函数用的书<code>sign</code>，而逻辑回归用的是<code>sigmoid</code>，<strong>感知机也具有连接的权重和偏置</strong></p><p>$$<br>u=\sum_i^n{w_ix_i}+b<br>$$</p><p>$$<br>y=sign(u)=\left{<br>\begin{aligned}<br>+1,&amp; &amp;u&gt;0 \<br>-1,&amp; &amp;u\leq0<br>\end{aligned}\right.<br>$$</p></blockquote><p>可解决问题：或、与、异或</p>        <h3 id="神经网络基础-1"   >          <a href="#神经网络基础-1" class="heading-link"><i class="fas fa-link"></i></a>神经网络基础</h3>      <ul><li>损失函数<ul><li>交叉熵损失</li><li>总损失、平均损失</li><li>最小二乘法——线性回归损失——均方误差</li></ul></li><li>优化损失函数</li></ul><p>神经网络主要用于分类，任意事件发生的概率在 0-1 之间，且总有某一个事件发生（概率和为 1）。如果将分类问题中“一个样例属于某个类别”，看成一个概率事件，那么训练数据的正确答案就符合一个概率分布。Softmax 回归就是一个常用的将神经网络前向传播得到的结果也变成概率分布的方法。</p>        <h4 id="Softmax-回归"   >          <a href="#Softmax-回归" class="heading-link"><i class="fas fa-link"></i></a>Softmax 回归</h4>      <p>logits 加上 softmax 映射——多分类</p><p>将神经网络输出转换成概率结果</p><p>$$<br>softmax(y)_i=\frac{e^{y_i}}{\sum_{j=1}^n{e^{y_j}}}<br>$$</p><p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200313184347.png"></p><p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200314180553.png"></p>        <h4 id="交叉熵损失公式"   >          <a href="#交叉熵损失公式" class="heading-link"><i class="fas fa-link"></i></a>交叉熵损失公式</h4>      <p>$$<br>H_{y^\prime}=-\sum_i^ny_{i^\prime}log(y_i)<br>$$</p><p>为了能够衡量距离，目标值需要进行 one-hot 编码，能与概率值一一对应，如下图</p><p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200313190058.png"></p>        <h4 id="softmax、交叉熵损失-API"   >          <a href="#softmax、交叉熵损失-API" class="heading-link"><i class="fas fa-link"></i></a>softmax、交叉熵损失 API</h4>      <ul><li><code>tf.nn.softmax_cross_entropy_with_logits(labels=None, logits=None, name=None)</code><ul><li>计算 logits 和 labels 之间的交叉损失熵</li><li>labels：标签值（真实值）</li><li>logits：样本加权之后的值</li><li>return：损失值列表</li></ul></li><li><code>tf.reduce_mean(input_tensor)</code><ul><li>计算张量的尺寸的元素平均值</li></ul></li></ul>        <h3 id="案例：Mnist-手写数字识别"   >          <a href="#案例：Mnist-手写数字识别" class="heading-link"><i class="fas fa-link"></i></a>案例：Mnist 手写数字识别</h3>              <h4 id="数据集"   >          <a href="#数据集" class="heading-link"><i class="fas fa-link"></i></a>数据集</h4>      <p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200313193736.png"></p><ul><li>特征值<ul><li>28*28=784</li></ul></li><li>目标值<ul><li>分类：one-hot 编码</li><li>可能值：0, 1, 2, …,9</li><li>编码：0, 1, 0, …,0（值为 1）</li></ul></li></ul>        <h4 id="数据获取-API"   >          <a href="#数据获取-API" class="heading-link"><i class="fas fa-link"></i></a>数据获取 API</h4>      <ul><li><code>from tensorflow.examples.tutorials.mnist import input_data</code><ul><li><code>mnist = input_data.read_data_sets(path, one_hot=True)</code><ul><li><code>mnist.train.next_batch(100)</code>提供批量获取功能</li><li><code>mnist.train.images</code></li><li><code>mnist.train.labels</code></li><li><code>mnist.test.images</code></li><li><code>mnist.test.labels</code></li></ul></li></ul></li></ul>        <h4 id="分析-代码"   >          <a href="#分析-代码" class="heading-link"><i class="fas fa-link"></i></a>分析-代码</h4>      <ul><li>完善功能<ul><li>增加准确率</li><li>增加变量 tensorboard 显示</li><li>增加模型保存加载</li><li>增加模型预测结果输出</li></ul></li></ul><p>采用只有一层，即最后一个输出层的神经网络，也称为全连接层神经网络</p><p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200313193212.png"></p>        <h5 id="全连接"   >          <a href="#全连接" class="heading-link"><i class="fas fa-link"></i></a>全连接</h5>      <ul><li><code>y = w1x1 + w2x2 + ... + b</code></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x[<span class="literal">None</span>, <span class="number">784</span>] * w[<span class="number">784</span>, <span class="number">10</span>] + bias[<span class="number">10</span>] = y_predict[<span class="literal">None</span>, <span class="number">10</span>]</span><br><span class="line">r = tf.nn.softmax_cross_entropy_with_logits(labels=y_true, logits=y_predict, name=<span class="literal">None</span>)</span><br><span class="line">error = tf.reduce_mean(r)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h5 id="准确率"   >          <a href="#准确率" class="heading-link"><i class="fas fa-link"></i></a>准确率</h5>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">equal_list = tf.equal(tf.argmax(y_true, axis=<span class="number">1</span>), tf.argmax(y_predict, axis=<span class="number">1</span>))</span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(equal_list, tf.float32))</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h5 id="代码-1"   >          <a href="#代码-1" class="heading-link"><i class="fas fa-link"></i></a>代码</h5>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">full_connection</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    用全连接对手写数字进行识别</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 1、准备数据</span></span><br><span class="line">    mnist = input_data.read_data_sets(<span class="string">&quot;./mnist_data&quot;</span>, one_hot=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 用占位符定义真实数据</span></span><br><span class="line">    x = tf.placeholder(dtype=tf.float32, shape=[<span class="literal">None</span>, <span class="number">784</span>])</span><br><span class="line">    y_true = tf.placeholder(dtype=tf.float32, shape=[<span class="literal">None</span>, <span class="number">10</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2、构造模型 - 全连接</span></span><br><span class="line">    <span class="comment"># [None, 784] * W[784, 10] + Bias = [None, 10]</span></span><br><span class="line">    weights = tf.Variable(initial_value=tf.random_normal(shape=[<span class="number">784</span>, <span class="number">10</span>], stddev=<span class="number">0.01</span>))</span><br><span class="line">    bias = tf.Variable(initial_value=tf.random_normal(shape=[<span class="number">10</span>], stddev=<span class="number">0.1</span>))</span><br><span class="line">    y_predict = tf.matmul(x, weights) + bias</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3、构造损失函数</span></span><br><span class="line">    loss_list = tf.nn.softmax_cross_entropy_with_logits(logits=y_predict, labels=y_true)</span><br><span class="line">    loss = tf.reduce_mean(loss_list)</span><br><span class="line">    <span class="comment"># 4、优化损失</span></span><br><span class="line">    optimizer = tf.train.GradientDescentOptimizer(learning_rate=<span class="number">0.1</span>).minimize(loss)</span><br><span class="line">    <span class="comment"># optimizer = tf.train.AdamOptimizer(learning_rate=0.1).minimize(loss)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5、增加准确率计算</span></span><br><span class="line">    equal_list = tf.equal(tf.argmax(y_true, axis=<span class="number">1</span>), tf.argmax(y_predict, axis=<span class="number">1</span>))</span><br><span class="line">    accuracy = tf.reduce_mean(tf.cast(equal_list, tf.float32))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化变量</span></span><br><span class="line">    init = tf.global_variables_initializer()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        sess.run(init)</span><br><span class="line">        <span class="comment"># 开始训练</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50000</span>):</span><br><span class="line">            <span class="comment"># 获取真实值</span></span><br><span class="line">            image, label = mnist.train.next_batch(<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">            _, loss_value, accuracy_value = sess.run([optimizer, loss, accuracy], feed_dict=&#123;x: image, y_true: label&#125;)</span><br><span class="line"></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;第%d次的损失为%f，准确率为%f&quot;</span> % (i + <span class="number">1</span>, loss_value, accuracy_value))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    full_connection()</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TensorFlow </tag>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TensorFlow框架介绍</title>
      <link href="/2020/03/09/TensorFlow%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D/"/>
      <url>/2020/03/09/TensorFlow%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[        <h2 id="TF-数据流图"   >          <a href="#TF-数据流图" class="heading-link"><i class="fas fa-link"></i></a>TF 数据流图</h2>              <h3 id="加法案例"   >          <a href="#加法案例" class="heading-link"><i class="fas fa-link"></i></a>加法案例</h3>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tensorflow_demo</span>():</span></span><br><span class="line">    <span class="comment"># 实现加法</span></span><br><span class="line">    a_t = tf.constant(<span class="number">2</span>)</span><br><span class="line">    b_t = tf.constant(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    c_t = a_t + b_t</span><br><span class="line">    <span class="built_in">print</span>(c_t)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开启会话</span></span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        c_t_value = sess.run(c_t)</span><br><span class="line">        <span class="built_in">print</span>(c_t_value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    tensorflow_demo()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Tensor(&quot;add:0&quot;, shape=(), dtype=int32)</span></span><br><span class="line"><span class="comment"># 5</span></span><br></pre></td></tr></table></div></figure><span id="more"></span>        <h3 id="TF-结构分析"   >          <a href="#TF-结构分析" class="heading-link"><i class="fas fa-link"></i></a>TF 结构分析</h3>      <ul><li>一个构建图阶段<ul><li>流程图：定义数据（张量 Tensor）和操作（节点 op）</li></ul></li><li>一个执行图阶段<ul><li>调用各方资源，讲定义好的数据和操作运行起来</li></ul></li></ul>        <h4 id="数据流图介绍"   >          <a href="#数据流图介绍" class="heading-link"><i class="fas fa-link"></i></a>数据流图介绍</h4>      <p>Tensor-张量-数据</p><p>Flow-流动</p>        <h2 id="图与-TensorBoard"   >          <a href="#图与-TensorBoard" class="heading-link"><i class="fas fa-link"></i></a>图与 TensorBoard</h2>              <h3 id="图结构"   >          <a href="#图结构" class="heading-link"><i class="fas fa-link"></i></a>图结构</h3>      <p>数据（Tensor）+操作（Operation）</p>        <h3 id="相关操作"   >          <a href="#相关操作" class="heading-link"><i class="fas fa-link"></i></a>相关操作</h3>      <ul><li><p>默认图</p><ul><li><p>调用方法<code>tf.get_default_graph()</code></p></li><li><p>查看属性<code>.graph</code></p></li></ul></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">graph_demo</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    图的演示</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    a_t = tf.constant(<span class="number">2</span>)</span><br><span class="line">    b_t = tf.constant(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    c_t = a_t + b_t</span><br><span class="line">    <span class="built_in">print</span>(c_t)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查看默认图</span></span><br><span class="line">    default_g = tf.get_default_graph()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;图方法&#x27;</span>, default_g)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;图属性&#x27;</span>, c_t.graph)</span><br><span class="line">    <span class="comment"># 开启会话</span></span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        c_t_value = sess.run(c_t)</span><br><span class="line">        <span class="built_in">print</span>(c_t_value)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;图属性&#x27;</span>, sess.graph)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    graph_demo()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Tensor(&quot;add:0&quot;, shape=(), dtype=int32)</span></span><br><span class="line"><span class="comment"># 图方法 &lt;tensorflow.python.framework.ops.Graph object at 0x000001C855C96E88&gt;</span></span><br><span class="line"><span class="comment"># 图属性 &lt;tensorflow.python.framework.ops.Graph object at 0x000001C855C96E88&gt;</span></span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line"><span class="comment"># 图属性 &lt;tensorflow.python.framework.ops.Graph object at 0x000001C855C96E88&gt;</span></span><br></pre></td></tr></table></div></figure><ul><li>创建图</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">new_g = tf.Graph()</span><br><span class="line"><span class="keyword">with</span> new_g.as_default():</span><br><span class="line">    <span class="comment"># 定义数据和操作</span></span><br></pre></td></tr></table></div></figure><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">new_g = tf.Graph()</span><br><span class="line"><span class="keyword">with</span> new_g.as_default():</span><br><span class="line">    a_new = tf.constant(<span class="number">20</span>)</span><br><span class="line">    b_new = tf.constant(<span class="number">30</span>)</span><br><span class="line">    c_new = a_new + b_new</span><br><span class="line">    <span class="built_in">print</span>(c_new)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session(graph=new_g) <span class="keyword">as</span> sess:</span><br><span class="line">    c_new_value = sess.run(c_new)</span><br><span class="line">    <span class="built_in">print</span>(c_new_value)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;创建图&#x27;</span>, sess.graph)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Tensor(&quot;add:0&quot;, shape=(), dtype=int32)</span></span><br><span class="line"><span class="comment"># 50</span></span><br><span class="line"><span class="comment"># 创建图 &lt;tensorflow.python.framework.ops.Graph object at 0x000001E7C282D5C8&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="可视化-TensorBoard"   >          <a href="#可视化-TensorBoard" class="heading-link"><i class="fas fa-link"></i></a>可视化 TensorBoard</h3>      <ul><li>数据序列化-event 文件<ul><li><code>tf.summary.FileWriter(path, graph=sess.graph)</code></li></ul></li><li>启动 TensorBorad<ul><li>cmd 运行</li><li><code>tensorboard --logdir=./tmp/summary --host=127.0.0.1</code></li><li><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200305181919.png"></li></ul></li></ul>        <h3 id="OP"   >          <a href="#OP" class="heading-link"><i class="fas fa-link"></i></a>OP</h3>      <ul><li>数据：Tensor 对象</li><li>操作：Operation 对象</li></ul>        <h2 id="会话"   >          <a href="#会话" class="heading-link"><i class="fas fa-link"></i></a>会话</h2>      <ul><li><code>tf.Session</code>：用于完整的程序当中</li><li><code>tf.InteractiveSession</code>：用于交互式上下文中的 TensorFlow，例如 shell</li><li>使用<code>a.eval()</code></li></ul><ul><li><p>会话资源需要回收</p><ul><li>直接使用<code>with</code></li></ul></li><li><p>初始化会话参数</p><ul><li><p>target：如果将此参数留空，会话将仅仅使用本地计算机中的设备。可以指定<code>grpc://</code>网址，以便指定 TensorFlow 服务器的地址，这使得会话可以访问该服务器控制的计算机上的所有设备。</p></li><li><p>graph：默认情况下，新的<code>tf.Session</code>将绑定到当前的默认图</p></li><li><p>config：此参数允许指定一个<code>tf.ConfigProto</code>以便控制会话的行为。例如，ConfigProto 协议用于打印设备使用信息</p></li></ul></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.Session(config=tf.ConfigProto(allow_soft_placement=<span class="literal">True</span>, log_device_placement=<span class="literal">True</span>)) <span class="keyword">as</span> sess:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Device mapping: no known devices.</span></span><br><span class="line"><span class="comment"># add: (Add): /job:localhost/replica:0/task:0/device:CPU:0</span></span><br><span class="line"><span class="comment"># Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0</span></span><br><span class="line"><span class="comment"># Const_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0</span></span><br></pre></td></tr></table></div></figure><ul><li><p><code>run(fetches, feed_dict=None)</code></p><ul><li><p>通过使用<code>sess.run()</code>来运行 operation</p></li><li><p>fetches：单一的 operation，或者列表、元组（其他不属于 tensorflow 的类型不行）</p></li><li><p>feed_dict：参数允许调用者覆盖图中张量的值，运行时赋值</p><ul><li>与<code>tf.placeholder</code>搭配使用，则会检查值的形状是否与占位符兼容</li></ul></li></ul></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line"><span class="comment"># 查看c_t的值</span></span><br><span class="line">    <span class="built_in">print</span>(c_t.<span class="built_in">eval</span>())</span><br><span class="line">    <span class="built_in">print</span>(sess.run(c_t))</span><br><span class="line">    <span class="comment"># 查看a，b，c的值</span></span><br><span class="line">    <span class="built_in">print</span>([a, b ,c])</span><br></pre></td></tr></table></div></figure><ul><li>feed_dict 操作</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">session_run_demo</span>():</span></span><br><span class="line">    <span class="comment"># 定义占位符</span></span><br><span class="line">    a = tf.placeholder(tf.float32)</span><br><span class="line">    b = tf.placeholder(tf.float32)</span><br><span class="line">    sum_ab = tf.add(a, b)</span><br><span class="line">    <span class="comment"># 开启会话</span></span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        <span class="built_in">print</span>(sess.run(sum_ab, feed_fict=&#123;a:<span class="number">3.0</span>, b:<span class="number">4.0</span>&#125;))</span><br></pre></td></tr></table></div></figure>        <h2 id="张量"   >          <a href="#张量" class="heading-link"><i class="fas fa-link"></i></a>张量</h2>              <h3 id="数据类型"   >          <a href="#数据类型" class="heading-link"><i class="fas fa-link"></i></a>数据类型</h3>      <ul><li>张量如何存储<ul><li>标量 一个数字 0 阶张量 <code>shape()</code></li><li>向量 一维数组 1 阶张量 <code>shape(n,)</code>n 为数组长度</li><li>矩阵 二维数组 2 阶张量 <code>shape(n, m, )</code>n 行，m 列</li><li>张量 n 维数组 n 阶张量</li></ul></li><li>默认 tf.float32<ul><li>整型 tf.int32</li><li>浮点型 tf.float32</li></ul></li></ul>        <h3 id="创建张量指令"   >          <a href="#创建张量指令" class="heading-link"><i class="fas fa-link"></i></a>创建张量指令</h3>              <h3 id="张量的变换"   >          <a href="#张量的变换" class="heading-link"><i class="fas fa-link"></i></a>张量的变换</h3>      <ul><li><p>类型的修改</p><ul><li><code>ndarry.astype(type)</code><ul><li><code>tf.cast(tensor, dtype)</code></li><li>不会改变原始的 tensor</li><li>返回新的 tensor</li></ul></li><li><code>ndarry.tostring()</code></li></ul></li><li><p>形状的修改</p><ul><li><p><code>ndarray.reshape(shape)</code>行变成列，列变成行</p></li><li><p><code>ndarray.resize(shape)</code></p></li><li><p>静态形状：初始创建张量时形状</p><ul><li><code>tensor.set_shape()</code></li><li>只有在形状没有完全固定下来的情况下，才能改变</li></ul></li></ul></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a = tf.placeholder(dtype=tf.float32, shape=[<span class="literal">None</span>, <span class="literal">None</span>])</span><br><span class="line">b = tf.placeholder(dtype=tf.float32, shape=[<span class="literal">None</span>, <span class="number">10</span>])</span><br><span class="line">c = tf.placeholder(dtype=tf.float32, shape=[<span class="number">10</span>, <span class="number">20</span>])</span><br><span class="line"><span class="comment"># a Tensor(&quot;Placeholder:0&quot;, shape=(?, ?), dtype=float32)</span></span><br><span class="line"><span class="comment"># b Tensor(&quot;Placeholder_1:0&quot;, shape=(?, 10), dtype=float32)</span></span><br><span class="line"><span class="comment"># c Tensor(&quot;Placeholder_2:0&quot;, shape=(10, 20), dtype=float32)</span></span><br><span class="line"></span><br><span class="line">a.set_shape([<span class="number">2</span>, <span class="number">3</span>]) <span class="comment"># a可以设置不同行列</span></span><br><span class="line">b.set_shape([<span class="number">2</span>, <span class="number">10</span>]) <span class="comment"># b只可以设置行，列已固定</span></span><br><span class="line"><span class="comment"># c不可设置，因为行列以固定</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a Tensor(&quot;Placeholder:0&quot;, shape=(2, 3), dtype=float32)</span></span><br><span class="line"><span class="comment"># b Tensor(&quot;Placeholder_1:0&quot;, shape=(2, 10)</span></span><br></pre></td></tr></table></div></figure><ul><li><p>动态形状：</p><ul><li><p><code>tensor.reshape(tensor, shape)</code></p></li><li><p>不会改变原始 tensor，只会返回一个新的 tensor</p></li><li><p>必须保持张量的元素数量前后一致</p></li></ul></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = tf.placeholder(dtype=tf.float32, shape=[<span class="literal">None</span>, <span class="literal">None</span>])</span><br><span class="line">a.set_shape([<span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(tf.reshape(a, shape=[<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>]))</span><br><span class="line"><span class="comment"># 变化后的元素数量等于原来的，2*3*1=2*3</span></span><br></pre></td></tr></table></div></figure>        <h3 id="张量的数学公式"   >          <a href="#张量的数学公式" class="heading-link"><i class="fas fa-link"></i></a>张量的数学公式</h3>      <p>参考官方 api</p><ul><li>基本运算符</li><li>基本数学函数</li><li>矩阵运算</li><li>reduce 操作</li><li>序列索引操作</li></ul>        <h2 id="变量-OP"   >          <a href="#变量-OP" class="heading-link"><i class="fas fa-link"></i></a>变量 OP</h2>      <p>TensorFlow 中的变量</p><ul><li>存储持久化</li><li>可修改值</li><li>可指定被训练</li></ul>        <h3 id="创建变量"   >          <a href="#创建变量" class="heading-link"><i class="fas fa-link"></i></a>创建变量</h3>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.Variable(initial_value=<span class="literal">None</span>, trainable=<span class="literal">True</span>, collections=<span class="literal">None</span>,)</span><br></pre></td></tr></table></div></figure><ul><li>initial_value：初始化的值</li><li>trainable：是否被训练</li><li>collections：新变量将添加到列出的图的集合中 collections</li><li><strong>变量需要显式初始化，才能运行值</strong></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">init = tf.global_variables_initializer()</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">sess.run(init)</span><br></pre></td></tr></table></div></figure><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">variable_demo</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    变量演示</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    a = tf.Variable(initial_value=<span class="number">50</span>, )</span><br><span class="line">    b = tf.Variable(initial_value=<span class="number">40</span>, )</span><br><span class="line">    c = tf.add(a, b)</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">    <span class="built_in">print</span>(b)</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br><span class="line">    <span class="comment"># 初始化变量</span></span><br><span class="line">    init = tf.global_variables_initializer()</span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        sess.run(init)</span><br><span class="line">        a_t, b_t, c_t = sess.run([a, b, c])</span><br><span class="line">        <span class="built_in">print</span>(a_t, b_t, c_t)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    variable_demo()</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;tf.Variable &#x27;Variable:0&#x27; shape=() dtype=int32_ref&gt;</span></span><br><span class="line"><span class="comment"># &lt;tf.Variable &#x27;Variable_1:0&#x27; shape=() dtype=int32_ref&gt;</span></span><br><span class="line"><span class="comment"># Tensor(&quot;Add:0&quot;, shape=(), dtype=int32)</span></span><br><span class="line"><span class="comment"># 50 40 90</span></span><br></pre></td></tr></table></div></figure><ul><li>命名空间修改，使结构更加清晰</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;test&#x27;</span>):</span><br><span class="line">    a = tf.Variable(initial_value=<span class="number">50</span>, )</span><br><span class="line">    b = tf.Variable(initial_value=<span class="number">40</span>, )</span><br><span class="line">    c = tf.add(a, b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;tf.Variable &#x27;test/Variable:0&#x27; shape=() dtype=int32_ref&gt;</span></span><br><span class="line"><span class="comment"># &lt;tf.Variable &#x27;test/Variable_1:0&#x27; shape=() dtype=int32_ref&gt;</span></span><br><span class="line"><span class="comment"># Tensor(&quot;test/Add:0&quot;, shape=(), dtype=int32)</span></span><br><span class="line"><span class="comment"># 多出了一个test/</span></span><br></pre></td></tr></table></div></figure>        <h2 id="高级-API"   >          <a href="#高级-API" class="heading-link"><i class="fas fa-link"></i></a>高级 API</h2>              <h3 id="基础-API"   >          <a href="#基础-API" class="heading-link"><i class="fas fa-link"></i></a>基础 API</h3>      <ul><li><code>tf.app</code><ul><li>相当于为 TensorFlow 进行的脚本提供一个 main 函数入口，可以定义脚本运行的 flags。</li></ul></li><li><code>tf.image</code><ul><li>图像处理操作，主要是颜色的变换、变形和图像的编码和解码</li></ul></li><li><code>tf.summary</code><ul><li>用来生成 TensorBoard 可用的统计日志，目前 summary 主要提供了 4 种类型：audio、image、histogram、scalar</li></ul></li><li><code>tf.python_io</code><ul><li>用来读写 TFRecords 文件</li></ul></li><li><code>tf.train</code><ul><li>提供了一些训练器，与<code>tf.nn</code>组合起来，实现一些网络的优化计算</li></ul></li><li><code>tf.nn</code><ul><li>提供了一些构建神经网络的底层函数。TensorFlow 构建网络的核心模块。其中包含了添加各种层的函数，比如添加卷积层、池化层等</li></ul></li></ul>        <h3 id="高级-API-1"   >          <a href="#高级-API-1" class="heading-link"><i class="fas fa-link"></i></a>高级 API</h3>      <ul><li><code>tf.keras</code><ul><li>在于快速构建模型</li></ul></li><li><code>tf.layers</code><ul><li>以更高级的概念层来定义一个模型，类似<code>tf.keras</code></li></ul></li><li><code>tf.contrib</code><ul><li>提供计算图中的网络层、正则化、摘要操作，是构建计算图的高级操作，但是，包含不稳定和实验代码，可能以后 API 会变。</li></ul></li><li><code>tf.estimator</code><ul><li>相当于 Model+Training+Evaluate 的合体，在模块中，已经实现了几种简单的分类器和回归器，包括：Baseline、Learning 和 DNN。这里的 DNN 的网络，只是全连接网络，没有提供卷积之类的。</li></ul></li></ul>        <h3 id="高级-API-图示"   >          <a href="#高级-API-图示" class="heading-link"><i class="fas fa-link"></i></a>高级 API 图示</h3>      <p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200308221528.jpg"></p>        <h2 id="案例：实现线性回归"   >          <a href="#案例：实现线性回归" class="heading-link"><i class="fas fa-link"></i></a>案例：实现线性回归</h2>              <h3 id="API"   >          <a href="#API" class="heading-link"><i class="fas fa-link"></i></a>API</h3>              <h4 id="运算"   >          <a href="#运算" class="heading-link"><i class="fas fa-link"></i></a>运算</h4>      <ul><li>矩阵运算<ul><li><code>tf.matmul(x, w)</code></li></ul></li><li>平方<ul><li><code>tf.square(error)</code></li></ul></li><li>均值<ul><li><code>tf.reduce_mean(error)</code></li></ul></li></ul>        <h4 id="梯度下降优化"   >          <a href="#梯度下降优化" class="heading-link"><i class="fas fa-link"></i></a>梯度下降优化</h4>      <ul><li><code>tf.train.GradientDescentOptimizer(learning_rate)</code><ul><li>梯度下降优化</li><li>learning_rate：学习率，一般为 0~1 之间比较小的值</li><li>method<ul><li><code>minimize(loss)</code></li></ul></li><li>return：梯度下降 op</li></ul></li></ul>        <h3 id="线性回归原理"   >          <a href="#线性回归原理" class="heading-link"><i class="fas fa-link"></i></a>线性回归原理</h3>      <ul><li>构建模型<ul><li><code>y = w1x1 + w2x2 + ... + wnxn + b</code></li></ul></li><li>构造损失函数<ul><li>均方误差</li></ul></li><li>优化损失<ul><li>梯度下降</li></ul></li></ul>        <h3 id="案例：线性回归的训练"   >          <a href="#案例：线性回归的训练" class="heading-link"><i class="fas fa-link"></i></a>案例：线性回归的训练</h3>      <ul><li>准备真实数据<ul><li>100 个样本</li><li>x：特征值 形状：（100, 1）</li><li>y_true：目标值 目标值：（100, 1）</li><li><code>y_true = 0.8x + 0.7</code></li></ul></li><li>假定 x 和 y 之间的关系满足<ul><li><code>y = kx + b</code></li><li>趋近于<code>k = 0.8 b = 0.7</code></li></ul></li><li>流程分析<ul><li><code>(100, 1) * (1, 1) = (100, 1)</code></li><li><code>y_predict = x * weights(1, 1) + bias(1, 1)</code><ul><li>bias 可以是标量，也可以是向量</li></ul></li><li>构建模型<ul><li><code>y_predict = tf.matmul(x, weights) + bias</code></li></ul></li><li>构造损失函数<ul><li><code>error = tf.reduce_mean(tf.square(y_predict - y_true))</code></li></ul></li><li>优化损失<ul><li><code>optimizer= tf.train.GradientDescentOptimizer(learning_rate=0.01).minimize(error)</code></li><li>学习率会影响迭代训练次数</li></ul></li></ul></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_regression</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    实现线性回归</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 1、准备数据</span></span><br><span class="line">    x = tf.random_normal(shape=[<span class="number">100</span>, <span class="number">1</span>])</span><br><span class="line">    y_true = tf.matmul(x, [[<span class="number">0.8</span>]]) + <span class="number">0.7</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2、构造模型</span></span><br><span class="line">    <span class="comment"># 定义模型参数，用变量</span></span><br><span class="line">    weights = tf.Variable(initial_value=tf.random_normal(shape=[<span class="number">1</span>, <span class="number">1</span>]))</span><br><span class="line">    bias = tf.Variable(initial_value=tf.random_normal(shape=[<span class="number">1</span>, <span class="number">1</span>]))</span><br><span class="line">    y_predict = tf.matmul(x, weights) + bias</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3、构造损失函数</span></span><br><span class="line">    error = tf.reduce_mean(tf.square(y_predict - y_true))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4、优化损失</span></span><br><span class="line">    optimizer = tf.train.GradientDescentOptimizer(learning_rate=<span class="number">0.01</span>).minimize(error)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显式的初始化变量</span></span><br><span class="line">    init = tf.global_variables_initializer()</span><br><span class="line">    <span class="comment"># 开启会话</span></span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        sess.run(init)</span><br><span class="line">        <span class="comment"># 查看初始化模型参数之后的值</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;训练前模型参数：权重%f，偏置%f，损失%f&#x27;</span> % (weights.<span class="built_in">eval</span>(), bias.<span class="built_in">eval</span>(), error.<span class="built_in">eval</span>()))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 开始训练</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">            <span class="comment"># 迭代1000次训练</span></span><br><span class="line">            sess.run(optimizer)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;训练后模型参数：权重%f，偏置%f，损失%f&#x27;</span> % (weights.<span class="built_in">eval</span>(), bias.<span class="built_in">eval</span>(), error.<span class="built_in">eval</span>()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    linear_regression()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练前模型参数：权重-3.123351，偏置-0.332511，损失15.018922</span></span><br><span class="line"><span class="comment"># 训练后模型参数：权重0.799999，偏置0.699999，损失0.000000</span></span><br></pre></td></tr></table></div></figure>        <h3 id="增加其他功能"   >          <a href="#增加其他功能" class="heading-link"><i class="fas fa-link"></i></a>增加其他功能</h3>      <ul><li>增加 TensorBoard 显示</li><li>增加命名空间</li><li>模型保存与加载</li><li>命令行参数设置</li></ul>        <h4 id="增加变量显示"   >          <a href="#增加变量显示" class="heading-link"><i class="fas fa-link"></i></a>增加变量显示</h4>      <p>目的：在 TensorBoard 中观察模型的参数、损失值等变量值的变化</p><ul><li><p>创建事件文件</p></li><li><p>收集变量</p><ul><li><code>tf.summary.scalar(name=&#39;&#39;, tensor)</code>，收集对于损失函数和准确率等单值变量，name 为变量的名字，tensor 为值</li><li><code>tf.summary.histogram(name=&#39;&#39;, tensor)</code>，收集高纬度的变量参数</li><li><code>tf.summary.image(name=&#39;&#39;, tensor)</code>，收集输入的图片张量显示图片</li></ul></li><li><p>合并变量写入事件文件</p><ul><li><code>merged = tf.summary.merge_all()</code></li><li>运行合并：<code>summary = sess.sun(merged)</code>，每次迭代都需运行</li><li>添加：<code>FileWriter.add_summary(summary, i)</code>，i 表示第几次的值</li></ul></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_regression</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    实现线性回归</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 1、准备数据</span></span><br><span class="line">    x = tf.random_normal(shape=[<span class="number">100</span>, <span class="number">1</span>])</span><br><span class="line">    y_true = tf.matmul(x, [[<span class="number">0.8</span>]]) + <span class="number">0.7</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2、构造模型</span></span><br><span class="line">    <span class="comment"># 定义模型参数，用变量</span></span><br><span class="line">    weights = tf.Variable(initial_value=tf.random_normal(shape=[<span class="number">1</span>, <span class="number">1</span>]))</span><br><span class="line">    bias = tf.Variable(initial_value=tf.random_normal(shape=[<span class="number">1</span>, <span class="number">1</span>]))</span><br><span class="line">    y_predict = tf.matmul(x, weights) + bias</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3、构造损失函数</span></span><br><span class="line">    error = tf.reduce_mean(tf.square(y_predict - y_true))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4、优化损失</span></span><br><span class="line">    optimizer = tf.train.GradientDescentOptimizer(learning_rate=<span class="number">0.01</span>).minimize(error)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1_收集变量</span></span><br><span class="line">    tf.summary.scalar(<span class="string">&#x27;error&#x27;</span>, error)</span><br><span class="line">    tf.summary.histogram(<span class="string">&#x27;weights&#x27;</span>, weights)</span><br><span class="line">    tf.summary.histogram(<span class="string">&#x27;bias&#x27;</span>, bias)</span><br><span class="line">    <span class="comment"># 2_合并变量</span></span><br><span class="line">    merged = tf.summary.merge_all()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显式的初始化变量</span></span><br><span class="line">    init = tf.global_variables_initializer()</span><br><span class="line">    <span class="comment"># 开启会话</span></span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        sess.run(init)</span><br><span class="line">        <span class="comment"># 查看初始化模型参数之后的值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 0_创建事件文件</span></span><br><span class="line">        file_writer = tf.summary.FileWriter(<span class="string">&#x27;./tmp/liner&#x27;</span>, graph=sess.graph)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;训练前模型参数：权重%f，偏置%f，损失%f&#x27;</span> % (weights.<span class="built_in">eval</span>(), bias.<span class="built_in">eval</span>(), error.<span class="built_in">eval</span>()))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 开始训练</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">            <span class="comment"># 迭代1000次训练</span></span><br><span class="line">            sess.run(optimizer)</span><br><span class="line">            <span class="comment"># 3_运行合并变量操作</span></span><br><span class="line">            summary = sess.run(merged)</span><br><span class="line">            <span class="comment"># 4_将每次迭代后的变量写入事件文件</span></span><br><span class="line">            file_writer.add_summary(summary, i)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;训练后模型参数：权重%f，偏置%f，损失%f&#x27;</span> % (weights.<span class="built_in">eval</span>(), bias.<span class="built_in">eval</span>(), error.<span class="built_in">eval</span>()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    linear_regression()</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200309190938.png"></p><p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200309191005.png"></p><p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200309191030.png"></p><p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200309191053.png"></p>        <h4 id="增加命名空间"   >          <a href="#增加命名空间" class="heading-link"><i class="fas fa-link"></i></a>增加命名空间</h4>      <ul><li><code>with tf.variable_scope(&#39;&#39;)</code></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;prepare_data&#x27;</span>):</span><br><span class="line">    <span class="comment"># 1、准备数据</span></span><br><span class="line">    x = tf.random_normal(shape=[<span class="number">100</span>, <span class="number">1</span>], name=<span class="string">&#x27;Feature&#x27;</span>)</span><br><span class="line">    y_true = tf.matmul(x, [[<span class="number">0.8</span>]]) + <span class="number">0.7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;create_mode&#x27;</span>):</span><br><span class="line">    <span class="comment"># 2、构造模型</span></span><br><span class="line">    <span class="comment"># 定义模型参数，用变量</span></span><br><span class="line">    weights = tf.Variable(initial_value=tf.random_normal(shape=[<span class="number">1</span>, <span class="number">1</span>]), name=<span class="string">&#x27;Weights&#x27;</span>)</span><br><span class="line">    bias = tf.Variable(initial_value=tf.random_normal(shape=[<span class="number">1</span>, <span class="number">1</span>]), name=<span class="string">&#x27;Bias&#x27;</span>)</span><br><span class="line">    y_predict = tf.matmul(x, weights) + bias</span><br><span class="line"><span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;loss_fun&#x27;</span>):</span><br><span class="line">    <span class="comment"># 3、构造损失函数</span></span><br><span class="line">    error = tf.reduce_mean(tf.square(y_predict - y_true))</span><br><span class="line"><span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;optimizer&#x27;</span>):</span><br><span class="line">    <span class="comment"># 4、优化损失</span></span><br><span class="line">    optimizer = tf.train.GradientDescentOptimizer(learning_rate=<span class="number">0.01</span>).minimize(error)</span><br></pre></td></tr></table></div></figure><p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200309191853.png"></p><p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200309191942.png"></p>        <h4 id="模型的保存与加载"   >          <a href="#模型的保存与加载" class="heading-link"><i class="fas fa-link"></i></a>模型的保存与加载</h4>      <ul><li><code>tf.train.Saver(var_list=None, max_to_keep=5)</code><ul><li>保存和加载模型（文件格式：checkpoint 文件）</li><li>var_list：指定将要保存和还原的变量，它可以作为一个 dict 或一个列表传递</li><li>max_to_keep：指示要保留的最近检查点文件的最大数量。创建新文件时，会删除较旧的文件。如果无或 0，则保留所有检查点文件。默认为 5（即保留最新的 5 个检查点文件）</li></ul></li><li>步骤<ul><li>实例化 Saver，<code>saver = tf.train.Saver(var_list=None, max_to_keep=5)</code></li><li>保存，<code>saver.save(sess, path)</code><ul><li>路径需存在</li><li>例：<code>saver.save(sess, &#39;/tmp/ckpt/test/myregression.ckpt&#39;)</code></li></ul></li><li>加载，<code>saver.restore(sess, path)</code><ul><li>例：<code>saver.restore(sess, &#39;/tmp/ckpt/test/myregression.ckpt&#39;)</code></li></ul></li></ul></li></ul>        <h4 id="命令行参数使用"   >          <a href="#命令行参数使用" class="heading-link"><i class="fas fa-link"></i></a>命令行参数使用</h4>      <ul><li><code>tf.app.flags</code><ul><li><code>tf.app.flags.DEFINE_integer(&#39;max_step&#39;, 0, &#39;训练模型的步数&#39;)</code><ul><li>参数<code>(flag_name, default_value, docstring)</code></li></ul></li><li><code>tf.app.flags.DEFINE_string(flag_name, default_value, docstring)</code></li><li><code>tf.app.flags.DEFINE_boolean(flag_name, default_value, docstring)</code></li><li><code>tf.app.flags.DEFINE_float(flag_name, default_value, docstring)</code></li></ul></li><li>在 flags 有一个 FLAGS 标志，它在程序中可以调用到前面具体定义的 flag_name<ul><li><code>FLAGS = tf.app.flags.FLAGS</code></li><li>通过<code>FLAGS.max_step</code>调用命令行中传过来的参数</li></ul></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">tf.app.flags.DEFINE_integer(<span class="string">&#x27;max_step&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;训练模型的步数&#x27;</span>)</span><br><span class="line">tf.app.flags.DEFINE_string(<span class="string">&#x27;model_dir&#x27;</span>, <span class="string">&#x27;Unknown&#x27;</span>, <span class="string">&#x27;模型路径+名字&#x27;</span>)</span><br><span class="line">FLAGS = tf.app.flags.FLAGS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">command_demo</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    命令行演示</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(FLAGS.max_step)</span><br><span class="line">    <span class="built_in">print</span>(FLAGS.model_dir)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    command_demo()</span><br></pre></td></tr></table></div></figure><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">python day01_deeplearning.py</span></span><br><span class="line">0</span><br><span class="line">Unknown</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">python day01_deeplearning.py --max_step=200 --model_dir=<span class="string">&#x27;/tmp/t.txt&#x27;</span></span></span><br><span class="line">200</span><br><span class="line">&#x27;/tmp/t.txt&#x27;</span><br></pre></td></tr></table></div></figure><ul><li>通过<code>tf.app.run()</code>启动<code>main(argv)</code>函数</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">argv</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(argv)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    tf.app.run()</span><br><span class="line"></span><br><span class="line"><span class="comment"># [&#x27;C:/Users/yuan/PycharmProjects/tensor/day01_deeplearning.py&#x27;]</span></span><br><span class="line"><span class="comment"># 当前py文件所在目录</span></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TensorFlow </tag>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql的一些知识</title>
      <link href="/2020/03/08/mysql%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86/"/>
      <url>/2020/03/08/mysql%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[        <h2 id="ubuntu-重装-mysql"   >          <a href="#ubuntu-重装-mysql" class="heading-link"><i class="fas fa-link"></i></a>ubuntu 重装 mysql</h2>              <h3 id="删除-mysql"   >          <a href="#删除-mysql" class="heading-link"><i class="fas fa-link"></i></a>删除 mysql</h3>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt purge mysql-*</span><br><span class="line">sudo rm -rf /etc/mysql/ /var/lib/mysql</span><br><span class="line">sudo apt autoremove</span><br><span class="line">sudo apt autoreclean</span><br></pre></td></tr></table></div></figure><span id="more"></span>        <h3 id="安装-mysql"   >          <a href="#安装-mysql" class="heading-link"><i class="fas fa-link"></i></a>安装 mysql</h3>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install mysql-server</span><br><span class="line">sudo apt install mysql-client</span><br><span class="line">sudo apt install libmysqlclient-dev</span><br></pre></td></tr></table></div></figure><blockquote><p>期间会要求输入密码</p></blockquote><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo netstat -tap | grep mysql</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看mysql是否启动成功</span></span><br></pre></td></tr></table></div></figure><p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200308222639.png"></p>        <h2 id="mysql-开启远程连接"   >          <a href="#mysql-开启远程连接" class="heading-link"><i class="fas fa-link"></i></a>mysql 开启远程连接</h2>      <ul><li>root 登录 mysql</li></ul><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></div></figure><ul><li>给用户添加权限——改表法</li></ul><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">update user set host=&#x27;%&#x27; where user=&#x27;username&#x27;;</span><br></pre></td></tr></table></div></figure><ul><li>给用户添加权限——授权法</li></ul><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to &#x27;username&#x27;@&#x27;%&#x27; with grant option;</span><br><span class="line"><span class="meta">#</span><span class="bash"> grant 权限1,权限2,…权限n on 数据库名.表名 to <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;用户地址&#x27;</span>;</span></span><br><span class="line">flush privilege; # 刷新权限</span><br><span class="line">quit</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者<span class="built_in">exit</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者ctrl+z</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> *.*指数所有据库的所有表</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> %为使所有IP都可以访问，</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> with grant option 此用户情况下可以将此用户的权限给其他用户</span></span><br></pre></td></tr></table></div></figure><ul><li>修改 mysql 配置文件</li></ul><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line"><span class="meta">#</span><span class="bash"> bind-address = 127.0.0.1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改为</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> bind-address = 127.0.0.1(前面加<span class="comment">#)</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line">bind-address = 0.0.0.0</span><br></pre></td></tr></table></div></figure><p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200308224705.png"></p><ul><li>重启 mysql</li></ul><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql restart</span><br></pre></td></tr></table></div></figure><ul><li><p>开放 3306 端口</p><ul><li>服务器需要配置安全组规则，有防火墙需要开放 3306</li></ul></li></ul><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow 3306</span><br></pre></td></tr></table></div></figure>        <h2 id="创建用户与授权"   >          <a href="#创建用户与授权" class="heading-link"><i class="fas fa-link"></i></a>创建用户与授权</h2>      <ul><li>进入到 mysql 数据库下</li></ul><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br></pre></td></tr></table></div></figure><ul><li>对新用户增删改</li></ul><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建用户:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定ip：192.168.1.1的用户</span></span><br><span class="line">create user &#x27;username&#x27;@&#x27;192.168.1.1&#x27; identified by &#x27;password&#x27;;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定ip：192.168.1.开头的用户</span></span><br><span class="line">create user &#x27;username&#x27;@&#x27;192.168.1.%&#x27; identified by &#x27;password&#x27;;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定任何ip的用户</span></span><br><span class="line">create user &#x27;username&#x27;@&#x27;%&#x27; identified by &#x27;123&#x27;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除用户</span></span><br><span class="line">drop user &#x27;用户名&#x27;@&#x27;IP地址&#x27;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改用户</span></span><br><span class="line">rename user &#x27;用户名&#x27;@&#x27;IP地址&#x27; to &#x27;新用户名&#x27;@&#x27;IP地址&#x27;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改密码</span></span><br><span class="line">set password for &#x27;用户名&#x27;@&#x27;IP地址&#x27;=Password(&#x27;newpassword&#x27;);</span><br></pre></td></tr></table></div></figure><ul><li>用户授权管理</li></ul><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看权限</span></span><br><span class="line">show grants for &#x27;用户&#x27;@&#x27;IP地址&#x27;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 授权用户仅对db1.t1文件有查询、插入和更新的操作</span></span><br><span class="line">grant select,insert,update on db1.t1 to &#x27;username&#x27;@&#x27;%&#x27;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 授予用户db1.t1中全部权限</span></span><br><span class="line">grant all privileges on db1.t1 to &#x27;username&#x27;@&#x27;%&#x27;;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 授予用户db1中表全部权限</span></span><br><span class="line">grant all privileges on db1.* to &#x27;username&#x27;@&#x27;%&#x27;;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 授予用户所有数据库的所有表全部权限</span></span><br><span class="line">grant all privileges on *.*  to &#x27;username&#x27;@&#x27;%&#x27;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">取消权限</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 取消用户对db1.t1表全部权限</span></span><br><span class="line">revoke all on db1.t1 from &#x27;username&#x27;@&quot;%&quot;;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 取消用户对数据库db1的所有表的所有权限</span></span><br><span class="line">revoke all on db1.* from &#x27;username&#x27;@&quot;%&quot;;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 取消用户所有数据库的所有的表的权限</span></span><br><span class="line">revoke all privileges on *.* from &#x27;username&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></div></figure>        <h2 id="mysql-重置密码"   >          <a href="#mysql-重置密码" class="heading-link"><i class="fas fa-link"></i></a>mysql 重置密码</h2>      <blockquote><p>只有 Debian 或 Ubuntu 服务器才有 debian-sys-maint 用户</p></blockquote><ul><li>打开 debian.cnf 文件</li></ul><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/mysql/debian.cnf</span><br></pre></td></tr></table></div></figure><p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200308231718.png"></p><ul><li>使用文件中的用户名和密码进入 mysql</li></ul><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u debian-sys-maint -p</span><br></pre></td></tr></table></div></figure><ul><li>选择 mysql 数据库</li></ul><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br></pre></td></tr></table></div></figure><ul><li>修改密码</li></ul><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update user set authentication_string=password(&#x27;newpassword&#x27;) where user=&#x27;root&#x27;;</span><br></pre></td></tr></table></div></figure><ul><li>退出</li></ul><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></div></figure><ul><li>重启 mysql</li></ul><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql restart</span><br></pre></td></tr></table></div></figure>        <h2 id="一些常用命令"   >          <a href="#一些常用命令" class="heading-link"><i class="fas fa-link"></i></a>一些常用命令</h2>              <h3 id="建表"   >          <a href="#建表" class="heading-link"><i class="fas fa-link"></i></a>建表</h3>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database if not exists test_db default character set utf8mb4 default collate utf8mb4_0900_ai_ci;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务端 </tag>
            
            <tag> msyql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack简单上手</title>
      <link href="/2020/01/30/Webpack%E7%AE%80%E5%8D%95%E4%B8%8A%E6%89%8B/"/>
      <url>/2020/01/30/Webpack%E7%AE%80%E5%8D%95%E4%B8%8A%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<ul><li>Webpack 是一个前端资源加载/打包工具。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。</li><li>Webpack 可以将多种静态资源 js、css、less 转换成一个静态文件，减少了页面的请求<span id="more"></span></li></ul>        <h2 id="创建项目"   >          <a href="#创建项目" class="heading-link"><i class="fas fa-link"></i></a>创建项目</h2>      <blockquote><p>确保已经安装<code>node.js</code></p></blockquote><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir webpack-demo</span><br><span class="line"><span class="built_in">cd</span> webpack-demo</span><br><span class="line">npm init -y</span><br><span class="line">npm install webpack webpack-cli --save-dev</span><br></pre></td></tr></table></div></figure>        <h2 id="创建一个-bundle-文件"   >          <a href="#创建一个-bundle-文件" class="heading-link"><i class="fas fa-link"></i></a>创建一个 bundle 文件</h2>              <h3 id="目录结构"   >          <a href="#目录结构" class="heading-link"><i class="fas fa-link"></i></a>目录结构</h3>      <figure class="highlight diff"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">webpack-demo</span><br><span class="line">|- package.json</span><br><span class="line">|- /dist</span><br><span class="line">|- index.html</span><br><span class="line">|- /src</span><br><span class="line">|- index.js</span><br></pre></td></tr></table></div></figure>        <h3 id="文件内容"   >          <a href="#文件内容" class="heading-link"><i class="fas fa-link"></i></a>文件内容</h3>      <ul><li>要在 <code>index.js</code> 中打包 <code>lodash</code> 依赖，需要在本地安装 library</li><li><code>npm install --save lodash</code></li></ul><blockquote><p>在安装一个要打包到生产环境的安装包时，应该使用 <code>npm install --save</code></p><p>如果在安装一个用于开发环境的安装包（例如，linter, 测试库等），应该使用<code>npm install --save-dev</code></p></blockquote><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//src/index.js</span></span><br><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&quot;lodash&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">component</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> element = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Lodash, now imported by this script</span></span><br><span class="line">    element.innerHTML = _.join([<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;webpack&quot;</span>], <span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(component());</span><br></pre></td></tr></table></div></figure><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--dist/index.html--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>起步<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ul><li>在这个设置中，<code>index.js</code> 显式要求引入的 <code>lodash</code> 必须存在，然后将它绑定为 <code>_</code>（没有全局作用域污染）。通过声明模块所需的依赖，webpack 能够利用这些信息去构建依赖图，然后使用图生成一个优化过的，会以正确顺序执行的 bundle。</li></ul>        <h3 id="修改package-json文件"   >          <a href="#修改package-json文件" class="heading-link"><i class="fas fa-link"></i></a>修改package.json文件</h3>      <blockquote><p>删除<code>&quot;main&quot;: &quot;index.js&quot;,</code>增加<code>&quot;private&quot;: true,</code></p></blockquote><figure class="highlight json"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;webpack-demo&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;private&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;keywords&quot;</span>: [],</span><br><span class="line">    <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;webpack&quot;</span>: <span class="string">&quot;^4.0.1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;webpack-cli&quot;</span>: <span class="string">&quot;^2.0.9&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;dependencies&quot;</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="执行"   >          <a href="#执行" class="heading-link"><i class="fas fa-link"></i></a>执行</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></div></figure><ul><li>输出结果</li></ul><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Hash: 215d7236a66d425aca10</span><br><span class="line">Version: webpack 4.41.5</span><br><span class="line">Time: 2094ms</span><br><span class="line">Built at: 2020-01-30 5:15:07 PM</span><br><span class="line">  Asset      Size  Chunks             Chunk Names</span><br><span class="line">main.js  72.1 KiB       0  [emitted]  main</span><br><span class="line">Entrypoint main = main.js</span><br><span class="line">[1] ./src/index.js 274 bytes &#123;0&#125; [built]</span><br><span class="line">[2] (webpack)/buildin/global.js 472 bytes &#123;0&#125; [built]</span><br><span class="line">[3] (webpack)/buildin/module.js 497 bytes &#123;0&#125; [built]</span><br><span class="line">    + 1 hidden module</span><br></pre></td></tr></table></div></figure><p>在浏览器中打开 <code>index.html</code>，看到以下文本：’Hello webpack’</p>        <h2 id="模块"   >          <a href="#模块" class="heading-link"><i class="fas fa-link"></i></a>模块</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://babeljs.io/learn-es2015/" >ES2015</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 中的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import"><code>import</code></a> 和 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export"><code>export</code></a> 语句已经被标准化。虽然大多数浏览器还无法支持它们，但是 webpack 却能够提供开箱即用般的支持。</p><p>事实上，webpack 在幕后会将代码“转译”，以便旧版本浏览器可以执行。如果检查 <code>dist/bundle.js</code>，可以看到 webpack 具体如何实现，除了 <code>import</code> 和 <code>export</code>，webpack 还能够很好地支持多种其他模块语法</p><blockquote><p>webpack 不会更改代码中除 <code>import</code> 和 <code>export</code> 语句以外的部分。如果在使用其它 <span class="exturl"><a class="exturl__link"   href="http://es6-features.org/" >ES2015 特性</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，请确保你在 webpack 的 <span class="exturl"><a class="exturl__link"   href="https://www.webpackjs.com/concepts/loaders/" >loader 系统</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>中使用了一个像是 <span class="exturl"><a class="exturl__link"   href="https://babeljs.io/" >Babel</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 或 <span class="exturl"><a class="exturl__link"   href="https://buble.surge.sh/guide/" >Bublé</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 的<span class="exturl"><a class="exturl__link"   href="https://www.webpackjs.com/loaders/#transpiling" >转译器</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。</p></blockquote>        <h2 id="使用一个配置文件"   >          <a href="#使用一个配置文件" class="heading-link"><i class="fas fa-link"></i></a>使用一个配置文件</h2>      <p>在 webpack 4 中，可以无须任何配置使用，然而大多数项目会需要很复杂的设置，这就是为什么 webpack 仍然要支持 <span class="exturl"><a class="exturl__link"   href="https://www.webpackjs.com/concepts/configuration" >配置文件</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。</p><p>这比在终端(terminal)中手动输入大量命令要高效的多，所以创建一个取代以上使用 CLI 选项方式的配置文件</p>        <h3 id="创建配置文件"   >          <a href="#创建配置文件" class="heading-link"><i class="fas fa-link"></i></a>创建配置文件</h3>      <figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">webpack-demo</span><br><span class="line">|- package.json</span><br><span class="line">|- webpack.config.js</span><br><span class="line">|- &#x2F;dist</span><br><span class="line">|- index.html</span><br><span class="line">|- &#x2F;src</span><br><span class="line">|- index.js</span><br></pre></td></tr></table></div></figure><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">&quot;./src/index.js&quot;</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure>        <h3 id="通过配置再次构建"   >          <a href="#通过配置再次构建" class="heading-link"><i class="fas fa-link"></i></a>通过配置再次构建</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack --config webpack.config.js</span><br></pre></td></tr></table></div></figure><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Hash: c76f73db88c2b5052998</span><br><span class="line">Version: webpack 4.41.5</span><br><span class="line">Time: 354ms</span><br><span class="line">Built at: 2020-01-30 5:34:01 PM</span><br><span class="line">    Asset      Size  Chunks             Chunk Names</span><br><span class="line">bundle.js  72.1 KiB       0  [emitted]  main</span><br><span class="line">Entrypoint main = bundle.js</span><br><span class="line">[1] ./src/index.js 274 bytes &#123;0&#125; [built]</span><br><span class="line">[2] (webpack)/buildin/global.js 472 bytes &#123;0&#125; [built]</span><br><span class="line">[3] (webpack)/buildin/module.js 497 bytes &#123;0&#125; [built]</span><br><span class="line">    + 1 hidden module</span><br></pre></td></tr></table></div></figure><blockquote><p>注意，当在 windows 中通过调用路径去调用 <code>webpack</code> 时，必须使用反斜杠。例如*<code>node_modules\.bin\webpack --config webpack.config.js</code>*。</p></blockquote><blockquote><p>如果 <code>webpack.config.js</code> 存在，则 <code>webpack</code> 命令将默认选择使用它。在这里使用 <code>--config</code> 选项只是表明，可以传递任何名称的配置文件。这对于需要拆分成多个文件的复杂配置是非常有用。</p></blockquote><p>比起 CLI 这种简单直接的使用方式，配置文件具有更多的灵活性。可以通过配置方式指定 loader 规则(loader rules)、插件(plugins)、解析选项(resolve options)，以及许多其他增强功能。</p>        <h2 id="NPM-脚本-NPM-Scripts"   >          <a href="#NPM-脚本-NPM-Scripts" class="heading-link"><i class="fas fa-link"></i></a>NPM 脚本(NPM Scripts)</h2>      <p>考虑到用 CLI 这种方式来运行本地的 webpack 不是特别方便，可以设置一个快捷方式。在 <em>package.json</em> 添加一个 <span class="exturl"><a class="exturl__link"   href="https://docs.npmjs.com/misc/scripts" >npm 脚本(npm script)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>：</p><p>增加<code>&quot;build&quot;: &quot;webpack&quot;</code></p><figure class="highlight json"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;webpack-demo&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;private&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;keywords&quot;</span>: [],</span><br><span class="line">    <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;webpack&quot;</span>: <span class="string">&quot;^4.41.5&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;webpack-cli&quot;</span>: <span class="string">&quot;^3.3.10&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;lodash&quot;</span>: <span class="string">&quot;^4.17.15&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>现在，可以使用 <code>npm run build</code> 命令，来替代之前使用的 <code>npx</code> 命令</p><blockquote><p>注意，使用 npm 的 <code>scripts</code>，可以像使用 <code>npx</code> 那样通过模块名引用本地安装的 npm 包。这是大多数基于 npm 的项目遵循的标准，因为它允许所有贡献者使用同一组通用脚本（如果必要，每个 flag 都带有 <code>--config</code> 标志）</p></blockquote><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></div></figure><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; webpack-demo@1.0.0 build C:\Users\PandaLzy\Desktop\app\webpack-demo</span><br><span class="line">&gt; webpack</span><br><span class="line"></span><br><span class="line">Hash: c76f73db88c2b5052998</span><br><span class="line">Version: webpack 4.41.5</span><br><span class="line">Time: 338ms</span><br><span class="line">Built at: 2020-01-30 5:39:08 PM</span><br><span class="line">    Asset      Size  Chunks             Chunk Names</span><br><span class="line">bundle.js  72.1 KiB       0  [emitted]  main</span><br><span class="line">Entrypoint main = bundle.js</span><br><span class="line">[1] ./src/index.js 274 bytes &#123;0&#125; [built]</span><br><span class="line">[2] (webpack)/buildin/global.js 472 bytes &#123;0&#125; [built]</span><br><span class="line">[3] (webpack)/buildin/module.js 497 bytes &#123;0&#125; [built]</span><br><span class="line">    + 1 hidden module</span><br></pre></td></tr></table></div></figure><blockquote><p>通过向 <code>npm run build</code> 命令和参数之间添加两个中横线，可以将自定义参数传递给 webpack，例如：<code>npm run build -- --colors</code></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python函数式编程</title>
      <link href="/2020/01/28/Python%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
      <url>/2020/01/28/Python%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[        <h2 id="高阶函数"   >          <a href="#高阶函数" class="heading-link"><i class="fas fa-link"></i></a>高阶函数</h2>              <h3 id="map-reduce"   >          <a href="#map-reduce" class="heading-link"><i class="fas fa-link"></i></a>map/reduce</h3>      <ul><li><code>map()</code><ul><li><code>map()</code>函数接收两个参数，一个是函数，一个是<code>Iterable</code>，<code>map</code>将<strong>传入的函数依次作用到序列的每个元素</strong>，并把结果作为新的<code>Iterator</code>返回</li></ul></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> x * x</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = <span class="built_in">map</span>(f, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(r)</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">str</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]))</span><br><span class="line">[<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>]</span><br></pre></td></tr></table></div></figure><span id="more"></span><ul><li><code>reduce()</code><ul><li><code>reduce</code>把一个函数作用在一个序列<code>[x1, x2, x3, ...]</code>上，这个函数必须接收两个参数，<code>reduce</code>把结果继续和序列的下一个元素做累积计算，其效果就是</li><li><code>reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)</code></li></ul></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x, y</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> x + y</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>reduce(add, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>])</span><br><span class="line"><span class="number">25</span></span><br></pre></td></tr></table></div></figure><ul><li>把序列<code>[1, 3, 5, 7, 9]</code>变换成整数<code>13579</code></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fn</span>(<span class="params">x, y</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> x * <span class="number">10</span> + y</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>reduce(fn, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>])</span><br><span class="line"><span class="number">13579</span></span><br></pre></td></tr></table></div></figure>        <h4 id="filter"   >          <a href="#filter" class="heading-link"><i class="fas fa-link"></i></a>filter</h4>      <ul><li><code>filter()</code>函数用于过滤序列</li><li><code>filter()</code>把传入的函数依次作用于每个元素，然后根据返回值是<code>True</code>还是<code>False</code>决定保留还是丢弃该元素</li><li>在一个 list 中，删掉偶数，只保留奇数</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_odd</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">filter</span>(is_odd, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">15</span>]))</span><br><span class="line"><span class="comment"># 结果: [1, 5, 9, 15]</span></span><br></pre></td></tr></table></div></figure><ul><li>把一个序列中的空字符串删掉</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">not_empty</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> s <span class="keyword">and</span> s.strip()</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">filter</span>(not_empty, [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="literal">None</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;  &#x27;</span>]))</span><br><span class="line"><span class="comment"># 结果: [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]</span></span><br></pre></td></tr></table></div></figure>        <h4 id="sorted"   >          <a href="#sorted" class="heading-link"><i class="fas fa-link"></i></a>sorted</h4>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>([<span class="number">36</span>, <span class="number">5</span>, -<span class="number">12</span>, <span class="number">9</span>, -<span class="number">21</span>])</span><br><span class="line">[-<span class="number">21</span>, -<span class="number">12</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">36</span>]</span><br></pre></td></tr></table></div></figure><ul><li><code>sorted()</code>函数也是一个高阶函数，它还可以接收一个<code>key</code>函数来实现自定义的排序，例如按绝对值大小排序</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>([<span class="number">36</span>, <span class="number">5</span>, -<span class="number">12</span>, <span class="number">9</span>, -<span class="number">21</span>], key=<span class="built_in">abs</span>)</span><br><span class="line">[<span class="number">5</span>, <span class="number">9</span>, -<span class="number">12</span>, -<span class="number">21</span>, <span class="number">36</span>]</span><br></pre></td></tr></table></div></figure><ul><li>字符串排序</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>([<span class="string">&#x27;bob&#x27;</span>, <span class="string">&#x27;about&#x27;</span>, <span class="string">&#x27;Zoo&#x27;</span>, <span class="string">&#x27;Credit&#x27;</span>])</span><br><span class="line">[<span class="string">&#x27;Credit&#x27;</span>, <span class="string">&#x27;Zoo&#x27;</span>, <span class="string">&#x27;about&#x27;</span>, <span class="string">&#x27;bob&#x27;</span>]</span><br></pre></td></tr></table></div></figure><blockquote><p>默认情况下，对字符串排序，是按照 ASCII 从小到大排序</p></blockquote><ul><li>给<code>sorted</code>传入 key 函数，即可实现忽略大小写的排序</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>([<span class="string">&#x27;bob&#x27;</span>, <span class="string">&#x27;about&#x27;</span>, <span class="string">&#x27;Zoo&#x27;</span>, <span class="string">&#x27;Credit&#x27;</span>], key=<span class="built_in">str</span>.lower)</span><br><span class="line">[<span class="string">&#x27;about&#x27;</span>, <span class="string">&#x27;bob&#x27;</span>, <span class="string">&#x27;Credit&#x27;</span>, <span class="string">&#x27;Zoo&#x27;</span>]</span><br></pre></td></tr></table></div></figure><ul><li>要进行反向排序，不必改动 key 函数，可以传入第三个参数<code>reverse=True</code></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>([<span class="string">&#x27;bob&#x27;</span>, <span class="string">&#x27;about&#x27;</span>, <span class="string">&#x27;Zoo&#x27;</span>, <span class="string">&#x27;Credit&#x27;</span>], key=<span class="built_in">str</span>.lower, reverse=<span class="literal">True</span>)</span><br><span class="line">[<span class="string">&#x27;Zoo&#x27;</span>, <span class="string">&#x27;Credit&#x27;</span>, <span class="string">&#x27;bob&#x27;</span>, <span class="string">&#x27;about&#x27;</span>]</span><br></pre></td></tr></table></div></figure>        <h2 id="返回函数"   >          <a href="#返回函数" class="heading-link"><i class="fas fa-link"></i></a>返回函数</h2>              <h3 id="函数作为返回值"   >          <a href="#函数作为返回值" class="heading-link"><i class="fas fa-link"></i></a>函数作为返回值</h3>      <ul><li><p>高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回</p></li><li><p>如果不需要立刻求和，而是在后面的代码中，根据需要再计算</p></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lazy_sum</span>(<span class="params">*args</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sum</span>():</span></span><br><span class="line">        ax = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> args:</span><br><span class="line">            ax = ax + n</span><br><span class="line">        <span class="keyword">return</span> ax</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br></pre></td></tr></table></div></figure><ul><li>当调用<code>lazy_sum()</code>时，返回的并不是求和结果，而是求和函数</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = lazy_sum(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f</span><br><span class="line">&lt;function lazy_sum.&lt;<span class="built_in">locals</span>&gt;.<span class="built_in">sum</span> at <span class="number">0x101c6ed90</span>&gt;</span><br></pre></td></tr></table></div></figure><ul><li>调用函数<code>f</code>时，才真正计算求和的结果</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f()</span><br><span class="line"><span class="number">25</span></span><br></pre></td></tr></table></div></figure>        <h3 id="闭包"   >          <a href="#闭包" class="heading-link"><i class="fas fa-link"></i></a>闭包</h3>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span>():</span></span><br><span class="line">    fs = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">             <span class="keyword">return</span> i*i</span><br><span class="line">        fs.append(f)</span><br><span class="line">    <span class="keyword">return</span> fs</span><br><span class="line"></span><br><span class="line">f1, f2, f3 = count()</span><br></pre></td></tr></table></div></figure><ul><li>在上面的例子中，每次循环，都创建了一个新的函数，然后，把创建的 3 个函数都返回了</li><li>可能认为调用<code>f1()</code>，<code>f2()</code>和<code>f3()</code>结果应该是<code>1</code>，<code>4</code>，<code>9</code>，但实际结果是</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1()</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f2()</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f3()</span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></div></figure><ul><li>全部都是<code>9</code>！原因就在于返回的函数引用了变量<code>i</code>，但它并非立刻执行。等到 3 个函数都返回时，它们所引用的变量<code>i</code>已经变成了<code>3</code>，因此最终结果为<code>9</code></li></ul><blockquote><p>返回函数不要引用任何循环变量，或者后续会发生变化的变量</p></blockquote><ul><li>如果一定要引用循环变量怎么办？方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到函数参数的值不变</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">j</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">g</span>():</span></span><br><span class="line">            <span class="keyword">return</span> j*j</span><br><span class="line">        <span class="keyword">return</span> g</span><br><span class="line">    fs = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">        fs.append(f(i)) <span class="comment"># f(i)立刻被执行，因此i的当前值被传入f()</span></span><br><span class="line">    <span class="keyword">return</span> fs</span><br></pre></td></tr></table></div></figure><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1, f2, f3 = count()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1()</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f2()</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f3()</span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></div></figure>        <h2 id="匿名函数"   >          <a href="#匿名函数" class="heading-link"><i class="fas fa-link"></i></a>匿名函数</h2>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x * x, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]))</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br></pre></td></tr></table></div></figure><ul><li>匿名函数<code>lambda x: x * x</code>实际上就是</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x * x</span><br></pre></td></tr></table></div></figure><ul><li>关键字<code>lambda</code>表示匿名函数，冒号前面的<code>x</code>表示函数参数</li><li>匿名函数有个限制，就是只能有一个表达式，不用写<code>return</code>，返回值就是该表达式的结果</li><li>用匿名函数有个好处，因为函数没有名字，不必担心函数名冲突。此外，匿名函数也是一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="keyword">lambda</span> x: x * x</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f</span><br><span class="line">&lt;function &lt;<span class="keyword">lambda</span>&gt; at <span class="number">0x101c6ef28</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">5</span>)</span><br><span class="line"><span class="number">25</span></span><br></pre></td></tr></table></div></figure><ul><li>也可以把匿名函数作为返回值返回</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span>: x * x + y * y</span><br></pre></td></tr></table></div></figure>        <h2 id="装饰器"   >          <a href="#装饰器" class="heading-link"><i class="fas fa-link"></i></a>装饰器</h2>      <ul><li>由于函数也是一个对象，而且函数对象可以被赋值给变量，所以，通过变量也能调用该函数</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">now</span>():</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&#x27;2015-3-25&#x27;</span>)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = now</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f()</span><br><span class="line"><span class="number">2015</span>-<span class="number">3</span>-<span class="number">25</span></span><br></pre></td></tr></table></div></figure><ul><li>函数对象有一个<code>__name__</code>属性，可以拿到函数的名字</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>now.__name__</span><br><span class="line"><span class="string">&#x27;now&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.__name__</span><br><span class="line"><span class="string">&#x27;now&#x27;</span></span><br></pre></td></tr></table></div></figure><ul><li>现在，假设要增强<code>now()</code>函数的功能，比如，在函数调用前后自动打印日志，但又不希望修改<code>now()</code>函数的定义，这种在代码运行期间动态增加功能的方式，称之为“装饰器”（Decorator）</li><li>本质上，decorator 就是一个返回函数的高阶函数。所以，要定义一个能打印日志的 decorator，可以定义如下</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kw</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;call %s():&#x27;</span> % func.__name__)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></div></figure><ul><li>观察上面的<code>log</code>，因为它是一个 decorator，所以接受一个函数作为参数，并返回一个函数。要借助 Python 的**@语法**，把 decorator 置于函数的定义处</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@log</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;2015-3-25&#x27;</span>)</span><br></pre></td></tr></table></div></figure><ul><li>调用<code>now()</code>函数，不仅会运行<code>now()</code>函数本身，还会在运行<code>now()</code>函数前打印一行日志</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>now()</span><br><span class="line">call now():</span><br><span class="line"><span class="number">2015</span>-<span class="number">3</span>-<span class="number">25</span></span><br></pre></td></tr></table></div></figure><ul><li>把<code>@log</code>放到<code>now()</code>函数的定义处，相当于执行了语句<code>now = log(now)</code></li><li>由于<code>log()</code>是一个 decorator，返回一个函数，所以，原来的<code>now()</code>函数仍然存在，只是现在同名的<code>now</code>变量指向了新的函数，于是调用<code>now()</code>将执行新函数，即在<code>log()</code>函数中返回的<code>wrapper()</code>函数</li><li><code>wrapper()</code>函数的参数定义是<code>(*args, **kw)</code>，因此，<code>wrapper()</code>函数可以接受任意参数的调用。在<code>wrapper()</code>函数内，首先打印日志，再紧接着调用原始函数</li><li>如果 decorator 本身需要传入参数，那就需要编写一个返回 decorator 的高阶函数，写出来会更复杂。比如，要自定义 log 的文本</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span>(<span class="params">text</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">func</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kw</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s %s():&#x27;</span> % (text, func.__name__))</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br></pre></td></tr></table></div></figure><ul><li>这个 3 层嵌套的 decorator 用法如下</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@log(<span class="params"><span class="string">&#x27;execute&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;2015-3-25&#x27;</span>)</span><br></pre></td></tr></table></div></figure><ul><li>执行结果如下</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>now()</span><br><span class="line">execute now():</span><br><span class="line"><span class="number">2015</span>-<span class="number">3</span>-<span class="number">25</span></span><br></pre></td></tr></table></div></figure><ul><li><p>3 层嵌套的效果<code>now = log(&#39;execute&#39;)(now)</code></p></li><li><p>首先执行<code>log(&#39;execute&#39;)</code>，返回的是<code>decorator</code>函数，再调用返回的函数，参数是<code>now</code>函数，返回值最终是<code>wrapper</code>函数</p></li><li><p>但经过 decorator 装饰之后的函数，它们的<code>__name__</code>已经从原来的<code>&#39;now&#39;</code>变成了<code>&#39;wrapper&#39;</code></p></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>now.__name__</span><br><span class="line"><span class="string">&#x27;wrapper&#x27;</span></span><br></pre></td></tr></table></div></figure><ul><li><p>因为返回的那个<code>wrapper()</code>函数名字就是<code>&#39;wrapper&#39;</code>，所以，需要把原始函数的<code>__name__</code>等属性复制到<code>wrapper()</code>函数中，否则，有些依赖函数签名的代码执行就会出错</p></li><li><p>Python 内置的<code>functools.wraps</code>可以进行此操作</p></li><li><p>一个完整的 decorator 的写法如下</p></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">    @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kw</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;call %s():&#x27;</span> % func.__name__)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></div></figure><ul><li>针对带参数的 decorator</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span>(<span class="params">text</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">        @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kw</span>):</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s %s():&#x27;</span> % (text, func.__name__))</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br></pre></td></tr></table></div></figure>        <h2 id="偏函数"   >          <a href="#偏函数" class="heading-link"><i class="fas fa-link"></i></a>偏函数</h2>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="string">&#x27;12345&#x27;</span>)</span><br><span class="line"><span class="number">12345</span></span><br><span class="line"><span class="comment"># 如果传入base参数，就可以做N进制的转换</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="string">&#x27;12345&#x27;</span>, base=<span class="number">8</span>)</span><br><span class="line"><span class="number">5349</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="string">&#x27;12345&#x27;</span>, <span class="number">16</span>)</span><br><span class="line"><span class="number">74565</span></span><br></pre></td></tr></table></div></figure><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">int2</span>(<span class="params">x, base=<span class="number">2</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(x, base)</span><br></pre></td></tr></table></div></figure><ul><li><code>functools.partial</code>就是帮助创建一个偏函数的，不需要自己定义<code>int2()</code>，可以直接使用下面的代码创建一个新的函数<code>int2</code></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> functools</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int2 = functools.partial(<span class="built_in">int</span>, base=<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int2(<span class="string">&#x27;1000000&#x27;</span>)</span><br><span class="line"><span class="number">64</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int2(<span class="string">&#x27;1010101&#x27;</span>)</span><br><span class="line"><span class="number">85</span></span><br></pre></td></tr></table></div></figure><ul><li>所以，简单总结<code>functools.partial</code>的作用就是，把一个函数的某些参数给固定住（也就是设置默认值），返回一个新的函数，调用这个新函数会更简单</li><li>注意到上面的新的<code>int2</code>函数，仅仅是把<code>base</code>参数重新设定默认值为<code>2</code>，但也可以在函数调用时传入其他值</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>int2(<span class="string">&#x27;1000000&#x27;</span>, base=<span class="number">10</span>)</span><br><span class="line"><span class="number">1000000</span></span><br></pre></td></tr></table></div></figure><ul><li>最后，创建偏函数时，实际上可以接收函数对象、<code>*args</code>和<code>**kw</code>这 3 个参数，当传入：</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int2 = functools.partial(<span class="built_in">int</span>, base=<span class="number">2</span>)</span><br></pre></td></tr></table></div></figure><ul><li>实际上固定了 int()函数的关键字参数<code>base</code>，也就是：</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int2(<span class="string">&#x27;10010&#x27;</span>)</span><br><span class="line"><span class="comment"># 相当于</span></span><br><span class="line">kw = &#123; <span class="string">&#x27;base&#x27;</span>: <span class="number">2</span> &#125;</span><br><span class="line"><span class="built_in">int</span>(<span class="string">&#x27;10010&#x27;</span>, **kw)</span><br></pre></td></tr></table></div></figure><ul><li>当传入：</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max2 = functools.partial(<span class="built_in">max</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></div></figure><ul><li>实际上会把<code>10</code>作为<code>*args</code>的一部分自动加到左边，也就是：</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">max2(<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)</span><br><span class="line"><span class="comment"># 相当于</span></span><br><span class="line">args = (<span class="number">10</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)</span><br><span class="line"><span class="built_in">max</span>(*args)</span><br><span class="line"><span class="comment"># 10</span></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软工常见模型</title>
      <link href="/2020/01/03/%E8%BD%AF%E5%B7%A5%E5%B8%B8%E8%A7%81%E6%A8%A1%E5%9E%8B/"/>
      <url>/2020/01/03/%E8%BD%AF%E5%B7%A5%E5%B8%B8%E8%A7%81%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[        <h2 id="瀑布模型"   >          <a href="#瀑布模型" class="heading-link"><i class="fas fa-link"></i></a>瀑布模型</h2>      <ul><li>特点<ul><li>阶段性的顺序性和依赖性<ul><li>各项活动严格按照线性方式进行，当前活动接受上一项活动的工作结果，完成所需要的工作内容。</li></ul></li><li>推迟实现<ul><li>在软件设计阶段只考虑系统的逻辑模型，等到编码阶段再来完成程序清单</li></ul></li><li>保证质量 - 每一阶段都必须完成规定的文档并对文档进行复审<span id="more"></span></li></ul></li><li>优点<ul><li>可迫使开发人员采用规范的方法</li><li>严格地规定了每个阶段必须提交的文档</li><li>要求每个阶段交出的所有产品都必须经过质量保证小组的仔细验证</li></ul></li><li>缺点<ul><li>在可运行的软件产品交付给用户之前，用户只能通过文档来了解产品是什么样的</li><li>要求用户不经过实践就提出完整准确的需求，在许多情况下都是不切实际的</li><li>瀑布模型几乎完全依赖与书面的规格说明，很有可能导致最终开发出来的软件无法真正满足用户的需要</li></ul></li><li>适用范围<ul><li>适用于需求明了且时间要求宽松的软件开发项目或者规模小，需求简单，功能单一的项目</li></ul></li></ul>        <h2 id="快速原型模型"   >          <a href="#快速原型模型" class="heading-link"><i class="fas fa-link"></i></a>快速原型模型</h2>      <ul><li>特点<ul><li>快速建立起在计算机上可以运行的程序，它所完成的功能往往是最终产品的一个子集，其主要目的是确定客户需求</li></ul></li><li>优点<ul><li>克服了瀑布模型的缺点，减少软件需求不明确带来的开发风险</li><li>软件产品的开发基本上是按线性顺序进行的</li><li>有助于保证用户的真实需要得到满足</li></ul></li><li>缺点<ul><li>快速建立起来的系统结构加上连续的修改可能导致软件质量低下</li><li>所用的开发技术和工具不一定符合主流</li></ul></li><li>适用范围<ul><li>适用于客户能提出一般性目标，但不能详细描述输入输出需求的项目</li></ul></li></ul>        <h2 id="增量模型"   >          <a href="#增量模型" class="heading-link"><i class="fas fa-link"></i></a>增量模型</h2>      <ul><li>特点<ul><li>融合了瀑布模型的基本成分和原型模型的迭代特征，采用随着日程时间进展而交错的线性序列，把软件产品作为一系列增量来构建设计</li></ul></li><li>优点<ul><li>能在较短时间内向用户提交可完成的一些有用的产品</li><li>逐步增加产品功能可以使用户有较充裕的时间学习和适应新产品，从而减少一个全新软件可能给客户组带来的冲击</li><li>开发人员分配灵活</li></ul></li><li>缺点<ul><li>并行开发构件有可能遇到不能集成的风险，软件必须具备开放式的体系结构</li></ul></li><li>适用范围<ul><li>适用于已有产品的升级或新版本的开发</li><li>完成期限有严格要求</li><li>对开发领域比较熟悉或者有原型系统</li></ul></li></ul>        <h2 id="螺旋模型"   >          <a href="#螺旋模型" class="heading-link"><i class="fas fa-link"></i></a>螺旋模型</h2>      <ul><li>特点<ul><li>将瀑布模型和原型模型结合起来，是典型的迭代模型，并加入两种模型都忽略的风险分析，其特点是风险驱动，关注风险</li></ul></li><li>优点<ul><li>灵活性，可以在项目的各个阶段进行变更</li><li>客户始终参与每个阶段的开发，保证项目不偏离正确方向</li><li>对可选方案和约束条件的强调有利于已有软件的重用</li><li>也有助于把软件质量作为软件开发的一个重要目标</li><li>减少了过多测试或测试不足所带来的风险</li></ul></li><li>缺点<ul><li>需要有相当丰富的风险评估经验和专业知识，否则风险处理不当会造成损失</li></ul></li><li>适用范围<ul><li>适用于大规模软件项目，需求不明朗和风险比较高的项目</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 课程学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机程序设计语言原理概念重点</title>
      <link href="/2019/12/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80%E5%8E%9F%E7%90%86%E6%A6%82%E5%BF%B5%E9%87%8D%E7%82%B9/"/>
      <url>/2019/12/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80%E5%8E%9F%E7%90%86%E6%A6%82%E5%BF%B5%E9%87%8D%E7%82%B9/</url>
      
        <content type="html"><![CDATA[        <h2 id="第一章——基本概念"   >          <a href="#第一章——基本概念" class="heading-link"><i class="fas fa-link"></i></a>第一章——基本概念</h2>              <h3 id="语言的评价标准"   >          <a href="#语言的评价标准" class="heading-link"><i class="fas fa-link"></i></a>语言的评价标准</h3>      <ul><li>可读性</li><li>可写性</li><li>可靠性</li><li>代价</li></ul><span id="more"></span>        <h3 id="可读性中正交性"   >          <a href="#可读性中正交性" class="heading-link"><i class="fas fa-link"></i></a>可读性中正交性</h3>      <ul><li>使用该语言中<strong>一组相对少量</strong>的基本结构，经过少量的结合步骤，就可以构成该语言的<strong>控制结构和数据结构</strong>，而且它的基本结构的任何组合都是合法和有意义的。</li></ul>        <h3 id="语言的分类"   >          <a href="#语言的分类" class="heading-link"><i class="fas fa-link"></i></a>语言的分类</h3>      <ul><li>命令式语言</li><li>函数式语言</li><li>逻辑语言</li><li>面向对象语言</li></ul>        <h3 id="影响语言设计的因素"   >          <a href="#影响语言设计的因素" class="heading-link"><i class="fas fa-link"></i></a>影响语言设计的因素</h3>      <ul><li>计算机体系结构</li><li>程序设计方法学</li></ul>        <h2 id="第二章——发展史"   >          <a href="#第二章——发展史" class="heading-link"><i class="fas fa-link"></i></a>第二章——发展史</h2>      <ul><li>第一个高级语言：Fortran</li><li>第一个具有结构化和接口化的语言：Algol 60</li><li>第一个面向对象的语言：SIMULA 67</li><li>美国国防部耗资巨大创建的语言：Ada</li><li>第一个纯面向对象的语言：Smalltalk</li><li>两个早期的动态语言：APL、SNOBOL</li></ul>        <h2 id="第五章——名字、绑定等"   >          <a href="#第五章——名字、绑定等" class="heading-link"><i class="fas fa-link"></i></a>第五章——名字、绑定等</h2>              <h3 id="关键字、保留字与预定义名字"   >          <a href="#关键字、保留字与预定义名字" class="heading-link"><i class="fas fa-link"></i></a>关键字、保留字与预定义名字</h3>      <ul><li>关键字<ul><li>在特定的上下文中是特殊的</li><li>（Fortran 中，<code>real a</code>是声明语句，<code>a = 3.4</code>是赋值语句）</li><li>缺点：可读性差</li></ul></li><li>保留字<ul><li>一个特殊的字，不能作为用户自定义名字</li></ul></li><li>预定义名字<ul><li>介于关键字与保留字</li><li>有预定义的意义，但是能被用户重新定义</li></ul></li></ul>        <h3 id="变量"   >          <a href="#变量" class="heading-link"><i class="fas fa-link"></i></a>变量</h3>      <ul><li>是抽象的内存单元</li><li><strong>有六个属性：名字、地址、值、类型、生命周期与范围</strong>（匿名的无名字）</li></ul>        <h3 id="别名（aliases）"   >          <a href="#别名（aliases）" class="heading-link"><i class="fas fa-link"></i></a>别名（aliases）</h3>      <ul><li><p>如果两个变量名字能访问同一内存地址，他们就被叫做别名</p></li><li><p>缺点</p><ul><li>可读性差</li><li>可靠性差</li></ul></li><li><p>别名如何被创造</p><ul><li>指针、引用变量、C 和 C ++联合</li><li>别名的某些原始理由不再有效</li><li>用动态分配替换它们</li></ul></li></ul>        <h3 id="左值、右值"   >          <a href="#左值、右值" class="heading-link"><i class="fas fa-link"></i></a>左值、右值</h3>      <ul><li><p>左值</p><ul><li>变量的内存地址</li></ul></li><li><p>右值</p><ul><li>变量的值</li></ul></li></ul>        <h3 id="类型"   >          <a href="#类型" class="heading-link"><i class="fas fa-link"></i></a>类型</h3>      <ul><li>决定变量值的范围</li><li>根据类型为变量设定操作集合</li><li>在浮点指针中，类型也决定精确度</li></ul>        <h3 id="抽象内存单元"   >          <a href="#抽象内存单元" class="heading-link"><i class="fas fa-link"></i></a>抽象内存单元</h3>      <ul><li>单元格具有与其关联的变量所需的大小</li></ul>        <h3 id="绑定"   >          <a href="#绑定" class="heading-link"><i class="fas fa-link"></i></a>绑定</h3>      <ul><li>是一种关联（属性和实体、操作和符号）</li><li><strong>静态绑定</strong><ul><li>它首次发生在运行前，并且整个程序运行过程中保持不变</li></ul></li><li><strong>动态绑定</strong><ul><li>它首次放生在运行时，或者在程序执行过程中可以改变</li></ul></li><li>显式声明<ul><li>一个被用作声明变量类型的说明语句</li></ul></li><li>隐式声明<ul><li>一个默认的机制，用来指明变量的类型</li></ul></li></ul>        <h3 id="存储绑定与生命周期"   >          <a href="#存储绑定与生命周期" class="heading-link"><i class="fas fa-link"></i></a>存储绑定与生命周期</h3>      <ul><li><p><strong>静态变量</strong></p><ul><li>在程序执行前绑定在存储单元，在整个执行过程中都绑定在同一存储单元的变量</li><li><strong>优点</strong><ul><li>高效、历史敏感</li></ul></li><li><strong>缺点</strong><ul><li>不灵活</li></ul></li></ul></li><li><p><strong>栈动态变量</strong></p><ul><li>当确立他们的声明语句时即产生了存储绑定，但它们的类型时静态绑定的变量</li><li>当子程序开始执行之时，才绑定到存储空间，并且执行终止时才解除这种绑定的变量</li></ul></li><li><p><strong>生命周期</strong></p><ul><li>该变量被绑定于某一特定存储地址的时间</li></ul></li></ul>        <h3 id="类型检测"   >          <a href="#类型检测" class="heading-link"><i class="fas fa-link"></i></a>类型检测</h3>      <ul><li><p>是保证一个操作符的所有操作数都具有相互兼容类型的措施</p><ul><li>兼容类型时对操作符而言为合法的类型，或者在语言规定的允许下，能够被编译器隐式转换为合法类型</li></ul></li><li><p><strong>类型错误</strong></p><ul><li>是将操作符作用于具有不适当类型的操作数</li><li>如果在一种语言中，所有变量类型的绑定都是静态的，那么几乎总是能够静态地进行类型检测</li><li>动态类型的绑定要求在运行时进行类型检测，这种类型检测被称为<strong>动态类型检测</strong></li></ul></li></ul>        <h3 id="类型强化"   >          <a href="#类型强化" class="heading-link"><i class="fas fa-link"></i></a>类型强化</h3>      <ul><li>只要某个程序设计语言总能够发现其程序中的类型错误，就定义这种程序设计语言为强类型的</li><li><strong>优点</strong><ul><li>能够发现所有因为变量的误用而导致的类型错误</li></ul></li></ul>        <h2 id="第六章——数据类型"   >          <a href="#第六章——数据类型" class="heading-link"><i class="fas fa-link"></i></a>第六章——数据类型</h2>              <h3 id="悬挂指针"   >          <a href="#悬挂指针" class="heading-link"><i class="fas fa-link"></i></a>悬挂指针</h3>      <ul><li><p>是一个包含了已解除分配的堆动态变量地址的指针</p></li><li><p><strong>危害</strong></p><ul><li>悬挂指针指向的位置可能已经被重新分配给一个新的动态变量，新堆动态变量的值就会被破坏，存储管理的失败</li></ul></li><li><p>产生</p><ul><li>设指针 p1 指向一个新的堆动态变量</li><li>给指针 p2 赋以 p1 的值</li><li>将 p1 所指向的堆动态变量显式回收，并将 p1 变为 null，但是这种操作并不改变 p2，p2 现在成为一个悬挂指针。如果回收操作不改变 p1，p1 和 p2 都将是悬挂的</li></ul></li></ul>        <h2 id="第七章——表达式与赋值语句"   >          <a href="#第七章——表达式与赋值语句" class="heading-link"><i class="fas fa-link"></i></a>第七章——表达式与赋值语句</h2>              <h3 id="操作符重载"   >          <a href="#操作符重载" class="heading-link"><i class="fas fa-link"></i></a>操作符重载</h3>      <ul><li><p>一个操作符的多种用途</p></li><li><p>危害</p><ul><li>影响可读性</li><li>有些问题编译器无法检测，如<code>x = a(a漏写) &amp; b</code></li></ul></li></ul>        <h2 id="第九章——子程序"   >          <a href="#第九章——子程序" class="heading-link"><i class="fas fa-link"></i></a>第九章——子程序</h2>      <ul><li>一种程序设计语言可以包括两种基本的抽象设施<ul><li>过程抽象</li><li>数据抽象</li></ul></li></ul>        <h3 id="通用子程序特点（General-subprogram-characteristics）"   >          <a href="#通用子程序特点（General-subprogram-characteristics）" class="heading-link"><i class="fas fa-link"></i></a>通用子程序特点（General subprogram characteristics）</h3>      <ul><li>每一个子程序都有一个入口</li><li>在被调用的子程序执行期间，调用程序单元被停止执行，这意味着在任何给定时刻，只有一个子程序在执行</li><li>在子程序的结束时，总是将控制返回到调用程序</li></ul>        <h3 id="基本定义"   >          <a href="#基本定义" class="heading-link"><i class="fas fa-link"></i></a>基本定义</h3>      <ul><li><p><strong>参数描述（profile）</strong></p><ul><li>它所具有的形参数目、次序以及类型</li></ul></li><li><p><strong>协议</strong></p><ul><li>参数描述加上它的返回类型，如果它是函数</li></ul></li><li><p><strong>原型</strong></p><ul><li>子程序的声明</li></ul></li></ul>        <h3 id="参数"   >          <a href="#参数" class="heading-link"><i class="fas fa-link"></i></a>参数</h3>      <p><strong>形参：</strong>子程序首部中的参数</p><p><strong>实参：</strong>一组将与子程序中的形参相绑定的参数</p><p><strong>位置参数：</strong>形参与实参的绑定是通过简单的位置进行的</p><p><strong>关键字参数：</strong>将一个与实参相绑定的形参的名称与这个实参在一起被声明，如<code>post(url=post_url,data=post_data)</code> 缺点：使用人员必须知道形参的名字</p>        <h3 id="局部变量"   >          <a href="#局部变量" class="heading-link"><i class="fas fa-link"></i></a>局部变量</h3>      <ul><li>定义于子程序内部的变量</li></ul>        <h4 id="栈动态"   >          <a href="#栈动态" class="heading-link"><i class="fas fa-link"></i></a>栈动态</h4>      <ul><li><p>优</p><ul><li>为子程序提供了灵活性</li><li>与局部变量的存储空间可共享</li></ul></li><li><p>缺</p><ul><li>在存储空间分配、初始化、变量解除分配有时间花费</li><li>栈动态局部变量的存取必须是间接的</li><li>不是历史敏感的</li></ul></li></ul>        <h4 id="静态"   >          <a href="#静态" class="heading-link"><i class="fas fa-link"></i></a>静态</h4>      <ul><li><p>优</p><ul><li>高效，直接存取局部变量</li><li>分配与解除分配没有额外的时间代价</li><li>具有历史敏感敏感性</li></ul></li><li><p>缺</p><ul><li>不灵活，不支持递归运算</li><li>存储空间不能与局部变量共享</li></ul></li></ul>        <h3 id="参数传递方法"   >          <a href="#参数传递方法" class="heading-link"><i class="fas fa-link"></i></a>参数传递方法</h3>      <ul><li>按值传递</li><li>按结果传递</li><li>按值-结果传递</li><li>按引用传递</li><li>按名传递</li></ul>        <h3 id="重载子程序"   >          <a href="#重载子程序" class="heading-link"><i class="fas fa-link"></i></a>重载子程序</h3>      <ul><li>是与另一个在相同引用环境中的子程序具有相同名称的子程序</li><li>它必须与子程序的其他版本在参数的数目、顺序、类型不相同</li><li>如果是一个函数，则是返回的类型不同</li></ul>        <h3 id="分别编译"   >          <a href="#分别编译" class="heading-link"><i class="fas fa-link"></i></a>分别编译</h3>      <ul><li>编译单元能在不同时间被编译，但是如果访问或使用其他实体，则编译不是独立的</li><li>为了提供分别编译的可靠性，编译器必须访问程序单元用到的，但是在别处声明的实体</li><li>通过独立编译，程序单元能在不知道其他程序单元的情况下被编译</li><li>最大特点<ul><li>在分别编译单元之间的接口不进行类型一致检查</li></ul></li></ul>        <h3 id="非局部、全局变量"   >          <a href="#非局部、全局变量" class="heading-link"><i class="fas fa-link"></i></a>非局部、全局变量</h3>      <ul><li>局部变量<ul><li>在子程序中可见，但不是局部声明的</li></ul></li><li>全局变量<ul><li>在程序单元中都可见的变量</li></ul></li></ul>        <h2 id="第十章——实现子程序"   >          <a href="#第十章——实现子程序" class="heading-link"><i class="fas fa-link"></i></a>第十章——实现子程序</h2>              <h3 id="子程序链接"   >          <a href="#子程序链接" class="heading-link"><i class="fas fa-link"></i></a>子程序链接</h3>      <ul><li>子程序的调用及返回操作的统称</li></ul>        <h3 id="子程序调用过程"   >          <a href="#子程序调用过程" class="heading-link"><i class="fas fa-link"></i></a>子程序调用过程</h3>      <ol><li>如果局部变量是非静态的，它必须对局部变量进行存储空间分配，还要将这些变量与存储空间绑定</li><li>必须保留调用程序单元的执行状态</li><li>将控制转移到子程序的代码，并且在子程序结束后能保证将控制返回正确位置</li><li>提供对被调用子程序为可见的非局部变量的访问</li></ol>        <h3 id="子程序的返回过程"   >          <a href="#子程序的返回过程" class="heading-link"><i class="fas fa-link"></i></a>子程序的返回过程</h3>      <ol><li>将形参的局部值转移到相关联的实参上</li><li>解除分配局部变量占有的存储空间，并恢复调用程序的执行状态</li><li>将非局部引用的机制返回到调用之前的状态</li><li>必须将控制返回到调用程序</li></ol>        <h2 id="第十一章——抽象与封装"   >          <a href="#第十一章——抽象与封装" class="heading-link"><i class="fas fa-link"></i></a>第十一章——抽象与封装</h2>              <h3 id="基本抽象类型"   >          <a href="#基本抽象类型" class="heading-link"><i class="fas fa-link"></i></a>基本抽象类型</h3>      <ul><li>过程抽象</li><li>数据抽象</li></ul>        <h3 id="封装"   >          <a href="#封装" class="heading-link"><i class="fas fa-link"></i></a>封装</h3>      <ul><li>将子程序与它们所用的数据组合</li><li>好处<ul><li>解决模块化问题</li><li>解决重新编译问题</li></ul></li></ul>        <h3 id="抽象数据类型（封装）"   >          <a href="#抽象数据类型（封装）" class="heading-link"><i class="fas fa-link"></i></a>抽象数据类型（封装）</h3>      <ul><li>仅包含一种特定数据类型的数据表示形式，以及提供该类型操作的子程序</li><li>优点<ul><li>对抗复杂性的武器</li><li>一种使大型和/或复杂程序更易于管理的方法</li></ul></li><li>示例<ul><li>Ada 封装结构为——包</li><li>C++——类和结构</li><li>Java——类</li></ul></li></ul>        <h2 id="第十三章——并发"   >          <a href="#第十三章——并发" class="heading-link"><i class="fas fa-link"></i></a>第十三章——并发</h2>              <h3 id="并发种类"   >          <a href="#并发种类" class="heading-link"><i class="fas fa-link"></i></a>并发种类</h3>      <ul><li>物理并发<ul><li>有着多个处理器可供使用，并且来自相同程序的几个程序单位同时地运行</li></ul></li><li>逻辑并发<ul><li>程序是在一个处理器上被分时地执行</li></ul></li></ul>        <h3 id="准并发"   >          <a href="#准并发" class="heading-link"><i class="fas fa-link"></i></a>准并发</h3>      <ul><li>具有协同（coroutines）的程序</li></ul>        <h3 id="控制线（Thread-of-control）"   >          <a href="#控制线（Thread-of-control）" class="heading-link"><i class="fas fa-link"></i></a>控制线（Thread of control）</h3>      <ul><li>控制流经过程序时到达程序点的序列</li></ul>        <h3 id="同步"   >          <a href="#同步" class="heading-link"><i class="fas fa-link"></i></a>同步</h3>      <ul><li>合作同步<ul><li>当任务 A 在继续它的执行之前，它必须等待任务 B 完成某种特定活动</li></ul></li><li>竞争同步<ul><li>当两个任务都需要不可能同时使用的某种资源</li></ul></li></ul>        <h3 id="信号量"   >          <a href="#信号量" class="heading-link"><i class="fas fa-link"></i></a>信号量</h3>      <ul><li>一种能够用来提供任务同步的简单机制<ul><li>一种数据结构</li><li>由一个整数和一个存储任务描述符的队列组成</li></ul></li></ul>        <h3 id="会合（rendezvous）"   >          <a href="#会合（rendezvous）" class="heading-link"><i class="fas fa-link"></i></a>会合（rendezvous）</h3>      <ul><li>如果任务 A 需要发送一个消息给任务 B，并且任务 B 愿意接收，消息就能够被传递过来<ul><li>会合只会发生在发送者和接收者都希望它发生的时候</li></ul></li></ul>        <h2 id="第十四章——异常处理"   >          <a href="#第十四章——异常处理" class="heading-link"><i class="fas fa-link"></i></a>第十四章——异常处理</h2>              <h3 id="异常分类"   >          <a href="#异常分类" class="heading-link"><i class="fas fa-link"></i></a>异常分类</h3>      <ul><li>继续模型</li><li>终止模型</li><li>重试模型</li></ul>        <h3 id="比较-Ada、java-与-C-异常处理异同点"   >          <a href="#比较-Ada、java-与-C-异常处理异同点" class="heading-link"><i class="fas fa-link"></i></a>比较 Ada、java 与 C++异常处理异同点</h3>      <ul><li>结构上<ul><li>Ada 采用<strong>EBNF</strong>的形式：<code>when 异常选择&#123;|异常选择&#125;=&gt;语句序列</code></li><li>C++采用<strong>try-catch</strong>块</li><li>Java 采用<strong>try-catch</strong>块与<strong>finally</strong>语句</li></ul></li><li>引发语句<ul><li>Ada 采用<strong>raise[异常名]</strong></li><li>C++和 Java 采用<strong>throw[表达式]</strong></li></ul></li><li>传播方式<ul><li>Ada 中逐步向调用者上层去寻找，如果没有找到就自动结束</li><li>C++和 Java 中也是逐步向调用者上层去寻找，没找到就用默认处理方式</li></ul></li><li>匹配方式<ul><li>Ada 采用字符串匹配，属于类型匹配</li><li>C++和 Java 中除了类型匹配外，还进行最先匹配和最佳匹配方式</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 课程学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java期末复习</title>
      <link href="/2019/12/24/java%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
      <url>/2019/12/24/java%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[        <h2 id="第三章——Java-语言基础"   >          <a href="#第三章——Java-语言基础" class="heading-link"><i class="fas fa-link"></i></a>第三章——Java 语言基础</h2>              <h3 id="标识符、注释"   >          <a href="#标识符、注释" class="heading-link"><i class="fas fa-link"></i></a>标识符、注释</h3>              <h4 id="标识符"   >          <a href="#标识符" class="heading-link"><i class="fas fa-link"></i></a>标识符</h4>      <ul><li>由字母、 数字、下划线、 $组成。不能由数字开头</li><li>不能是 Java 中的保留字(关键字)</li><li>大小写敏感，长度无限制</li></ul><span id="more"></span><div class="table-container"><table><thead><tr><th>类型</th><th>保留字</th></tr></thead><tbody><tr><td>类型保留字</td><td>boolean, byte, char, short, int, long, float, double, void</td></tr><tr><td>语句保留字</td><td>if, else, switch, case, default, break, for, while, do, return,continue,try,catch,finally,throw,synchronized</td></tr><tr><td>表达式保留字</td><td>new, null, this, super</td></tr><tr><td>修饰符保留字</td><td>abstract, final, public, private, protected, static, transient, volatile</td></tr><tr><td>类、方法保留字</td><td>class, throws, native, instanceof</td></tr><tr><td>扩展类构筑模块保留字</td><td>package, import, extends, implements, interface</td></tr><tr><td>其他保留字</td><td>cast, futuer, generic, inner, oprater, outer, rest,var</td></tr></tbody></table></div>        <h4 id="注释"   >          <a href="#注释" class="heading-link"><i class="fas fa-link"></i></a>注释</h4>      <ul><li>“//” 单行注释。表示从此向后，直到行尾都是注释。</li><li>“/<em>……</em>/“ 块注释。在“/<em>”和“</em>/”之间都是注释。</li><li>“/**……*/”文档注释。所有在“/**”和“*/”之间的内容可以用来自动形成文档。</li></ul>        <h3 id="变量常量"   >          <a href="#变量常量" class="heading-link"><i class="fas fa-link"></i></a>变量常量</h3>              <h4 id="变量"   >          <a href="#变量" class="heading-link"><i class="fas fa-link"></i></a>变量</h4>      <ul><li><strong>局部变量</strong>在使用前<strong>必须给定初值</strong>，否则，将编译出错，而<strong>类成员变量无此要求</strong>。</li></ul><div class="table-container"><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>基本数据类型</td><td>整数类型、实数类型、字符型、布尔型</td></tr><tr><td>构造数据类型</td><td>Java 语言中构造类型用类来描述</td></tr></tbody></table></div><blockquote><p>缺省值就是默认的初值，只对成员变量有用。<strong>局部变量没有缺省值</strong></p></blockquote>        <h4 id="常量"   >          <a href="#常量" class="heading-link"><i class="fas fa-link"></i></a>常量</h4>      <ul><li>数值常量<ul><li>整形常量：123、-15</li><li>实型常量：12.1f</li><li>布尔常量：true</li><li>字符常量：’x’</li><li>字符串类型常量：”Test”</li></ul></li><li>符号常量<ul><li>使用修饰符“final” 可以定义符号常量</li><li>定义形式： final 类型 常量名=值;</li><li><code>final int a=10;</code></li><li><code>final int a; a=10;</code></li><li><strong>类静态成员常量只能在定义时初始化</strong>（加 static）</li><li><strong>方法中的常量</strong>(局部常量)可以在定义时初始化，<strong>也可以</strong>先定义，以后再初始化。</li></ul></li></ul>        <h3 id="数据类型"   >          <a href="#数据类型" class="heading-link"><i class="fas fa-link"></i></a>数据类型</h3>              <h4 id="整型"   >          <a href="#整型" class="heading-link"><i class="fas fa-link"></i></a>整型</h4>      <ul><li>整型常量后面加上<strong>后缀 L 或 l</strong>，在机器中以<strong>long 类型</strong>存储。</li></ul>        <h4 id="实型（Double、Float）"   >          <a href="#实型（Double、Float）" class="heading-link"><i class="fas fa-link"></i></a>实型（Double、Float）</h4>      <ul><li>一个实型常量在机器中<strong>默认以 double 类型存储</strong></li><li>实型常量后<strong>加后缀 F 或 f</strong>在机器中以 float 类型存储</li></ul><blockquote><p>下面哪个赋值语句会产生错误?<br>(A) float f=1.3 (B) char c=’a’<br>(C) int c=2 (D) long d=2</p><p>A 错误，应加 F/f，因为实型默认为 Double 类型存储</p></blockquote>        <h4 id="字符"   >          <a href="#字符" class="heading-link"><i class="fas fa-link"></i></a>字符</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c1 = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="keyword">char</span> c2 = <span class="string">&#x27;\u0041&#x27;</span>;</span><br><span class="line"><span class="keyword">char</span> c3 = <span class="number">0x41</span>;</span><br><span class="line"><span class="comment">//都为A字符</span></span><br></pre></td></tr></table></div></figure>        <h3 id="运算符"   >          <a href="#运算符" class="heading-link"><i class="fas fa-link"></i></a>运算符</h3>              <h4 id="除法"   >          <a href="#除法" class="heading-link"><i class="fas fa-link"></i></a>除法</h4>      <ul><li>整数<ul><li>int a=10/0 运行报错</li><li>int a=10%0 运行报错</li></ul></li><li>浮点数<ul><li>double a=10.0/0 Infinity(正无穷大)</li><li>double a=-10.0/0 -Infinity（负无穷大）</li><li>double a=0.0/0 NaN</li><li>double a=0.0%0 NaN</li></ul></li></ul><blockquote><p>思考：某个培训中心要为新到的学员安排房间，假设共有 x 个学员，每个房间可以住 6 人，让你用一个公式来计算他们要住的房间数？</p><p>(x+5)/6</p></blockquote>        <h4 id="关系表达式"   >          <a href="#关系表达式" class="heading-link"><i class="fas fa-link"></i></a>关系表达式</h4>      <p><code>boolean result = obj instanceof Class</code></p><blockquote><p>其中 obj 为一个对象，Class 表示一个类或者一个接口，当 obj 为 Class 的对象，或者是其直接或间接子类，或者是其接口的实现类，结果 result 都返回 true，否则返回 false。</p></blockquote>        <h4 id="数据类型转换"   >          <a href="#数据类型转换" class="heading-link"><i class="fas fa-link"></i></a>数据类型转换</h4>      <ul><li><strong>低精度</strong>的值赋给<strong>高精度</strong>的变量可以<strong>自动转换</strong>，不出现编译错误；<strong>相反会出现编译错误，需要强制转换</strong><ul><li>低—&gt;高</li><li>byte(1)、short(2)、char(2)、int(4)、long(8)、float(4)、double(8)</li></ul></li><li>如果<strong>byte、short、char</strong>在一起运算时，会先将这些值<strong>转换为 int 型</strong>，再进行运算，<strong>结果为 int 型</strong>。</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下列代码会编译出错，提示c = (a + b)有精度损失，int转byte</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">byte</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">byte</span> b = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">byte</span> c = (a + b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ul><li>参与运算的两个数据如果类型不一样，会先把<strong>低级的数据转换成高级的类型</strong>的数据后<strong>再作运算</strong>，<strong>结果是高级的类型</strong></li><li>Java 中允许把 int 类型的常量赋给 byte、short、char 变量时不需要强制类型转换，反之需要</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> b = <span class="number">123</span>;<span class="comment">//合法</span></span><br><span class="line"><span class="keyword">short</span> s = <span class="number">123</span>;<span class="comment">//合法</span></span><br><span class="line">b = b + <span class="number">3</span>; <span class="comment">//不合法，编译出错，有精度损失（都转为int计算）</span></span><br></pre></td></tr></table></div></figure>        <h4 id="输入输出语句"   >          <a href="#输入输出语句" class="heading-link"><i class="fas fa-link"></i></a>输入输出语句</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从键盘读一个字符</span></span><br><span class="line"><span class="keyword">char</span> ch = (<span class="keyword">char</span>)System.in.read();</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从键盘读一个整数</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">20</span>];</span><br><span class="line">    System.in.read(buf);</span><br><span class="line">    String s = <span class="keyword">new</span> String(buf);</span><br><span class="line">    <span class="keyword">int</span> n = Integer.parseInt(s.trim());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><blockquote><p>trim()去除字符串左右空白<br><code>float f = Float.parseFloat(str.trim()); //转成单精度数</code> &gt; <code>double d = Double.parseDouble(str.trim()); //转成双精度数</code></p></blockquote>        <h4 id="数组"   >          <a href="#数组" class="heading-link"><i class="fas fa-link"></i></a>数组</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;<span class="comment">//int a[]亦可</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] b = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">b[<span class="number">0</span>] = <span class="number">8</span>;</span><br><span class="line">b[<span class="number">1</span>] = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">a.length; <span class="comment">//字符串长度length()</span></span><br><span class="line"></span><br><span class="line">java.util.Arrays.sort(a);</span><br><span class="line">java.util.Arrays.binarySearch(x,<span class="number">1</span>);</span><br></pre></td></tr></table></div></figure>        <h2 id="第四章——面向对象"   >          <a href="#第四章——面向对象" class="heading-link"><i class="fas fa-link"></i></a>第四章——面向对象</h2>              <h3 id="修饰符"   >          <a href="#修饰符" class="heading-link"><i class="fas fa-link"></i></a>修饰符</h3>      <ul><li><strong>public (公共)</strong><ul><li>它修饰的类能被所有的类访问；</li></ul></li><li><strong>protected (受保护)</strong><ul><li>protected 修饰的成员变量可以被本包及有继承关系的类自由访问。</li></ul></li><li><strong>缺省 (默认方式)</strong><ul><li>这种类只能被<strong>同一个包</strong>中的类访问；</li></ul></li><li><strong>private (私有)</strong><ul><li>private 修饰的成员变量<strong>只能在同一个类中</strong>使用。这种方式通常是最为安全的。</li></ul></li><li><strong>abstract (抽象)</strong><ul><li>它修饰的类不能被实例化，<strong>它可能包含有未实现的方法</strong>。</li></ul></li><li><strong>final (最终)</strong><ul><li>它修饰的类不能被继承，即不能有子类。</li></ul></li><li><strong>extends (继承)</strong><ul><li>该保留字用来表明新创建的类继承哪个类，被继承的类称为此类的父类。extends 后面只能跟一个父类名称，因为 Java 中一个类最多能继承一个类(单继承)。</li></ul></li><li><strong>implements (实现)</strong><ul><li>该保留字用来表明这个类实现了哪些接口，接口名可以有多个。</li></ul></li></ul>        <h3 id="类、对象变量"   >          <a href="#类、对象变量" class="heading-link"><i class="fas fa-link"></i></a>类、对象变量</h3>      <ul><li>static 修饰的成员变量称为类变量(静态变量)；</li><li>不用 static 修饰的成员变量又叫对象变量(实例变量)。</li></ul><blockquote><p>区别：对象变量依附于具体的对象实例，它的值因具体对象实例的不同而不同，而类变量为该类的所有对象所共享，它的值不因类的对象不同而不同。</p></blockquote><ul><li>访问形式<ul><li><strong>类名.成员变量</strong></li><li><strong>对象名.成员变量</strong></li><li><strong>成员变量</strong></li><li><strong>（三种方式访问的值也相同）</strong></li></ul></li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> a, b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">maim</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        A.a = <span class="number">1</span>;</span><br><span class="line">        A.b = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//无需创建对象就可以访问，也可创建</span></span><br></pre></td></tr></table></div></figure>        <h3 id="类、对象常量"   >          <a href="#类、对象常量" class="heading-link"><i class="fas fa-link"></i></a>类、对象常量</h3>      <p>无论是实例变量，还是类变量，都可以被说明成常量。final 修饰符和 static 修饰符并不冲突</p><ul><li><strong>类常量：</strong>一个成员变量<strong>同时被 static 和 final 修饰</strong>，它在类定义的所有对象中都只有唯一的值，且无法改变。</li><li><strong>一定要在定义时就给定初始值</strong></li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> x = <span class="number">5</span>; <span class="comment">//√</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> x; x = <span class="number">5</span>; <span class="comment">//×</span></span><br></pre></td></tr></table></div></figure><ul><li><strong>对象常量：</strong>一个 final 成员变量，<strong>没有 static 修饰</strong>，不同的对象可以有不同的值</li><li>一定要给初始值，但可有两种方法<ul><li>在<strong>定义</strong>变量时<strong>赋初始值</strong></li><li>在每一个<strong>构造函数中进行赋值</strong></li></ul></li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalTest</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> totalNumber = <span class="number">0</span>;     <span class="comment">//计数的类变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> id = <span class="number">5</span>; <span class="comment">//一定要在定义时赋初值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> total2 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> total;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FinalTest</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        totalNumber++;</span><br><span class="line">        total = x; <span class="comment">//通过构造函数给对象级的常量赋初值</span></span><br><span class="line">        <span class="comment">//id = 2;   //非法 不能第二次赋初值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        FinalTest t1 = <span class="keyword">new</span> FinalTest(<span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;t1.id： &quot;</span>+t1.id);</span><br><span class="line">        System.out.println(<span class="string">&quot;t1.total： &quot;</span>+t1.total);</span><br><span class="line">        System.out.println(<span class="string">&quot;FinalTest.totalNumber：&quot;</span>+FinalTest.totalNumber);</span><br><span class="line">        FinalTest t2 = <span class="keyword">new</span> FinalTest(<span class="number">8</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;t2.id： &quot;</span>+t2.id);</span><br><span class="line">        System.out.println(<span class="string">&quot;t2total： &quot;</span>+t2.total);</span><br><span class="line">        System.out.println(<span class="string">&quot;FinalTest.totalNumber： &quot;</span>+t2.totalNumber);</span><br><span class="line">        <span class="comment">//t2.total = 5;  //一旦赋了初值就不能改变</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> i = <span class="number">10</span>;   <span class="comment">//使用final定义方法中局部常量</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> j;</span><br><span class="line">        j = <span class="number">20</span>;</span><br><span class="line">        <span class="comment">//j=30;   //非法，不能二次赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="构造方法"   >          <a href="#构造方法" class="heading-link"><i class="fas fa-link"></i></a>构造方法</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//确保一个类只创建一个对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> T tObj = <span class="keyword">new</span> T();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">T</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">getinstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tObj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">P</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        T t1= T.getinstance();</span><br><span class="line">        T t2= T.getinstance();</span><br><span class="line">        System.out.println(t1==t2);<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="this"   >          <a href="#this" class="heading-link"><i class="fas fa-link"></i></a>this</h3>      <p>this 的含义</p><ul><li>在方法中，关键词 this 用来本类对象</li><li>在普通非静态方法中，this 表示调用这个方法的对象</li><li>在构造方法中，this 表示新创建的对象</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造方法中，用this调用另一构造方法</span></span><br><span class="line">Desk()&#123;</span><br><span class="line">    Color = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    Length = <span class="number">0</span>;</span><br><span class="line">    Width = <span class="number">0</span>;</span><br><span class="line">    Height = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Desk(String C, <span class="keyword">int</span> L, <span class="keyword">int</span> W, <span class="keyword">int</span> H)&#123;</span><br><span class="line">    Color = C;</span><br><span class="line">    Length = L;</span><br><span class="line">    Width = W;</span><br><span class="line">    Height = H;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Desk()&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="string">&quot;&quot;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="静态成员变量的继承"   >          <a href="#静态成员变量的继承" class="heading-link"><i class="fas fa-link"></i></a>静态成员变量的继承</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//某类的静态成员为该类及该类的所有子类所共有</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> <span class="keyword">extends</span> <span class="title">a</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        test.b = <span class="number">20</span>;</span><br><span class="line">        System.out.println(a.b);<span class="comment">//20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果子类中新定义的静态成员变量与父类中的某个静态成员变量同名，则这两个静态成员变量相互独立。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">living</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">human</span> <span class="keyword">extends</span> <span class="title">living</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        human.age = <span class="number">20</span>;</span><br><span class="line">        System.out.println(living.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="super"   >          <a href="#super" class="heading-link"><i class="fas fa-link"></i></a>super</h3>      <ul><li><strong>代表父类对象</strong></li><li>子类隐藏了超类中的变量或方法，而在程序中又要使用超类中被隐藏的变量或方法时</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">living</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">human</span> <span class="keyword">extends</span> <span class="title">living</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = x;</span><br><span class="line">        <span class="comment">//age=x;</span></span><br><span class="line">        <span class="keyword">super</span>.age = y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ul><li>使用 super 在子类中调用父类的构造方法</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, <span class="keyword">int</span> y;</span><br><span class="line">    Point(<span class="keyword">int</span> x,<span class="keyword">int</span> y)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorPoint</span> <span class="keyword">extends</span> <span class="title">Point</span></span>&#123;</span><br><span class="line">    String color;</span><br><span class="line">    ColorPoint(<span class="keyword">int</span> x,<span class="keyword">int</span> y)&#123;</span><br><span class="line">        <span class="keyword">super</span>(x,y);<span class="comment">//构造方法中使用super时，必须放在第一句</span></span><br><span class="line">    &#125;</span><br><span class="line">    ColorPoint(String color, <span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</span><br><span class="line">        <span class="keyword">super</span>(x,y);</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    A()&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    B()&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span>&#123;</span><br><span class="line">    Point()&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Point()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MapPoint</span> <span class="keyword">extends</span> <span class="title">Point</span></span>&#123;</span><br><span class="line">    MapPoint()&#123;</span><br><span class="line">        <span class="comment">//隐含super();</span></span><br><span class="line">        System.out.println(<span class="string">&quot;MapPoint()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColorPoint</span> <span class="keyword">extends</span> <span class="title">MapPoint</span></span>&#123;</span><br><span class="line">    A a = <span class="keyword">new</span> A();</span><br><span class="line">    B b = <span class="keyword">new</span> B();</span><br><span class="line">    ColorPoint()&#123;</span><br><span class="line">        <span class="comment">//隐含super();</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ColorPoint()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> ColorPoint();&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line"><span class="comment">//Point()</span></span><br><span class="line"><span class="comment">//MapPoint()</span></span><br><span class="line"><span class="comment">//A()</span></span><br><span class="line"><span class="comment">//B()</span></span><br><span class="line"><span class="comment">//ColorPoint()</span></span><br></pre></td></tr></table></div></figure><p>调用顺序：</p><ul><li>首先调用父类的构造方法。这个步骤会反复递归，使继承阶层的根源最先被构建，然后是次一层的子类，直至最末一层子类为止；</li><li>根据各个成员的声明顺序，执行成员变量的初始化赋值</li><li>执行该构造方法中的各语句。</li></ul>        <h3 id="父类对象与子类对象的转换"   >          <a href="#父类对象与子类对象的转换" class="heading-link"><i class="fas fa-link"></i></a>父类对象与子类对象的转换</h3>      <p>Java 中父类对象和子类对象的转化需要遵循如下原则：</p><ul><li>子类对象转为父类对象时，可以是显示的或隐式的，子类对象直接向父类对象赋值；</li><li>父类对象不能被任意的转换成某一子类的对象，只有父类对象指向的实际是一个子类对象，那么这个父类对象可以转换成子类对象，但此时必须用强制类型转换。</li><li>如果一个方法的形式参数定义的是父类对象，那么调用这个方法时，可以使用子类对象作为实际参数。</li></ul>        <h3 id="抽象类抽象方法"   >          <a href="#抽象类抽象方法" class="heading-link"><i class="fas fa-link"></i></a>抽象类抽象方法</h3>      <ul><li>如果类中的<strong>某一方法是抽象的</strong>，<strong>整个类</strong>就必须被说明成<strong>抽象的</strong>。</li><li>抽象方法在子类中必须被实现，否则子类仍是抽象的。抽象类不是可有可无的</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//上述方法对一般图形无法定义其实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> width;</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//矩型类实现了Shape类的抽象方法area()</span></span><br><span class="line">        <span class="keyword">return</span> width*length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span> <span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//矩型类实现了Shape类的抽象方法draw()</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="接口"   >          <a href="#接口" class="heading-link"><i class="fas fa-link"></i></a>接口</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] interface 接口名[extends] [接口列表]&#123;</span><br><span class="line">    接口体</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Countable</span></span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> min = <span class="number">5</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">incrementCount</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">decrementCount</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">currentCount</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">setCount</span><span class="params">(<span class="keyword">int</span> newCount)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ul><li>接口中的成员变量：都是隐含<strong>public、static、final</strong>的——静态最终变量（常量）</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> STEP = <span class="number">5</span>;</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STEP = <span class="number">5</span>;</span><br></pre></td></tr></table></div></figure><ul><li><strong>接口中</strong>说明的<strong>方法都是抽象方法</strong>，所有方法都隐含<strong>public 和 abstract</strong>的</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">a</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">a</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></div></figure>        <h3 id="包"   >          <a href="#包" class="heading-link"><i class="fas fa-link"></i></a>包</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> SubClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> MyClass.SubClass;</span><br><span class="line"><span class="comment">//javac -d编译</span></span><br></pre></td></tr></table></div></figure><p><strong>包的说明语句必须放在第一行</strong></p>        <h3 id="比较引用类型"   >          <a href="#比较引用类型" class="heading-link"><i class="fas fa-link"></i></a>比较引用类型</h3>      <ul><li>==和!=用来比较引用型变量时,只能判断运算符两边引用的是不是同一个对象,即对象的地址值（或对象引用值）是不是相同</li><li>用**equls()**方法可以判断对象实体值是否相同</li><li><strong>自己定义的类</strong>如果要支持 equals 方法必须<strong>重写</strong>从 Object 类继承来的<strong>equals 方法</strong></li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span>==obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="第五章——异常处理"   >          <a href="#第五章——异常处理" class="heading-link"><i class="fas fa-link"></i></a>第五章——异常处理</h2>              <h3 id="举例"   >          <a href="#举例" class="heading-link"><i class="fas fa-link"></i></a>举例</h3>      <ul><li>除 0 溢出（ArithmeticException）</li><li>文件找不到（FileNotFoundException）</li><li>数组元素下标越界（ArrayIndexOutofBoundsException）</li></ul>        <h3 id="捕获异常"   >          <a href="#捕获异常" class="heading-link"><i class="fas fa-link"></i></a>捕获异常</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="声明抛出"   >          <a href="#声明抛出" class="heading-link"><i class="fas fa-link"></i></a>声明抛出</h3>      <ul><li>调用的方法出现了异常</li><li>检测出<strong>throw</strong>语句</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NonRuntimeExceptionDemo1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        FileInputStream in = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;text.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> s;</span><br><span class="line">        <span class="keyword">while</span>((s = in.read())!=-<span class="number">1</span>)</span><br><span class="line">            System.out.print(s);</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInput</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        IOException ae = <span class="keyword">new</span> IOException(<span class="string">&quot;buffer is full&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> ae;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ul><li>当下面的程序的输入是“1 2 3 4”时，程序的输出是什么，如果把的 xxxxxxxxxxx 的 catch 语句去掉，输出是什么？</li><li>hbcdxn</li><li>hcmn</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.print(<span class="string">&#x27;h&#x27;</span>);</span><br><span class="line">            mb_method1(args);</span><br><span class="line">            System.out.print(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            System.out.print(<span class="string">&#x27;m&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&#x27;n&#x27;</span>);</span><br><span class="line">     &#125;<span class="comment">//方法main结束</span></span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mb_method1</span><span class="params">(String a[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            mb_method2(a);</span><br><span class="line">            System.out.print(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;<span class="comment">//xxxxxxxxxxx</span></span><br><span class="line">            System.out.print(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span>&#123;</span><br><span class="line">                System.out.print(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">          System.out.print(<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line">    &#125;<span class="comment">//方法mb_method1结束</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mb_method2</span><span class="params">(String a[])</span></span>&#123;</span><br><span class="line">        System.out.println(a[a.length]);</span><br><span class="line">    &#125;<span class="comment">//方法mb_method2结束</span></span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">//类J_Test结束</span></span><br></pre></td></tr></table></div></figure>        <h2 id="第六章——Java-lang"   >          <a href="#第六章——Java-lang" class="heading-link"><i class="fas fa-link"></i></a>第六章——Java.lang</h2>      <ul><li><p>常用类</p><ul><li>Object、Class、Math、System、Runtime、Thread、Throwable</li></ul></li><li><p>java 中自动导入了 java 语言包</p></li></ul>        <h3 id="字符串类"   >          <a href="#字符串类" class="heading-link"><i class="fas fa-link"></i></a>字符串类</h3>      <ul><li><p>String 类 ：不可改变的静态字符串</p></li><li><p>StringBuffer 类：动态可变的字符串</p></li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String a = <span class="string">&quot;java&quot;</span>;</span><br><span class="line"><span class="comment">//仅放入字符串池</span></span><br><span class="line">String b = <span class="keyword">new</span> String(<span class="string">&quot;java&quot;</span>);</span><br><span class="line"><span class="comment">//若字符串池中有，则仅在堆内存创建</span></span><br><span class="line">String c = <span class="keyword">new</span> String(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"><span class="comment">//若字符串池中无，则创建，也在堆内存中创建</span></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">String a = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">String b = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">a.equals(b);<span class="comment">//true</span></span><br><span class="line">a == b;<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">String a = <span class="keyword">new</span> String(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">String b = <span class="keyword">new</span> String(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">a == b;<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">String a = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">String b = <span class="keyword">new</span> String(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">a.equals(b);<span class="comment">//true</span></span><br><span class="line">a == b;<span class="comment">//false</span></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String a = <span class="string">&quot;hellojava&quot;</span>;</span><br><span class="line">String b = <span class="string">&quot;java&quot;</span>;</span><br><span class="line">String c = <span class="string">&quot;hello&quot;</span>+b;</span><br><span class="line">a == c;<span class="comment">//false，仅在编译时对字符串池中相同的字符串合并</span></span><br><span class="line">a.equals(c);<span class="comment">//true</span></span><br></pre></td></tr></table></div></figure>        <h3 id="字符串方法"   >          <a href="#字符串方法" class="heading-link"><i class="fas fa-link"></i></a>字符串方法</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">String a = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">String c = a.substring(<span class="number">2</span>,<span class="number">3</span>);<span class="comment">//得到“l”</span></span><br><span class="line"><span class="keyword">int</span> b = a.length();<span class="comment">//得到5</span></span><br><span class="line"><span class="keyword">char</span> b = a.charAt(<span class="number">0</span>);<span class="comment">//得到下标为0的字符，得到字符h</span></span><br><span class="line"><span class="keyword">char</span>[] b = a.toCharArray();<span class="comment">//&#123;&#x27;h&#x27;,&#x27;e&#x27;,&#x27;l&#x27;,&#x27;l&#x27;,&#x27;o&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> [] a = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>&#125;;</span><br><span class="line">String b = <span class="keyword">new</span> String(a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span> [] a = &#123;<span class="number">65</span>,<span class="number">66</span>,<span class="number">67</span>,<span class="number">68</span>&#125;;</span><br><span class="line">String b = <span class="keyword">new</span> String(a);<span class="comment">//得到ABCD</span></span><br><span class="line"></span><br><span class="line">String s1 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">String s2 = s1.toUpperCase();<span class="comment">//得到“HELLO”</span></span><br><span class="line">String s3 = s1.toLowerCase();<span class="comment">//得到“hello”</span></span><br></pre></td></tr></table></div></figure>        <h3 id="StringBuffer-类"   >          <a href="#StringBuffer-类" class="heading-link"><i class="fas fa-link"></i></a>StringBuffer 类</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuffer</span><span class="params">()</span>；</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuffer</span><span class="params">(<span class="keyword">int</span> length)</span>；</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuffer</span><span class="params">(String str)</span>；</span></span><br></pre></td></tr></table></div></figure>        <h4 id="方法"   >          <a href="#方法" class="heading-link"><i class="fas fa-link"></i></a>方法</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">StringBuffer s = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">s.append(<span class="string">&quot;java&quot;</span>);<span class="comment">//s变为“hellojava”</span></span><br><span class="line">s.insert(<span class="number">5</span>,<span class="string">&quot;sun&quot;</span>); <span class="comment">// s变为“hellosunjava”</span></span><br><span class="line">s.setCharAt(<span class="number">0</span>,<span class="string">&#x27;H&#x27;</span>); <span class="comment">// s变为“Hellosunjava”</span></span><br><span class="line">s.delete(<span class="number">5</span>,<span class="number">8</span>);<span class="comment">// s变为“Hellojava”</span></span><br><span class="line">s.toString();<span class="comment">//转为String类</span></span><br><span class="line">s.charAt(<span class="number">0</span>);<span class="comment">//h</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>);<span class="comment">//98，char转为int</span></span><br></pre></td></tr></table></div></figure>        <h3 id="数据类型转换-1"   >          <a href="#数据类型转换-1" class="heading-link"><i class="fas fa-link"></i></a>数据类型转换</h3>      <ul><li>将字符串转换为 int 型</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">&quot;1234&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> i = Integer.parseInt(s);</span><br></pre></td></tr></table></div></figure><ul><li>将 int 型转换为字符串</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1234</span>;</span><br><span class="line">String s = Integer.toString(i);</span><br><span class="line"><span class="comment">//其他Double, Float等数据类型类以此类推</span></span><br></pre></td></tr></table></div></figure>        <h3 id="Math-类"   >          <a href="#Math-类" class="heading-link"><i class="fas fa-link"></i></a>Math 类</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pow(<span class="keyword">double</span> x, <span class="keyword">double</span> y); <span class="comment">//返回x的y次方。</span></span><br><span class="line">exp(<span class="keyword">double</span> x);  <span class="comment">//返回ex</span></span><br><span class="line">log(<span class="keyword">double</span> x);  <span class="comment">//返回x的自然对数。</span></span><br><span class="line">sqrt(<span class="keyword">double</span> x);  <span class="comment">//返回x的平方根。</span></span><br><span class="line"><span class="comment">//（返回类型均为double型）</span></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面了解即可</span></span><br><span class="line">ceil(<span class="keyword">double</span> a); <span class="comment">//返回大于或等于a的最小整数值。</span></span><br><span class="line">floor(<span class="keyword">double</span> a);<span class="comment">//返回小于或等于a的最大整数值。</span></span><br><span class="line">rint(<span class="keyword">double</span> a); <span class="comment">//返回四舍五入后的整数值。</span></span><br><span class="line"><span class="comment">//（上面三个方法的返回类型均为double型）</span></span><br><span class="line">round(<span class="keyword">float</span> a);<span class="comment">//返回四舍五入后的整数值, 返回类型为int型。</span></span><br><span class="line">round(<span class="keyword">double</span> a);<span class="comment">//返回四舍五入后的整数值, 返回类型为long型。</span></span><br><span class="line"></span><br><span class="line">Math.min(a, b);</span><br><span class="line">Math.max(a, b);</span><br></pre></td></tr></table></div></figure>        <h2 id="第六章——java-util"   >          <a href="#第六章——java-util" class="heading-link"><i class="fas fa-link"></i></a>第六章——java.util</h2>              <h3 id="日期类"   >          <a href="#日期类" class="heading-link"><i class="fas fa-link"></i></a>日期类</h3>      <ul><li>了解</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Date</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Date</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> date)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Date</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> date, <span class="keyword">int</span> hours,<span class="keyword">int</span> minutes)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Date</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> date, <span class="keyword">int</span> hours,<span class="keyword">int</span> minutes,<span class="keyword">int</span> seconds)</span></span>;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getYear</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMonth</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDate</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDay</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHours</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMinutes</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSeconds</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">before</span><span class="params">(Date when)</span></span>;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//日期的比较</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">before</span><span class="params">(Date when)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">after</span><span class="params">(Date when)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equal</span><span class="params">(Object obj)</span></span>;</span><br></pre></td></tr></table></div></figure>        <h3 id="向量类"   >          <a href="#向量类" class="heading-link"><i class="fas fa-link"></i></a>向量类</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造方法:</span></span><br><span class="line">Vector(<span class="keyword">int</span> capacity, <span class="keyword">int</span> capacityIncrement);</span><br><span class="line"><span class="comment">//capacityIncrement缺省为0，表示扩充1倍大小</span></span><br><span class="line"><span class="comment">//否则，表示增加多少容量</span></span><br><span class="line">Vector(<span class="keyword">int</span> capacity);</span><br><span class="line">Vector();</span><br><span class="line"></span><br><span class="line">Vector&lt;元素类型&gt; 向量名称 = <span class="keyword">new</span> Vector&lt;元素类型&gt;(容量);</span><br><span class="line">Vector&lt;String&gt; vector1 = <span class="keyword">new</span> Vector&lt;String&gt;(<span class="number">5</span>);</span><br><span class="line"><span class="comment">//这里的元素类型不能是基本数据类型</span></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span>;</span><br><span class="line">vector1.add(<span class="string">&quot;姚明&quot;</span>);</span><br><span class="line"><span class="function">E <span class="title">elementAt</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">vector1.elementAt(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">vector1.capacity();<span class="comment">//向量的容量</span></span><br><span class="line">vector1.size();<span class="comment">//向量中的元素个数</span></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//往向量中插入元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertElementAt</span><span class="params">(E obj, <span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改向量中的元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setElementAt</span><span class="params">(E obj, <span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除向量中的元素</span></span><br><span class="line">vector1.removeElementAt(<span class="number">1</span>);<span class="comment">//删除下标为1的元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//清空向量</span></span><br><span class="line">vector1.clear(); <span class="comment">//向量中的所有元素都被删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断向量中是否有与某对象等值的对象 </span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span></span>;</span><br><span class="line">vector1.contains(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找特定元素在向量中的下标位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span></span>;</span><br><span class="line">System.out.println(vector1.indexOf(<span class="string">&quot;张三&quot;</span>)); <span class="comment">//得到0</span></span><br></pre></td></tr></table></div></figure>        <h3 id="Stack"   >          <a href="#Stack" class="heading-link"><i class="fas fa-link"></i></a>Stack</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//栈类定义的主要方法如下：</span></span><br><span class="line">Stack();     <span class="comment">//栈类构造方法</span></span><br><span class="line"><span class="function">E <span class="title">push</span><span class="params">(E item)</span></span>;   <span class="comment">//把对象压入栈</span></span><br><span class="line"><span class="function">E <span class="title">pop</span><span class="params">()</span></span>; <span class="comment">//从栈顶弹出一个对象</span></span><br><span class="line"><span class="function">E <span class="title">peek</span><span class="params">()</span></span>; <span class="comment">//读栈顶一个对象，但不弹出</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span></span>; <span class="comment">//测试栈是否为空, 是则返回True, 否则返回False</span></span><br></pre></td></tr></table></div></figure>        <h2 id="第六章——java-io"   >          <a href="#第六章——java-io" class="heading-link"><i class="fas fa-link"></i></a>第六章——java.io</h2>      <div class="table-container"><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">InputStream</td><td align="center">字节输入流的超类</td></tr><tr><td align="center">OutputStream</td><td align="center">字节输出流的超类</td></tr><tr><td align="center">Reader</td><td align="center">字符输入流的超类</td></tr><tr><td align="center">Writer</td><td align="center">字符输出流的超类</td></tr><tr><td align="center">File</td><td align="center">文件类</td></tr><tr><td align="center">RandomAccessFile</td><td align="center">随机访问文件类</td></tr></tbody></table></div>        <h3 id="字节流"   >          <a href="#字节流" class="heading-link"><i class="fas fa-link"></i></a>字节流</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//InputStream和OutputStream</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">( <span class="keyword">byte</span>[] b )</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">( <span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len )</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> b)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">( <span class="keyword">byte</span>[] b )</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">( <span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len )</span> <span class="keyword">throws</span> IOException</span></span><br></pre></td></tr></table></div></figure>        <h3 id="字符流"   >          <a href="#字符流" class="heading-link"><i class="fas fa-link"></i></a>字符流</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Reader和Writer</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span>[] cbuf)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span>[] cbuf,<span class="keyword">int</span> off,<span class="keyword">int</span> len)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(String str)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span>[] cbuf)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span>[] cbuf,<span class="keyword">int</span> off,<span class="keyword">int</span> len)</span> <span class="keyword">throws</span> IOException</span></span><br></pre></td></tr></table></div></figure>        <h3 id="读入"   >          <a href="#读入" class="heading-link"><i class="fas fa-link"></i></a>读入</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c = (<span class="keyword">char</span>)System.in.read();</span><br><span class="line">System.out.println(c);</span><br><span class="line"><span class="comment">//如果输入‘你’，则输出?</span></span><br><span class="line"><span class="comment">//因为相当于读取了字符‘你’的高位字节，并未读取完整的汉字</span></span><br><span class="line"><span class="comment">//因此需要将字节流转换为字符流。</span></span><br><span class="line">InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(System.in);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    c = (<span class="keyword">char</span>)isr.read();</span><br><span class="line">    System.out.println(c);</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="File-类"   >          <a href="#File-类" class="heading-link"><i class="fas fa-link"></i></a>File 类</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">File(String pathname);</span><br><span class="line">File(File parent, String child);</span><br><span class="line">File(String parent, String child);</span><br><span class="line">File(URI uri);</span><br><span class="line"><span class="comment">//File(文件/目录)</span></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建文件</span></span><br><span class="line">File f1 = <span class="keyword">new</span> File(<span class="string">&quot;H:\\a.txt&quot;</span>);</span><br><span class="line"><span class="keyword">boolean</span> success = f1.createNewFile();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建目录</span></span><br><span class="line">File f1 = <span class="keyword">new</span> File(<span class="string">&quot;H:\\a&quot;</span>);</span><br><span class="line"><span class="keyword">boolean</span> success = f1.mkdir();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">renameTo</span><span class="params">(File dest)</span></span>;</span><br><span class="line"><span class="comment">//文件重命名。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//删除文件或空目录。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String[] list();</span><br><span class="line"><span class="comment">//返回目录中的所有文件名字符串。</span></span><br><span class="line"><span class="keyword">public</span> File[] listFiles();</span><br><span class="line"><span class="comment">//返回目录中的所有文件对象。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exists</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//举例：利用接口java.io.FilenameFilter和File类list方法，</span></span><br><span class="line"><span class="comment">//实现一个文件过滤器，把某个目录下的所有以.java结尾的文件都找出来</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DirFilter</span> <span class="keyword">implements</span> <span class="title">FilenameFilter</span></span>&#123;</span><br><span class="line">    String extn;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DirFilter</span><span class="params">(String extn)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.extn = extn;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File dir,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> isAccept;</span><br><span class="line">        <span class="keyword">if</span>(name.indexOf(extn) == -<span class="number">1</span>)</span><br><span class="line">            isAccept = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            isAccept = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> isAccept;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面的程序利用上述过滤器找出当前目录下面指定类型（文件名中含有.java的文件）</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">&quot;. &quot;</span>);</span><br><span class="line">            String[] list = file.list(<span class="keyword">new</span> DirFilter(<span class="string">&quot;.java&quot;</span>));</span><br><span class="line">            <span class="comment">// 得到当前路径下所有文件名含有.java的文件</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.length; i++)</span><br><span class="line">                System.out.println(list[i]);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="FileInputStream-和-FileOutputStream"   >          <a href="#FileInputStream-和-FileOutputStream" class="heading-link"><i class="fas fa-link"></i></a>FileInputStream 和 FileOutputStream</h3>              <h4 id="FileInputStream"   >          <a href="#FileInputStream" class="heading-link"><i class="fas fa-link"></i></a>FileInputStream</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FileInputStream fs = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">File file = <span class="keyword">new</span> File (<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">FileInputStream fs = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">fs.readLine();</span><br></pre></td></tr></table></div></figure>        <h4 id="FileOutputStream"   >          <a href="#FileOutputStream" class="heading-link"><i class="fas fa-link"></i></a>FileOutputStream</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造方法</span></span><br><span class="line">FileOutputStream(File file);</span><br><span class="line">FileOutputStream(File file, <span class="keyword">boolean</span> append);</span><br><span class="line">FileOutputStream(FileDescriptor fdObj);</span><br><span class="line">FileOutputStream(String name);</span><br><span class="line">FileOutputStream(String name, <span class="keyword">boolean</span> append);</span><br><span class="line"></span><br><span class="line"><span class="comment">//写入字节的方法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span>[] b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> b)</span></span>;</span><br></pre></td></tr></table></div></figure>        <h3 id="过滤流"   >          <a href="#过滤流" class="heading-link"><i class="fas fa-link"></i></a>过滤流</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FileInputStream in = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">BufferedInputStream bufin = <span class="keyword">new</span> BufferedInputStream(in);</span><br></pre></td></tr></table></div></figure>        <h3 id="字符流-1"   >          <a href="#字符流-1" class="heading-link"><i class="fas fa-link"></i></a>字符流</h3>              <h4 id="FileReader"   >          <a href="#FileReader" class="heading-link"><i class="fas fa-link"></i></a>FileReader</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造方法</span></span><br><span class="line">File f = <span class="keyword">new</span> File(<span class="string">&quot;d:\\t1.txt&quot;</span>);</span><br><span class="line">FileReader f1 = <span class="keyword">new</span> FileReader(f);</span><br><span class="line">FileReader f2 = <span class="keyword">new</span> FileReader(<span class="string">&quot;d:\\t1.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重要方法</span></span><br><span class="line">read();</span><br><span class="line">read(<span class="keyword">char</span> b[]);</span><br><span class="line">read(<span class="keyword">char</span> b[], <span class="keyword">int</span> off, <span class="keyword">int</span> len);</span><br><span class="line">close();</span><br></pre></td></tr></table></div></figure>        <h4 id="FileWriter"   >          <a href="#FileWriter" class="heading-link"><i class="fas fa-link"></i></a>FileWriter</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造方法</span></span><br><span class="line">File f = <span class="keyword">new</span> File(<span class="string">&quot;d:\\t1.txt&quot;</span>);</span><br><span class="line">FileWriter f1 = <span class="keyword">new</span> FileWriter(f);</span><br><span class="line">FileWriter f2 = <span class="keyword">new</span> FileWriter(<span class="string">&quot;d:\\t1.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重要方法</span></span><br><span class="line">write(<span class="keyword">char</span> c);</span><br><span class="line">write(<span class="keyword">char</span> b[]);</span><br><span class="line">write(<span class="keyword">char</span> b[], <span class="keyword">int</span> off, <span class="keyword">int</span> len);</span><br><span class="line">close();</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以行为单位从一个文件读取数据</span></span><br><span class="line"><span class="comment">//FileReader通过BufferedReader封装，就可以调用readline()一行行读出文件内容</span></span><br><span class="line">BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;F:\\nepalon\\TestIO.java&quot;</span>));</span><br><span class="line">String s;</span><br><span class="line"><span class="keyword">while</span>((s = in.readLine()) != <span class="keyword">null</span>)</span><br><span class="line">    System.out.println(s);</span><br><span class="line">in.close();</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以字符为单位接收键盘的输入</span></span><br><span class="line">BufferedReader stdin = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">System.out.println(“Enter a line:” );</span><br><span class="line">System.out.println(stdin.readLine());</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//向一个文件写数据</span></span><br><span class="line"><span class="comment">//FileWriter通过PrintWriter封装，就可以调用print()和println()轻松向文件写入内容</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;F:\\nepalon\\TestIO.out&quot;</span>)</span><br><span class="line">    PrintWriter out1 = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> BufferedWriter(fw));</span><br><span class="line">    <span class="keyword">int</span> lineCount = <span class="number">1</span>;</span><br><span class="line">    out1.println(<span class="string">&quot; We are good friends!!!&quot;</span> );</span><br><span class="line">    out1.close();</span><br><span class="line">&#125;<span class="keyword">catch</span>(EOFException ex)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;End of stream&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="第七章——图形界面"   >          <a href="#第七章——图形界面" class="heading-link"><i class="fas fa-link"></i></a>第七章——图形界面</h2>      <ul><li><code>javax.swing.*</code>Swing GUI 组件</li><li><code>java.awt.event.*</code>组件事件类</li><li><code>java.awt.*</code>布局类、颜色、画图</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwingExample1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        JFrame frame = <span class="keyword">new</span> JFrame();</span><br><span class="line">        frame.setLayout(<span class="keyword">null</span>);</span><br><span class="line">        JLabel jLabelWelcome = <span class="keyword">new</span> JLabel();</span><br><span class="line">        jLabelWelcome.setText(<span class="string">&quot;欢迎&quot;</span>);</span><br><span class="line">        jLabelWelcome.setBounds(<span class="number">40</span>, <span class="number">30</span>, <span class="number">450</span>, <span class="number">30</span>);</span><br><span class="line">        frame.add(jLabelWelcome);</span><br><span class="line">        frame.setTitle(<span class="string">&quot;第一个Swing程序&quot;</span>);</span><br><span class="line">        frame.setBounds(<span class="number">330</span>, <span class="number">250</span>, <span class="number">500</span>, <span class="number">150</span>);</span><br><span class="line">        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ul><li>JButton、JTextField、JLabel</li></ul>        <h3 id="容器组件"   >          <a href="#容器组件" class="heading-link"><i class="fas fa-link"></i></a>容器组件</h3>      <ul><li>顶级容器：JFrame、JDialog、JWindow<ul><li>默认布局：BorderLayout</li><li>North、South、West、East</li></ul></li><li>其他容器：JPanel、JToolBar<ul><li>默认布局：FlowLayout</li></ul></li></ul>        <h4 id="JFrame"   >          <a href="#JFrame" class="heading-link"><i class="fas fa-link"></i></a>JFrame</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">show(); <span class="comment">//显示框架</span></span><br><span class="line">setVisible(<span class="keyword">boolean</span> b); <span class="comment">//使框架可见/不可见(true/false)</span></span><br><span class="line">hide(); <span class="comment">//隐藏框架</span></span><br><span class="line">setLayout(<span class="keyword">new</span> FlowLayout());<span class="comment">//设置布局</span></span><br><span class="line">setTitle(String s); <span class="comment">//设置框架的标题</span></span><br><span class="line">setSize(<span class="keyword">int</span> w, <span class="keyword">int</span> h); <span class="comment">//调整框架的尺寸(宽/高为w/h)</span></span><br><span class="line">setBounds(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> w,<span class="keyword">int</span> h); <span class="comment">//调整框架的位置及尺寸(左上角为(x,y), 宽、高为w、h)</span></span><br><span class="line">add(Component ob); <span class="comment">//将其它组件ob加入到框架的中心位置</span></span><br><span class="line">add(String p, Component ob); <span class="comment">//将组件ob加入到框架的p位置</span></span><br></pre></td></tr></table></div></figure>        <h4 id="Dialog"   >          <a href="#Dialog" class="heading-link"><i class="fas fa-link"></i></a>Dialog</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Frame f = <span class="keyword">new</span> Frame();</span><br><span class="line">Dialog d = <span class="keyword">new</span> Dialog(f, <span class="string">&quot;Error&quot;</span>);</span><br><span class="line">d.setVisible(<span class="keyword">true</span>);</span><br></pre></td></tr></table></div></figure>        <h4 id="Panel"   >          <a href="#Panel" class="heading-link"><i class="fas fa-link"></i></a>Panel</h4>      <ul><li>必须放在顶层容器中</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Frame f = <span class="keyword">new</span> Frame();</span><br><span class="line">Panel p = <span class="keyword">new</span> Panel();</span><br><span class="line">p.setBackGround(Color.yellow);<span class="comment">//设置颜色</span></span><br><span class="line">p.add(<span class="keyword">new</span> JButton(<span class="string">&quot;Down&quot;</span>));</span><br><span class="line">d.add(p);</span><br></pre></td></tr></table></div></figure>        <h3 id="常用组件"   >          <a href="#常用组件" class="heading-link"><i class="fas fa-link"></i></a>常用组件</h3>              <h4 id="Button"   >          <a href="#Button" class="heading-link"><i class="fas fa-link"></i></a>Button</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Button();</span><br><span class="line">Button(String label);</span><br><span class="line"></span><br><span class="line">setLabel(String label);</span><br><span class="line">getLabel();</span><br><span class="line">addActionListener(ActionListener l); <span class="comment">//将l指定为按钮的监听者</span></span><br><span class="line">setEnabled(<span class="keyword">true</span>/<span class="keyword">false</span>);</span><br></pre></td></tr></table></div></figure>        <h4 id="Label"   >          <a href="#Label" class="heading-link"><i class="fas fa-link"></i></a>Label</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Label();</span><br><span class="line">Label(String text);</span><br><span class="line"></span><br><span class="line">getText();</span><br><span class="line">setText(String text);</span><br></pre></td></tr></table></div></figure>        <h4 id="TextField"   >          <a href="#TextField" class="heading-link"><i class="fas fa-link"></i></a>TextField</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TextField();</span><br><span class="line">TextField(Sring text);</span><br><span class="line"></span><br><span class="line">addActionListener(ActionListener l);</span><br><span class="line">setText(String s);</span><br><span class="line">getText();</span><br></pre></td></tr></table></div></figure>        <h3 id="事件处理"   >          <a href="#事件处理" class="heading-link"><i class="fas fa-link"></i></a>事件处理</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line">    JTextField jiashu1;</span><br><span class="line">    JTextField jiashu2;</span><br><span class="line">    JTextField he;</span><br><span class="line">    JButton jiafa;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Demo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setLayout(<span class="keyword">new</span> FlowLayout());</span><br><span class="line">        JTextField jf = <span class="keyword">new</span> JTextField(<span class="number">5</span>);</span><br><span class="line">        JButton jb = <span class="keyword">new</span> JButton(<span class="string">&quot;修改&quot;</span>);</span><br><span class="line">        add(jf);</span><br><span class="line">        add(jb);</span><br><span class="line">        setLocation(<span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">        setSize(<span class="number">400</span>, <span class="number">300</span>);</span><br><span class="line">        jb.addActionListener(<span class="keyword">new</span> MyActionListener(jf));</span><br><span class="line">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Demo d = <span class="keyword">new</span> Demo();</span><br><span class="line">        d.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyActionListener</span> <span class="keyword">implements</span> <span class="title">ActionListener</span> </span>&#123;</span><br><span class="line">    JTextField he;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyActionListener</span><span class="params">(JTextField he)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.he = he;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">        he.setText(<span class="string">&quot;change&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="事件对象"   >          <a href="#事件对象" class="heading-link"><i class="fas fa-link"></i></a>事件对象</h4>      <ul><li>MouseEvent<ul><li>鼠标事件：鼠标单击，移动</li></ul></li><li>WindowEvent<ul><li>窗口事件：关闭窗口，窗口闭合，图标化</li></ul></li><li>KeyEvent<ul><li>键盘事件：键按下、释放</li></ul></li><li>ActionEvent<ul><li>动作事件：按钮按下，TextField 中按 Enter 键</li></ul></li></ul>        <h4 id="事件监听器"   >          <a href="#事件监听器" class="heading-link"><i class="fas fa-link"></i></a>事件监听器</h4>      <div class="table-container"><table><thead><tr><th>事件监听器</th><th>响应函数</th></tr></thead><tbody><tr><td>MouseListener</td><td>mouseCliked/mouseEnter/mouseExited/mousePressed</td></tr><tr><td>MouseMotionListener</td><td>mouseMoved/mouseDragged</td></tr><tr><td>WindowListener</td><td>windowOpened/windowClosing</td></tr><tr><td>ActionListener</td><td>actionPerformed</td></tr></tbody></table></div><blockquote><p>大多数事件监听器都有对应的适配器，例如：WindowListener 的适配器是 WindowAdapter</p><p><strong>只有 ActionListener 没有适配器</strong></p></blockquote><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWindowAdapter</span> <span class="keyword">extends</span> <span class="title">WindowAdapter</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent e)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyActionListener</span> <span class="keyword">implements</span> <span class="title">ActionListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="美化"   >          <a href="#美化" class="heading-link"><i class="fas fa-link"></i></a>美化</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setBackGround(Color.blue);</span><br><span class="line">serForeground(<span class="keyword">new</span> Color(<span class="number">200</span>,<span class="number">100</span>,<span class="number">0</span>));</span><br><span class="line">setFont(<span class="keyword">new</span> Font(<span class="string">&quot;黑体&quot;</span>,Font.ITALIC,<span class="number">30</span>));</span><br></pre></td></tr></table></div></figure>        <h3 id="图形"   >          <a href="#图形" class="heading-link"><i class="fas fa-link"></i></a>图形</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">repaint</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">JComponent</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span> <span class="params">(Graphics g)</span></span>&#123;</span><br><span class="line">        <span class="comment">//code for drawing</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">MyComponent m = <span class="keyword">new</span> MyComponet();</span><br><span class="line">add(m);</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rect</span> <span class="keyword">extends</span> <span class="title">Frame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span> </span>&#123;</span><br><span class="line">        g.setColor(Color.orange); <span class="comment">// 设置绘图颜色</span></span><br><span class="line">        g.drawRect(<span class="number">10</span>, <span class="number">40</span>, <span class="number">100</span>, <span class="number">60</span>);</span><br><span class="line">        g.fillRect(<span class="number">120</span>, <span class="number">40</span>, <span class="number">100</span>, <span class="number">60</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Rect f = <span class="keyword">new</span> Rect();</span><br><span class="line">        f.setTitle(<span class="string">&quot;It&#x27;s Rect!&quot;</span>);</span><br><span class="line">        f.setSize(<span class="number">230</span>, <span class="number">120</span>);</span><br><span class="line">        f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="方法-1"   >          <a href="#方法-1" class="heading-link"><i class="fas fa-link"></i></a>方法</h4>      <ul><li>drawString<ul><li>画字</li><li><code>drawString(String s)</code></li></ul></li><li>drawLine<ul><li>画线</li><li><code>drawLine(x1,y1,x2,x2)</code>，分别为起始结束点</li></ul></li><li>drawRect<ul><li>画矩形</li><li><code>drawRec(x,y,w,h)</code>，xy 为左上角点，wh 为宽度和长度</li></ul></li><li>drawOval<ul><li>画圆</li><li><code>drawOval(x,y,w,h)</code>，矩形内接圆</li></ul></li><li>drawArc<ul><li>画弧</li><li><code>drawArc(x,y,w,h,s,arcAngle)</code>，s 为起始角度，arcAngle 为跨越度数</li></ul></li></ul>        <h2 id="第九章——多线程"   >          <a href="#第九章——多线程" class="heading-link"><i class="fas fa-link"></i></a>第九章——多线程</h2>              <h3 id="实现机制"   >          <a href="#实现机制" class="heading-link"><i class="fas fa-link"></i></a>实现机制</h3>      <p><code>java.lang.Thread</code></p><p><code>java.lang.Runnable</code></p><ul><li><p>声明一个 Thread 类的子类，并覆盖 run() 方法</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mythread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">/* 覆盖该方法*/</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li><li><p>声明一个实现 Runnable 接口的类，并实现 run() 方法</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mythread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/* 实现该方法*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li></ul>        <h4 id="Thread-方法"   >          <a href="#Thread-方法" class="heading-link"><i class="fas fa-link"></i></a>Thread 方法</h4>      <ul><li>编写一个简单的程序，要求它按两个不同的时间间隔（ 1 秒和 3 秒）在屏幕上连续显示当前时间。</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimePrinter</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> pauseTime;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TimePrinter</span><span class="params">(<span class="keyword">int</span> x, String n)</span> </span>&#123;</span><br><span class="line">        pauseTime = x;</span><br><span class="line">        name = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(name + <span class="string">&quot;:&quot;</span> + <span class="keyword">new</span> Date(System.currentTimeMillis()));</span><br><span class="line">                Thread.sleep(pauseTime);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                System.out.println(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        TimePrinter tp1 = <span class="keyword">new</span> TimePrinter(<span class="number">1000</span>, <span class="string">&quot;Fast Guy&quot;</span>);</span><br><span class="line">        tp1.start();</span><br><span class="line">        TimePrinter tp2 = <span class="keyword">new</span> TimePrinter(<span class="number">3000</span>, <span class="string">&quot;Slow Guy&quot;</span>);</span><br><span class="line">        tp2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="Runnable-方法"   >          <a href="#Runnable-方法" class="heading-link"><i class="fas fa-link"></i></a>Runnable 方法</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimePrinter</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> pauseTime;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TimePrinter</span><span class="params">(<span class="keyword">int</span> x, String n)</span> </span>&#123;</span><br><span class="line">        pauseTime = x;</span><br><span class="line">        name = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(name + <span class="string">&quot;:&quot;</span> + <span class="keyword">new</span> Date(System.currentTimeMillis()));</span><br><span class="line">                Thread.sleep(pauseTime);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                System.out.println(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> TimePrinter(<span class="number">1000</span>, <span class="string">&quot;Fast Guy&quot;</span>));</span><br><span class="line">        t1.start();</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> TimePrinter(<span class="number">3000</span>, <span class="string">&quot;Slow Guy&quot;</span>));</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="Thread-类"   >          <a href="#Thread-类" class="heading-link"><i class="fas fa-link"></i></a>Thread 类</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">new</span> Thread().start();</span><br><span class="line">setPriority();<span class="comment">//1-10，10最紧急</span></span><br></pre></td></tr></table></div></figure>        <h3 id="同步互斥"   >          <a href="#同步互斥" class="heading-link"><i class="fas fa-link"></i></a>同步互斥</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">( )</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*…*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">( )</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*…*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ul><li>设计两个线程，其中一个线程 IncThread，工作流程为循环 10 次，每次对共享变量 J 增加 1（函数为 inc()），另外一个线程 DecThread，工作流程为循环 10 次，每次对共享变量 J 减少 1(函数为 dec())，在主程序中启动两个线程进行并发执行。在改写数据过程中利用同步机制保障数据的一致性</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">inc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        i++;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">dec</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        i--;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IncThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    Data d;</span><br><span class="line"></span><br><span class="line">    IncThread(Data d) &#123;</span><br><span class="line">        <span class="keyword">this</span>.d = d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">this</span>.d.inc();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    Data d;</span><br><span class="line"></span><br><span class="line">    DecThread(Data d) &#123;</span><br><span class="line">        <span class="keyword">this</span>.d = d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">this</span>.d.dec();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Data d = <span class="keyword">new</span> Data();</span><br><span class="line">        <span class="keyword">new</span> IncThread(d).start();</span><br><span class="line">        <span class="keyword">new</span> DecThread(d).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="第十章——网络编程"   >          <a href="#第十章——网络编程" class="heading-link"><i class="fas fa-link"></i></a>第十章——网络编程</h2>      <p><code>java.net.*</code></p>        <h3 id="TCP-通信"   >          <a href="#TCP-通信" class="heading-link"><i class="fas fa-link"></i></a>TCP 通信</h3>      <ul><li>服务方</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ServerSocket svrsoc = <span class="keyword">null</span>;</span><br><span class="line">        Socket soc = <span class="keyword">null</span>;</span><br><span class="line">        BufferedReader in = <span class="keyword">null</span>;</span><br><span class="line">        PrintStream out = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            svrsoc = <span class="keyword">new</span> ServerSocket(<span class="number">8000</span>); <span class="comment">// 构造rverSockets对象，端口为8000</span></span><br><span class="line">            soc = svrsoc.accept(); <span class="comment">// 服务者等待一个连接，返回新套接口soc</span></span><br><span class="line">            in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(soc.getInputStream()));</span><br><span class="line">            out = <span class="keyword">new</span> PrintStream(soc.getOutputStream());<span class="comment">// 在新套接口soc上构造 // PrintStream对象out</span></span><br><span class="line">            InetAddress clientIP = soc.getInetAddress(); <span class="comment">// 得到顾客方IP地址</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Client&#x27;s IP address:&quot;</span> + clientIP);</span><br><span class="line">            out.println(<span class="string">&quot;Welcome!...&quot;</span>);</span><br><span class="line">            String str = in.readLine(); <span class="comment">// 在in上读一行</span></span><br><span class="line">            <span class="keyword">while</span> (!str.equals(<span class="string">&quot;quit&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">// 如读出的不是“quit”,继续读</span></span><br><span class="line">                System.out.println(<span class="string">&quot;Client said:&quot;</span> + str);</span><br><span class="line">                str = in.readLine();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;Client want to leave.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Error:&quot;</span> + e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            in.close();</span><br><span class="line">            out.close();</span><br><span class="line">            soc.close();</span><br><span class="line">            svrsoc.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ul><li>客户方</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Socket soc = <span class="keyword">null</span>;</span><br><span class="line">        BufferedReader in = <span class="keyword">null</span>;</span><br><span class="line">        PrintWriter out = <span class="keyword">null</span>;</span><br><span class="line">        String strin = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            soc = <span class="keyword">new</span> Socket(<span class="string">&quot;localhost&quot;</span>, <span class="number">8000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Connecting to the Server...&quot;</span>);</span><br><span class="line">            in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(soc.getInputStream()));</span><br><span class="line">            out = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(soc.getOutputStream())), <span class="keyword">true</span>);</span><br><span class="line">            strin = in.readLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;Server said:&quot;</span> + strin);</span><br><span class="line">            <span class="keyword">byte</span> bmsg[] = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">20</span>];</span><br><span class="line">            System.in.read(bmsg);</span><br><span class="line">            String msg = <span class="keyword">new</span> String(bmsg);</span><br><span class="line">            msg = msg.trim();</span><br><span class="line">            out.println(msg);</span><br><span class="line">            <span class="keyword">while</span> (!msg.equals(<span class="string">&quot;quit&quot;</span>)) &#123;</span><br><span class="line"></span><br><span class="line">                System.in.read(bmsg);</span><br><span class="line">                msg = <span class="keyword">new</span> String(bmsg);</span><br><span class="line"></span><br><span class="line">                msg = msg.trim();</span><br><span class="line">                out.println(msg);</span><br><span class="line">                <span class="comment">// System.out.println(msg);</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// out.println(strout);</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Error: &quot;</span> + e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            in.close();</span><br><span class="line">            out.close();</span><br><span class="line">            soc.close();</span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> 课程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Java期末复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>硬件课程设计——自动售货机（汇编）</title>
      <link href="/2019/12/11/%E7%A1%AC%E4%BB%B6%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1-%E8%87%AA%E5%8A%A8%E5%94%AE%E8%B4%A7%E6%9C%BA/"/>
      <url>/2019/12/11/%E7%A1%AC%E4%BB%B6%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1-%E8%87%AA%E5%8A%A8%E5%94%AE%E8%B4%A7%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[        <h2 id="绪论"   >          <a href="#绪论" class="heading-link"><i class="fas fa-link"></i></a>绪论</h2>              <h3 id="研究背景及意义"   >          <a href="#研究背景及意义" class="heading-link"><i class="fas fa-link"></i></a>研究背景及意义</h3>      <p>随着网络技术的发展, 网络购物已经成为人们的第二大购物体验。而对于用户来讲, 自动售货机既具备传统实体店的即视选择优点, 又由于其分布零散、范围广阔、支付方便等特点可与网店购物媲美, 而在全世界范围内得到了广泛应用。自动售货机是商业自动化的常用设备，它不受时间、地点的限制，能节省人力、方便交易。</p><p>随着信息科技时代的到来，人们的生活与消费方式发生重大改变。自动售货机的发展要把人们因工作生活方式改变产生的需求，通过科学技术提升进行解决。不仅仅只提升自动售货机在市场的占有率，重要的是从自动售货机用户体验出发，提高自动售货机的质量及功能，抢占新零售时代新的消费方式的机遇。使自动售货机成为人们工作、生活服务功能单元的一部分，清晰自动售货机在新零售时代的定位，成为一个时代及相应群体的生活标志，这样自动售货机时代才是真正来临。</p><span id="more"></span>        <h3 id="设计任务及要求"   >          <a href="#设计任务及要求" class="heading-link"><i class="fas fa-link"></i></a>设计任务及要求</h3>              <h4 id="设计任务"   >          <a href="#设计任务" class="heading-link"><i class="fas fa-link"></i></a>设计任务</h4>      <p>自动售货机系统基本功能和扩展功能如下表所示</p><div class="table-container"><table><thead><tr><th align="center">基本功能</th><th align="center">扩展功能</th></tr></thead><tbody><tr><td align="center">LCD 显示商品</td><td align="center">LCD 屏显示商品名称及余量</td></tr><tr><td align="center">K1、K2 键模拟选择 4 种商品</td><td align="center">中断检测键盘按键</td></tr><tr><td align="center">K3 键为确认选择商品</td><td align="center">商品价格显示</td></tr><tr><td align="center">电机转动模拟出货</td><td align="center">用户扫描二维码付款</td></tr><tr><td align="center">电机硬延时转动 1 秒</td><td align="center">商品无货，提示用户</td></tr><tr><td align="center"></td><td align="center">管理员输入密码上货</td></tr><tr><td align="center"></td><td align="center">管理员查看收益</td></tr><tr><td align="center"></td><td align="center">商品保温，数码管显示</td></tr></tbody></table></div><p>利用 8255、8253、0832、LED 屏显示模拟自动售货机，设定 K1、K2 键模拟 4 种商品 K3 键为确认购买。当选择好购买种商品由 LCD 屏显示后，0832 控制电机转动 1 秒（1 秒时间由 8253 提供）。</p>        <h4 id="设计要求"   >          <a href="#设计要求" class="heading-link"><i class="fas fa-link"></i></a>设计要求</h4>      <ul><li>使用汇编语言，利用宏（macro）和子程序（proc）优化代码</li><li>设计系统电路图</li><li>绘制系统各功能流程图</li><li>学习 LCD 屏的使用方法，显示字符与绘制图像</li><li>学习 8259 芯片，使用中断控制</li><li>使用两个数码管，分别表示温度的十位与个位</li><li>使用 8253 芯片，使电机转动 1 秒</li><li>密码匹配检测输入密码是否正确</li></ul>        <h2 id="系统设计需求分析"   >          <a href="#系统设计需求分析" class="heading-link"><i class="fas fa-link"></i></a>系统设计需求分析</h2>              <h3 id="开发环境及开发平台"   >          <a href="#开发环境及开发平台" class="heading-link"><i class="fas fa-link"></i></a>开发环境及开发平台</h3>      <blockquote><p>开发环境：HQFC-A 实验箱及 HQFC-A 微机接口软件</p><p>开发语言：汇编</p><p>开发平台：Windows 7 操作系统</p></blockquote>        <h3 id="设计的主要算法及分析"   >          <a href="#设计的主要算法及分析" class="heading-link"><i class="fas fa-link"></i></a>设计的主要算法及分析</h3>      <ul><li>LCD 屏字符显示<ul><li>首先确定输出位置，LCD 可以显示四行中文，起始地址分别为：80H、90H、88H 和 98H，每行可以显示八个汉字，显示地址为前一个汉字地址加一。先设定 DDRAM 地址，输出显示起始地址，然后将 D/I 端置 0，为数据端，R/W 置为 0，为写入端，使能信号置 1，再置为 0。因为汉字占用 16 位两个字节，需要依次输出汉字编码高字节和低字节，需要将 D/I 端置 1，才能输出汉字。</li></ul></li><li>货物余量计算<ul><li>在数据段设置物品余量的变量，当用户购选择相应货物时，首先判断余量个位是否为 0，若不为 0，则显示货物价格和付款二维码，待用户付款后，个位数字减 1，否则再判断十位是否为 0，若为 0，则输出“库存不足”，否则显示货物价格和付款二维码，待用户付款后，十位数字减 1，个位数字变为 9。</li></ul></li><li>密码匹配<ul><li>当管理员按下补货按钮时，提示输入口令，管理员输入的密码实时显示在 LCD 上，每输入一位，后台就将临时地址相应位置的值改为输入值，等输入 4 位密码后，自动检查密码是否与预设密码匹配，若匹配，则打开货仓，进行补货，否则输出“密码错误”。</li></ul></li><li>按键确定<ul><li>首先向键盘每一行都输入 0，然后检查键盘列值是否有 0 输出，且持续 20ms 以上，若无，则继续检测是否有按键按下，否则，依次向每行输出 0，然后检测每一行的另一端是否均为 1，若不是则转去编码。</li></ul></li><li>收益计算<ul><li>每当用户成功购买商品，则收益加上相应的值。查看时，首先将收益值赋值给 AX，除以 64H（十进制 100），商在 AL，余数在 AH，继续对余数除 0AH（十进制 10），得到商和余数，就可以获得整个收益的百位、个位和十位值。</li></ul></li><li>LCD 显示图像<ul><li>首先关闭 LCD 的绘图显示功能（34H），然后将水平的位元祖坐标（X）写入 RAM 地址，再将垂直的坐标（Y）写入绘图 RAM 地址，之后连续向 RAM 写入两个 8 位的图片编码，循环直到图片编码全部写完，最后打开绘图功能显示功能，图片就可以显示完全。</li></ul></li></ul>        <h3 id="系统的组成及工作原理"   >          <a href="#系统的组成及工作原理" class="heading-link"><i class="fas fa-link"></i></a>系统的组成及工作原理</h3>      <ul><li>8255 芯片<ul><li>8255 是可编程并行 I/O 接口芯片，有 3 个 8 位并行 I/O 口。具有 3 个通道 3 种工作方式的可编程并行接口芯片（40 引脚）。通过向 8255 的控制字寄存器写入方式选择字，就可以规定 3 个口的工作方式。</li></ul></li><li>8259A 芯片<ul><li>8258A 芯片是可编程中断控制器，通过对它进行编程，写入初始化命令字 ICW 和控制命令字 OCW。中断的来源除了来自于硬件自身的 NMI 中断和来自于软件的 INT n 指令造成的软件中断之外，还有来自于外部硬件设备的中断，这些中断是可屏蔽的。这些中断也都通过可编程中断控制器 PIC 进行控制，并传递给 CPU。</li></ul></li><li>DAC0832 芯片<ul><li>DAC0832 是 8 位的 D/A 转换集成芯片。D/A 转换器由 8 位输入锁存器、8 位 DAC 寄存器、8 位 D/A 转换电路及转换控制电路构成。可以把从 CPU 送来的数据先打入输入寄存器，在需要进行 D/A 转换时，再选通 DAC 寄存器，实现 D/A 转换，本次实验所用芯片为单缓冲。</li></ul></li><li>ADC0809<ul><li>ADC0809 是 8 位的 A/D 转换集成芯片。使用 CBA 引脚确认转换通道，在 START 和 ALE 脚上加一个正脉冲，将通道选择码锁存并启动 A/D 转。转换开始后，EOC 变低，经过 64 个时钟周期后，转换结束，EOC 变高。转换结束后，通过 IN 指令，设法在 OE 脚上形成一个高电平脉冲，打开输出缓冲的三态门，让转换后的数字量出现在数据总线上，并被读入累加器中。</li></ul></li><li>LCD 屏<ul><li>液晶显示模块是 128×64 点阵的汉字图形型液晶显示模块，可显示汉字及图形，内置 8192 个中文汉字（16X16 点阵）、128 个字符（8X16 点阵）及 64X256 点阵显示 RAM（GDRAM）。可与 CPU 直接接口，提供两种界面来连接微处理机：8-位并行及串行两种连接方式。具有多种功能：光标显示、画面移位、睡眠模式等。使用不同的指令可以使用相应的功能，比如：清除、写字符、绘图等。</li></ul></li><li>数码管<ul><li>由多个发光二极管封装在一起组成“8”字型的器件，引线已在内部连接完成。每个数码管加上小数点，由八个 LED 灯组成，用 a、b、c、d、e、f、g 和 dp 来表示各个 LED 灯，向八个引脚输出不同的电平可以显示不同的字符。</li></ul></li></ul>        <h2 id="系统的总体设计"   >          <a href="#系统的总体设计" class="heading-link"><i class="fas fa-link"></i></a>系统的总体设计</h2>              <h3 id="系统功能层次图"   >          <a href="#系统功能层次图" class="heading-link"><i class="fas fa-link"></i></a>系统功能层次图</h3>      <p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200213200246.png" alt="层次图"></p>        <h3 id="系统功能设计"   >          <a href="#系统功能设计" class="heading-link"><i class="fas fa-link"></i></a>系统功能设计</h3>      <ul><li><p><strong>商品购买</strong></p><ul><li>利用键盘选择商品编号和确认选择商品，LCD 屏展示商品列表、付款二维码和商品购买结果。</li></ul></li><li><p><strong>商品出货：</strong></p><ul><li>利用 8253 硬件延时 1 秒，控制电机转动的时间，LCD 屏显示出货结果。</li></ul></li><li><p><strong>收益查询：</strong></p><ul><li>利用数据段一个数据保存自动售货机的收益金额，键盘控制选择查询收益，LCD 屏用于展示收益金额。</li></ul></li><li><p><strong>补货模块：</strong></p><ul><li>利用键盘控制补货选择和密码的输入，数据段保存输入密码和预密码，LCD 屏显示密码的正确与否，进而可以控制货仓能否打开。</li></ul></li><li><p><strong>商品保温模块：</strong></p><ul><li>利用温度扩展版获取当前温度的模拟量，用 ADC0809 芯片将模拟量转为数字量，进行标准化，进而在两个七位数码管显示当前的温度。</li></ul></li></ul>        <h3 id="系统电路图"   >          <a href="#系统电路图" class="heading-link"><i class="fas fa-link"></i></a>系统电路图</h3>      <p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200213200307.png" alt="系统电路图"></p>        <h2 id="系统的详细设计"   >          <a href="#系统的详细设计" class="heading-link"><i class="fas fa-link"></i></a>系统的详细设计</h2>              <h3 id="商品购买模块设计"   >          <a href="#商品购买模块设计" class="heading-link"><i class="fas fa-link"></i></a>商品购买模块设计</h3>              <h4 id="程序流程图或算法流程图"   >          <a href="#程序流程图或算法流程图" class="heading-link"><i class="fas fa-link"></i></a>程序流程图或算法流程图</h4>      <p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200213200414.png" alt="购买商品模块流程图"></p>        <h4 id="系统功能实现"   >          <a href="#系统功能实现" class="heading-link"><i class="fas fa-link"></i></a>系统功能实现</h4>      <p>首先 LCD 屏会展示当前自动售货机的商品和其余量，当用户选择一个有余量的商品，按下相应编号的按键，LCD 显示屏会展示商品的价格和二维码，用户扫码后，按下确认键，电机就会转动，进行出货。</p>        <h4 id="运行界面截图"   >          <a href="#运行界面截图" class="heading-link"><i class="fas fa-link"></i></a>运行界面截图</h4>      <p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200213200433.jpg" alt="商品购买运行截图1"></p><p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200213200449.jpg" alt="商品购买运行截图1"></p>        <h3 id="出货模块设计"   >          <a href="#出货模块设计" class="heading-link"><i class="fas fa-link"></i></a>出货模块设计</h3>              <h4 id="程序流程图或算法流程图-1"   >          <a href="#程序流程图或算法流程图-1" class="heading-link"><i class="fas fa-link"></i></a>程序流程图或算法流程图</h4>      <p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200213200504.png" alt="出货模块流程图"></p>        <h4 id="系统功能实现-1"   >          <a href="#系统功能实现-1" class="heading-link"><i class="fas fa-link"></i></a>系统功能实现</h4>      <p>用户成功购买商品后，会执行两段不同操。一是，8253 初始化，延时 1s，然后向 0832 输出高电平，电机转动，模拟商品出货，LCD 屏显示正在出货，当 1s 结束后，电机停止转动，LCD 屏显示出货成功。二是，当物品出货完成后，需要修改库存和增加收益。首先判断相应商品的余量个位是否为 0，若为 0，继续判断十位是否为 1，若为 1，则十位置为 0，个位置为 9，若个位不为 0，则置个位为原来值减 1。然后，库存余量存储增加相应的收益。</p>        <h4 id="运行界面截图-1"   >          <a href="#运行界面截图-1" class="heading-link"><i class="fas fa-link"></i></a>运行界面截图</h4>      <p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200213200524.jpg" alt="出货运行截图1"></p><p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200213200535.png" alt="出货运行截图2"></p><p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200213200547.png" alt="出货运行截图3"></p>        <h3 id="收益查询模块模块设计"   >          <a href="#收益查询模块模块设计" class="heading-link"><i class="fas fa-link"></i></a>收益查询模块模块设计</h3>              <h4 id="程序流程图或算法流程图-2"   >          <a href="#程序流程图或算法流程图-2" class="heading-link"><i class="fas fa-link"></i></a>程序流程图或算法流程图</h4>      <p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200213200604.png" alt="收益查询流程图"></p>        <h4 id="系统功能实现-2"   >          <a href="#系统功能实现-2" class="heading-link"><i class="fas fa-link"></i></a>系统功能实现</h4>      <p>当管理员按下收益查询按钮后，系统会获取当前的收益，由于是 16 进制储，并且需要展示在 LCD 屏上，所以需要进行计算。首先将收益值赋值给 AX，除以 64H（十进制 100），商在 AL，余数在 AH，继续对余数除 0AH（十进制 10），得到商和余数，就可以获得整个收益的百位、个位和十位，在 LCD 屏上显示即可。</p>        <h4 id="运行界面截图-2"   >          <a href="#运行界面截图-2" class="heading-link"><i class="fas fa-link"></i></a>运行界面截图</h4>      <p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200213200624.png" alt="收益查询运行截图1"></p>        <h3 id="收益查询模块设计"   >          <a href="#收益查询模块设计" class="heading-link"><i class="fas fa-link"></i></a>收益查询模块设计</h3>              <h4 id="程序流程图或算法流程图-3"   >          <a href="#程序流程图或算法流程图-3" class="heading-link"><i class="fas fa-link"></i></a>程序流程图或算法流程图</h4>      <p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200213200641.png" alt="补货模块流程图"></p>        <h4 id="系统功能实现-3"   >          <a href="#系统功能实现-3" class="heading-link"><i class="fas fa-link"></i></a>系统功能实现</h4>      <p>当管理员按下补货按钮时，LCD 屏提示输入口令打开货箱，输入四位密码，若密码正确，则打开货箱，进行补货，否则提示密码错误。最后每件商品的余量都恢复至 10 个。</p>        <h4 id="运行界面截图-3"   >          <a href="#运行界面截图-3" class="heading-link"><i class="fas fa-link"></i></a>运行界面截图</h4>      <p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200213200702.png" alt="补货模块运行截图1"></p><p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200213201034.png" alt="补货模块运行截图2"></p><p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200213201045.jpg" alt="补货模块运行截图3"></p><p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200213201055.png" alt="补货模块运行截图4"></p><p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200213201104.png" alt="补货模块运行截图5"></p>        <h3 id="商品保温模块设计"   >          <a href="#商品保温模块设计" class="heading-link"><i class="fas fa-link"></i></a>商品保温模块设计</h3>              <h4 id="程序流程图或算法流程图-4"   >          <a href="#程序流程图或算法流程图-4" class="heading-link"><i class="fas fa-link"></i></a>程序流程图或算法流程图</h4>      <p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200213201120.png" alt="商品保温流程图"></p>        <h4 id="系统功能实现-4"   >          <a href="#系统功能实现-4" class="heading-link"><i class="fas fa-link"></i></a>系统功能实现</h4>      <p>使用查询，来检测 0809 是否转换完成，若转换完成，则读取结果到 AL，并进行相应的计算（除 256 乘最高温度），得到相应的温度值，再转换为数码管的编码，进行双位显示，延时 1s 后继续检测温度，一直循环保温。</p>        <h4 id="运行界面截图-4"   >          <a href="#运行界面截图-4" class="heading-link"><i class="fas fa-link"></i></a>运行界面截图</h4>      <p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200213201138.png" alt="商品保温运行截图1"></p>        <h2 id="系统测试"   >          <a href="#系统测试" class="heading-link"><i class="fas fa-link"></i></a>系统测试</h2>              <h3 id="遇到问题及解决办法"   >          <a href="#遇到问题及解决办法" class="heading-link"><i class="fas fa-link"></i></a>遇到问题及解决办法</h3>      <ul><li><p><strong>JE、JNZ 跳转不能过长</strong></p><ul><li>这些指令属于条件转移指令，在 8086 系统中属于短转移，转移范围在-127 到+127 字节之间。可以通过一个中间标签进行跳转来解决，如：“JNZ TEMP1 TEMP1:JMP G1”。</li></ul></li><li><p><strong>LCD 屏绘图，图片不显示</strong></p><ul><li>LCD 屏绘图需要先关闭绘图显示功能，然后写入 X 和 Y 值，再继续写入图像的编码值，最后再打开绘图功能。LCD 屏是 128<em>64 的点阵，但是在绘图中，就为 8</em>32 的坐标点，原点坐标值为（80H,80H），了解到了这些，绘图显示才真正的会使用了。</li></ul></li><li><p><strong>LCD 屏绘制一半图，另一半写字符异常</strong></p><ul><li>在实验箱上的 LCD 屏中，如果写入右侧的图像，但是不写入左侧的图像，左侧图像默认会与右侧图像一致，所以也需要向左侧 LCD 屏写入空白图像（00H），类似于清除 GDRAM，在写入字符的时候，就不会出现图像和字符一起显示的异常了，在下次写入整屏字符时，需要先清屏才能正确显示字符。</li></ul></li><li><p><strong>键盘中断检测不可用：</strong></p><ul><li>虽然书上的 8259 芯片的使用方法已经掌握了，但是由于没有仔细看试验箱的构造，导致将从片误认为主片，一直出不来实验结果。之后了解构造后，在使用主片时又出现了问题，因为系统已经默认给主片进行了初始化，并且是系统中断，在键盘检测的过程中，屏蔽中断不可用，会导致一直发生中断，进而系统异常，达到不了预期效果。</li></ul></li><li><p><strong>INC [BX]错误</strong></p><ul><li>INC 是加 1 指令，INC 后面放的是操作数，这个操作数可以是通用寄存器或是存储器。但是当为存储器时就不能直接写 INC [BX]，[BX]是一个存储器的地址，必须用 PTR 指令指明这个地址的类型,可以写 INC BYTE PTR [BX],这样就表示[BX]这个地址指示的是一个字节,这样就可使[BX]中的内容加 1。如果不指明类型，计算机不确定是[BX]所指字节加 1，还是[BX]和[BX+1]所指的字进行加 1。</li></ul></li><li><p><strong>代码冗余：</strong></p><ul><li>使用宏和子程序优化代码。宏可以加参数，类似 C 语言中宏定义所写的函数，但是注意标签不能重复，因为宏代码段是在编译的过程中是直接替换原来的宏调用的，会造成标签重复定义。子程序类似 C 语言中的函数用“CALL 子程序名”来调用，其中若定义标签可以在子程序开始写“LOCAL 标签名”来声明，这样就不会报重复定义的异常。</li></ul></li><li><p><strong>MOV AX,CS 与 MOV AX,DATA</strong></p><ul><li><p>“MOV AX,CS MOV DS,AX”作用是让数据段和代码段是同一个段，能让编译出来的程序节省几个字节的大小。</p></li><li><p>“MOV AX,DATA MOV DS,AX”，DATA 为数据段的段地址，执行这两段代码后，数据段的段地址被送入 DS 寄存器，这样对数据段中所有数据进行存取时，就不用再考虑这些数据所在位置的段地址。</p></li></ul></li><li><p><strong>使用 DOS 设置中断，造成数据段获取异常</strong></p><ul><li>在程序“ASSUME CS:CODE,DS:DATA”中，已经将数据段的段地址放入段地址，在设置中断向量的时候，DS 寄存器的值又会被重新覆盖，造成无法正确取得数据段相应的值，所以需要先执行“PUSH DS”，将 DS 压入栈再设置中断向量，设置完成后，再执行“POP DS”，将数据段的段地址恢复，这样，在使用数据段的时候就不会发生异常了。</li></ul></li></ul>        <h3 id="测试结果"   >          <a href="#测试结果" class="heading-link"><i class="fas fa-link"></i></a>测试结果</h3>      <div class="table-container"><table><thead><tr><th align="center">测试项</th><th align="center">说明</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">LCD 屏显示商品名称及余量</td><td align="center">根据数据段数据显示。</td><td align="center">√</td></tr><tr><td align="center">中断检测键盘按键</td><td align="center">由于系统已初始化 8259 主片，改为由脉冲触发中断，再检测键盘。</td><td align="center">√</td></tr><tr><td align="center">商品价格显示</td><td align="center">根据所选商品的编号来显示。</td><td align="center">√</td></tr><tr><td align="center">确认选择商品</td><td align="center">检测键盘确认键。</td><td align="center">√</td></tr><tr><td align="center">用户二维码付款</td><td align="center">掌握绘图要领，并且对图片编码达到效果</td><td align="center">√</td></tr><tr><td align="center">电机模拟出货 1 秒</td><td align="center">用两个 8253 通道累加延时</td><td align="center">√</td></tr><tr><td align="center">管理员输入密码上货</td><td align="center">根据输入密码与预设密码匹配</td><td align="center">√</td></tr><tr><td align="center">管理员查看收益</td><td align="center">设计算法取得收益百位、十位与个位</td><td align="center">√</td></tr><tr><td align="center">商品保温，数码管显示</td><td align="center">由扩展版获得的温度，设置上下限，硬延时获取</td><td align="center">√</td></tr></tbody></table></div>        <h2 id="系统设计结果分析及结论"   >          <a href="#系统设计结果分析及结论" class="heading-link"><i class="fas fa-link"></i></a>系统设计结果分析及结论</h2>      <p>整个系统的设计的花费了两周的时间，主要时间花费在 LCD 屏扩展功能的学习和 8259 芯片的学习中，这也让我的系统功能更加趋于生活。总得来说系统的设计结果达到了预想的效果。通过 8255 芯片和简单输入输出芯片的输入输出控制，结合 8086 CPU，8253 芯片和 8259 芯片等，使输出结果显示在 LCD 屏和数码管上。经过同学的测试使用和反馈，自动收货机系统逐渐完善。</p><p>但是系统也是存在一些不足，比如说，由于 LCD 显示区域的限制，不能将商品的全部信息全部显示出来，价格显示就放在了商品详情栏里面；还有，预期设想的是键盘按键直接触发中断，这样就不占用系统 CPU，系统利用率就会提高，但实际操作做了折中，这里也可以改进。</p><p>当然系统也是有一些优点，比如说，将操作员钥匙打开货箱改为输入密码验证；由于移动支付的普及，校内很少有硬币的自动售货机，所以就在系统上面加上了二维码扫码支付的功能；12 月的天气比较冷，大家当然想喝热的饮料或者奶茶，所以系统就增加了保温的功能，等等。这些功能都是设计的系统逐渐贴近生活，贴近现实的写照。</p>        <h2 id="设计心得"   >          <a href="#设计心得" class="heading-link"><i class="fas fa-link"></i></a>设计心得</h2>      <p>经过自动售货机系统的设计，我对微型计算机原理和接口的整体理解更加加深，在上学期微机接口的学习过程中，主要是理解和使用一些常用的芯片，很少很多芯片结合来使用。</p><p>这次硬件课程设计不仅锻炼了我对硬件系统的整体设计能力，代码编写能力，更重要的是提高了自我学习的能力。对于系统中的 LCD 屏，8259 芯片，课堂没有讲解过，主要通过我们互相讨论与查看有关资料。在做 LCD 屏绘图的功能时，由于对绘图功能了解很浅，芯片资料讲解的也是很少，很难理解，所以就在网上查阅资料，经过多次查找和总结终于明白了绘图的详细思路，有一种茅塞顿开的感觉，编写代码，实际测试又出现了问题，但是也解决了。还有，在学习 8259 芯片做中断的过程中，书上讲解的原理都掌握了，在使用模拟软件测试的过程中，键盘的检测一直循环触发中断，和同学讨论，发现了一个问题，就是启动了 IR0 中断，它不会自动屏蔽再次触发 IR0 中断，需要在调用中断子程序的时候屏蔽自己，这样循环中断的问题就解决了，但是实际操作又是不一样，捣鼓了几节课还是不出来结果，询问老师，才发现试验箱上的 8259 芯片为从片，不是主片，一语中的，最后问题也到了解决。</p><p>在代码编写的过程中，有一些指令以前没有使用过，所以也进行了相应的学习，期间也发现了汇编语言中可以使用宏来编写代码，这样就可以加上参数，这大大的减少了代码的长度，代码可读性也得到了提高，通过这些代码的编写，我对于更接近底层的汇编语言理解更加透彻。</p><p>总体来说，这次硬件课程设计的过程中，我收获的很多，让我真正的从理论转到了实践。在这里要感谢老师和同学的帮助，如果不是他们的帮助，我的硬件课程设计可能也达到不了现在的效果，也要感谢老师的鼓励，使我这个系统的功能更加完善，更加贴近实际生活。虽然可能以后汇编语言的使用可能会很少，但是学习到的原理知识是相通的，我会在学习的路上一直前进。</p>        <h2 id="代码"   >          <a href="#代码" class="heading-link"><i class="fas fa-link"></i></a>代码</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://github.com/Pandalzy/Vending-Machine-Compilation" >Vending-Machine-Compilation</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>]]></content>
      
      
      <categories>
          
          <category> 课程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 硬件课程设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决hexo博客数学公式问题</title>
      <link href="/2019/12/10/%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E9%97%AE%E9%A2%98/"/>
      <url>/2019/12/10/%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[        <h2 id="更换-markdown-渲染引擎"   >          <a href="#更换-markdown-渲染引擎" class="heading-link"><i class="fas fa-link"></i></a>更换 markdown 渲染引擎</h2>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></div></figure><span id="more"></span>        <h2 id="解决语义冲突"   >          <a href="#解决语义冲突" class="heading-link"><i class="fas fa-link"></i></a>解决语义冲突</h2>      <p><strong>node_modules\kramed\lib\rules\inline.js</strong>目录中，</p><p>原来文件 11 行进行如下修改</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//escape: /^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/,</span></span><br><span class="line"><span class="built_in">escape</span>: <span class="regexp">/^\\([`*\[\]()#$+\-.!_&gt;])/</span>,</span><br></pre></td></tr></table></div></figure><p>原来文件 20 行进行如下修改</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span></span><br><span class="line">em: <span class="regexp">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</span><br></pre></td></tr></table></div></figure>        <h2 id="主题中开启-MathJax-开关"   >          <a href="#主题中开启-MathJax-开关" class="heading-link"><i class="fas fa-link"></i></a>主题中开启 MathJax 开关</h2>      <p>在<strong>themes</strong>目录中打开使用的主题文件夹，修改 <strong>_config.yml</strong>文件</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mathjax: true</span><br></pre></td></tr></table></div></figure><p>或者</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Math Equations Render Support</span><br><span class="line">math:</span><br><span class="line">  enable: true</span><br><span class="line"></span><br><span class="line">  # Default(true) will load mathjax&#x2F;katex script on demand</span><br><span class="line">  # That is it only render those page who has &#39;mathjax: true&#39; in Front Matter.</span><br><span class="line">  # If you set it to false, it will load mathjax&#x2F;katex srcipt EVERY PAGE.</span><br><span class="line">  per_page: true</span><br><span class="line"></span><br><span class="line">  engine: mathjax</span><br><span class="line">  #engine: katex</span><br></pre></td></tr></table></div></figure>        <h2 id="文章配置打开-mathjax-开关（非必选）"   >          <a href="#文章配置打开-mathjax-开关（非必选）" class="heading-link"><i class="fas fa-link"></i></a>文章配置打开 mathjax 开关（非必选）</h2>      <figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">date: 2019-11-23 21:08:20</span><br><span class="line">tags: [Java程序设计实验,java]</span><br><span class="line">categories: 课程学习</span><br><span class="line">mathjax: true</span><br></pre></td></tr></table></div></figure>        <h2 id="效果图"   >          <a href="#效果图" class="heading-link"><i class="fas fa-link"></i></a>效果图</h2>      <blockquote><p>$$<br>\begin{bmatrix}4&amp;1&amp;5\2&amp;2&amp;0\end{bmatrix}*\begin{bmatrix}5&amp;0\3&amp;2\6&amp;6\end{bmatrix}<br>$$</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java程序设计实验</title>
      <link href="/2019/11/23/Java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AE%9E%E9%AA%8C/"/>
      <url>/2019/11/23/Java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AE%9E%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[        <h2 id="实验一"   >          <a href="#实验一" class="heading-link"><i class="fas fa-link"></i></a>实验一</h2>      <blockquote><p>1、编写一程序，运行后从键盘输入三个整数，输出其中的最大数。（if 语句）</p></blockquote><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxValue</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> a = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> b = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> c = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> max;</span><br><span class="line">            <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">                max = a;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                max = b;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (c &gt; max) &#123;</span><br><span class="line">                max = c;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;MaxValue=&quot;</span> + max);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            sc.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><span id="more"></span><blockquote><p>2、编写一程序，将从键盘输入的一个百分制考试成绩转化为五分制输出。百分制与五分制的对应如下： (switch 语句)100<del>90 — A, 89</del>80 — B, 79<del>70 — C, 69</del>60 — D, &lt;60 — E</p></blockquote><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GradeRank</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> grade;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        GradeRank gr = <span class="keyword">new</span> GradeRank();</span><br><span class="line">        Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            gr.grade = s.nextInt();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            s.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">switch</span> (gr.grade / <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;E&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;D&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;Error input.&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="实验二"   >          <a href="#实验二" class="heading-link"><i class="fas fa-link"></i></a>实验二</h2>      <blockquote><p>1、打印一个三角形的 1~9 的乘法表。</p><p>0 1 2 3 4 5 6 7 8 9<br>1 1<br>2 2 4<br>3 3 6 9<br>4 4 8 12 16<br>5 5 10 15 20 25<br>6 6 12 18 24 30 36<br>7 7 14 21 28 35 42 49<br>8 8 16 24 32 40 48 56 64<br>9 9 18 27 36 45 54 63 72 81</p></blockquote><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MulSheet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printSheet</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">                System.out.print(i * j + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        MulSheet ms = <span class="keyword">new</span> MulSheet();</span><br><span class="line">        ms.printSheet(<span class="number">9</span>, <span class="number">9</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><blockquote><p>2、编写一程序，将从键盘输入的每个星期(整数)显示出其对应的英文，直至输入 0 结束，注意对非法数据的处理。 (while,switch 语句)</p></blockquote><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeekShow</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (n) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;Mon.&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;Tues.&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;Wed.&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;Thur.&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;Fri.&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;Sat.&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;Sun.&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;Error input.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        WeekShow ws = <span class="keyword">new</span> WeekShow();</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            n = s.nextInt();</span><br><span class="line">            <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">                ws.show(n);</span><br><span class="line">                n = s.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            s.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><blockquote><p>3、打印图案：一个由 n 行星花组成的三角形。如 n=5 时的图案为：</p></blockquote><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    *</span><br><span class="line">   * *</span><br><span class="line">  * * *</span><br><span class="line"> * * * *</span><br><span class="line">* * * * *</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TriFlower</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printFlower</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = n - i; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;* &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        TriFlower tf = <span class="keyword">new</span> TriFlower();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> n = s.nextInt();</span><br><span class="line">            tf.printFlower(n);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            s.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><blockquote><p>4、打印出所有的“水仙花数”。所谓“水仙花数”是指一个三位数，其各位数字的立方和等于该数本身。例如 153 是一个“水仙花数”，因为 153=13+53+33。</p></blockquote><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowerNum</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">100</span>; i &lt;= <span class="number">999</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> a = i / <span class="number">100</span>;</span><br><span class="line">            <span class="keyword">int</span> b = i / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">int</span> c = i % <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (Math.pow(a, <span class="number">3</span>) + Math.pow(b, <span class="number">3</span>) + Math.pow(c, <span class="number">3</span>) == i) &#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FlowerNum fn = <span class="keyword">new</span> FlowerNum();</span><br><span class="line">        fn.printNum();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><blockquote><p>5、编写一个程序，从键盘读一个年份的数字，然后判断该年是否是闰年，如果是就输出“闰年”，如果不是就输出“非闰年”。</p><p>闰年的条件是满足以下两个条件之一：</p><p>1）能被 4 整除，但不能被 100 整除；</p><p>2）能被 4 整除，又能被 400 整除。</p></blockquote><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeapYear</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">ifLeap</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;n%<span class="number">100</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n%<span class="number">400</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        LeapYear ly = <span class="keyword">new</span> LeapYear();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> n = s.nextInt();</span><br><span class="line">            <span class="keyword">if</span>(ly.ifLeap(n))&#123;</span><br><span class="line">                System.out.println(n+<span class="string">&quot; is a leap year.&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(n+<span class="string">&quot; is not a leap year.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            s.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><blockquote><p>6、统计个位数是 6，并且能被 3 整除的五位数共有多少个。</p></blockquote><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumSum</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> numSum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">10000</span>; i &lt;= <span class="number">99999</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">10</span> != <span class="number">6</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    numSum++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        NumSum ns = <span class="keyword">new</span> NumSum();</span><br><span class="line">        ns.sum();</span><br><span class="line">        System.out.println(ns.numSum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><blockquote><p>7、编写一个程序，在其中建立一个有 10 个整数的数组，运行后从键盘输入 10 个数，然后输出其中的最小数。</p></blockquote><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinNum</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printMin</span><span class="params">(<span class="keyword">int</span> a[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> min = a[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &lt; min) &#123;</span><br><span class="line">                min = a[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(min);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> a[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        MinNum mn = <span class="keyword">new</span> MinNum();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                a[i] = s.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">            mn.printMin(a);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            s.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><blockquote><p>8、编写一个程序，在其中建立一个有 10 个整数的数组，运行后从键盘输入 10 个数，然后排序(升序)后输出。</p></blockquote><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SortArray</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> a[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; a.length - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[j] &lt; a[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">int</span> t = a[j];</span><br><span class="line">                    a[j] = a[j - <span class="number">1</span>];</span><br><span class="line">                    a[j - <span class="number">1</span>] = t;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> a[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        SortArray mn = <span class="keyword">new</span> SortArray();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                a[i] = s.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">            mn.sort(a);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            s.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><blockquote><p>9、编写一个程序，找出 5 行 5 列整数矩阵中的最小元素，矩阵元素由键盘输入。</p></blockquote><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinNumMatrix</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minNum</span><span class="params">(<span class="keyword">int</span> a[][])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> min = a[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[i][j] &lt; min) &#123;</span><br><span class="line">                    min = a[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        MinNumMatrix mnm = <span class="keyword">new</span> MinNumMatrix();</span><br><span class="line">        <span class="keyword">int</span> a[][] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">                    a[i][j] = s.nextInt();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(mnm.minNum(a));</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            s.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><blockquote><p>10、编写一个程序，计算出 5 行 5 列整数矩阵的每行之和。</p></blockquote><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SumLineMatrix</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sumLine</span><span class="params">(<span class="keyword">int</span> a[][])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                sum += a[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(sum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        SumLineMatrix slm = <span class="keyword">new</span> SumLineMatrix();</span><br><span class="line">        <span class="keyword">int</span> a[][] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">                    a[i][j] = s.nextInt();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            slm.sumLine(a);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            s.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><blockquote><p>11、编写一个程序，在其中定义一个 6*6 的二维整型数组, 利用随机函数产生 36 个 10~20 之间的随机整数放入，然后将数组输出到屏幕上(6 行 6 列格式)。最后计算出数组中对角线元素的平方根和。</p></blockquote><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomNum</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printMartix</span><span class="params">(<span class="keyword">int</span> a[][])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                System.out.print(a[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            sum += Math.sqrt((<span class="keyword">double</span>) a[i][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a[][] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">6</span>][<span class="number">6</span>];</span><br><span class="line">        RandomNum rn = <span class="keyword">new</span> RandomNum();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">double</span> d = Math.random();</span><br><span class="line">                a[i][j] = <span class="number">10</span> + (<span class="keyword">int</span>) (d * <span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        rn.printMartix(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="实验三"   >          <a href="#实验三" class="heading-link"><i class="fas fa-link"></i></a>实验三</h2>      <blockquote><p>1、编一程序，求两个正整数 m、n 的最大公约数。</p><p>​ 要求程序中有两个方法，分别使用循环和递归求最大公约数，最后在主方法中分别调用这两个方法求解 56 与 91 的最大公约数。</p><p>​ 提示：用辗转相除法。</p><p>方法：(1) 求 m 除 n 的余数 r；</p><p>​ (2) 如果 r 为 0，则 n 为最大公约数，结束。否则转(3);</p><p>​ (3) 用 n 置 m，用 r 置 n ，回到(1)。</p></blockquote><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxDivisor</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">maxDivisor</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> r = m % n;</span><br><span class="line">       <span class="keyword">while</span> (r != <span class="number">0</span>) &#123;</span><br><span class="line">           m = n;</span><br><span class="line">           n = r;</span><br><span class="line">           r = m % n;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> n;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">       MaxDivisor md = <span class="keyword">new</span> MaxDivisor();</span><br><span class="line">       <span class="keyword">int</span> m, n;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           m = s.nextInt();</span><br><span class="line">           n = s.nextInt();</span><br><span class="line">           System.out.println(md.maxDivisor(m, n));</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           s.close();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><blockquote><p>2、编写一个完整的 Java Application 程序，其中设计一个复数类 Complex，利用它验证两个复数 1+2i 和 3+4i 相加产生一个新的复数 4+6i 。复数类 Complex 的设计必须满足如下要求：</p><p>1）Complex 的属性有：</p><p>​ realPart：int 型，代表复数的实数部分；</p><p>​ maginPart：int 型，代表复数的虚数部分。</p><p>2）Complex 的方法有：</p><p>​ Complex()：构造方法，将复数的实部和虚部都置 0；</p><p>​ Complex(int r , int i )：构造方法，形参 r 为实部的初值，i 为虚部的初值。</p><p>3）Complex complexAdd(Complex a)：</p><p>​ 将当前复数对象与形参复数对象相加，最后的结果仍是一个复数对象，返回给此方法的调用者。</p><p>4）String toString()：</p><p>​ 把当前复数对象的实部、虚部组合成 a+bi 的字符串形式，其中 a 和 b 分别为实部和虚部的数据。</p></blockquote><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Complex</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> realPart;</span><br><span class="line">    <span class="keyword">int</span> maginPart;</span><br><span class="line"></span><br><span class="line">    Complex() &#123;</span><br><span class="line">        <span class="keyword">this</span>.realPart = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.maginPart = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Complex(<span class="keyword">int</span> r, <span class="keyword">int</span> i) &#123;</span><br><span class="line">        <span class="keyword">this</span>.realPart = r;</span><br><span class="line">        <span class="keyword">this</span>.maginPart = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Complex <span class="title">complexAdd</span><span class="params">(Complex a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.realPart = <span class="keyword">this</span>.realPart + a.realPart;</span><br><span class="line">        <span class="keyword">this</span>.maginPart = <span class="keyword">this</span>.maginPart + a.maginPart;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.realPart + <span class="string">&quot;+&quot;</span> + <span class="keyword">this</span>.maginPart + <span class="string">&quot;i&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Complex c1 = <span class="keyword">new</span> Complex(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        Complex c2 = <span class="keyword">new</span> Complex(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">        c1.complexAdd(c2);</span><br><span class="line">        System.out.println(c1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><blockquote><p>3、编写一个包含圆类的程序，并为圆类设计几个构造方法和一般方法，在主方法中创建一个圆类对象并输出它的周长和面积。</p><p>要求：</p><p>​ 属性有 3 个：x,y,r，分别放置圆心坐标和半径；</p><p>​ 构造方法有 2 个。一个是无参的，用于设置 3 个属性的值都为 0；另一个有参的，用于设置 3 个属性的值，以确定一个具体的圆。</p><p>​ 计算周长的方法：double zc()；</p><p>​ 计算面积的方法：double mj()。</p></blockquote><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">   <span class="keyword">double</span> x, y, r;</span><br><span class="line"></span><br><span class="line">   Circle() &#123;</span><br><span class="line">       <span class="keyword">this</span>.x = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">this</span>.y = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">this</span>.r = <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   Circle(<span class="keyword">double</span> x, <span class="keyword">double</span> y, <span class="keyword">double</span> r) &#123;</span><br><span class="line">       <span class="keyword">this</span>.x = x;</span><br><span class="line">       <span class="keyword">this</span>.y = y;</span><br><span class="line">       <span class="keyword">this</span>.r = r;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">double</span> <span class="title">zc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="number">2</span> * Math.PI * <span class="keyword">this</span>.r;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">double</span> <span class="title">mj</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> Math.PI * <span class="keyword">this</span>.r * <span class="keyword">this</span>.r;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       Circle c = <span class="keyword">new</span> Circle(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">       System.out.println(c.zc());</span><br><span class="line">       System.out.println(c.mj());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><blockquote><p>4、编写一个程序，它含有一个圆类、圆柱类和主类。</p><p>要求：</p><p>​ 1）圆类参考上一题中的圆类；</p><p>​ 2）圆柱类：继承圆类，并加入一个属性 h(高)；</p><p>​ 构造方法(给 4 个属性赋值)；</p><p>​ 计算表面积的方法(double bmj())；</p><p>​ 计算体积的方法(double tj())。</p><p>​ 注意，要充分利用父类的方法。</p><p>​ 3）主类：在主方法中创建圆和圆柱类的对象，然后计算并输出它们的面积及圆柱的体积。</p></blockquote><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> x, y, r;</span><br><span class="line"></span><br><span class="line">    Circle() &#123;</span><br><span class="line">        <span class="keyword">this</span>.x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.r = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Circle(<span class="keyword">double</span> x, <span class="keyword">double</span> y, <span class="keyword">double</span> r) &#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">        <span class="keyword">this</span>.r = r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">zc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * Math.PI * <span class="keyword">this</span>.r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">mj</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI * <span class="keyword">this</span>.r * <span class="keyword">this</span>.r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MoreCircle</span> <span class="keyword">extends</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> h;</span><br><span class="line"></span><br><span class="line">    MoreCircle(<span class="keyword">double</span> x, <span class="keyword">double</span> y, <span class="keyword">double</span> r, <span class="keyword">double</span> h) &#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">        <span class="keyword">this</span>.r = r;</span><br><span class="line">        <span class="keyword">this</span>.h = h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">bmj</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI * <span class="keyword">this</span>.r * <span class="keyword">this</span>.r * <span class="number">2</span> + <span class="number">2</span> * Math.PI * <span class="keyword">this</span>.r * <span class="keyword">this</span>.h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">tj</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI * <span class="keyword">this</span>.r * <span class="keyword">this</span>.r * <span class="keyword">this</span>.h;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Circle c = <span class="keyword">new</span> Circle(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">        System.out.println(c.mj());</span><br><span class="line">        MoreCircle mc = <span class="keyword">new</span> MoreCircle(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">        System.out.println(mc.tj());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><blockquote><p>5、编写一个含有 5 个类的程序：</p><p>​ 类 Person:</p><p>​ 属性：编号、姓名、性别；</p><p>​ 构造方法：确定编号和姓名；</p><p>​ 一般方法：修改编号、姓名、性别，获取编号、姓名、性别。</p><p>​ 类 Teacher：继承类 Person 并增加：</p><p>​ 属性：系别；</p><p>​ 构造方法：调用父类的构造方法；</p><p>​ 一般方法：修改、获取系别。</p><p>​ 类 Student：继承类 Person 并增加：</p><p>​ 属性：班级；</p><p>​ 构造方法：调用父类的构造方法；</p><p>​ 一般方法：修改、获取班级属性值。</p><p>​ 类 Classes：</p><p>​ 属性：班级名称，学生名单(Student 类对象的数组)；</p><p>​ 构造方法：确定班级名称；</p><p>​ 一般方法：建立学生名单，输出学生名单。</p><p>​ 类 Main：</p><p>​ 主类。主方法中创建一个班级，然后建立该班级的学生名单，最后输出学生名单。</p></blockquote><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    Person(<span class="keyword">int</span> i, String n, String s) &#123;</span><br><span class="line">        <span class="keyword">this</span>.id = i;</span><br><span class="line">        <span class="keyword">this</span>.name = n;</span><br><span class="line">        <span class="keyword">this</span>.sex = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setPerson</span><span class="params">(<span class="keyword">int</span> i, String n, String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = i;</span><br><span class="line">        <span class="keyword">this</span>.name = n;</span><br><span class="line">        <span class="keyword">this</span>.sex = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;编号：&quot;</span> + <span class="keyword">this</span>.id);</span><br><span class="line">        System.out.print(<span class="string">&quot;\t姓名：&quot;</span> + <span class="keyword">this</span>.name);</span><br><span class="line">        System.out.print(<span class="string">&quot;\t性别：&quot;</span> + <span class="keyword">this</span>.sex + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String college;</span><br><span class="line"></span><br><span class="line">    Teacher(<span class="keyword">int</span> i, String n, String s, String c) &#123;</span><br><span class="line">        <span class="keyword">super</span>(i, n, s);</span><br><span class="line">        <span class="keyword">this</span>.college = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setCollege</span><span class="params">(String c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.college = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printCollege</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;系别：&quot;</span> + <span class="keyword">this</span>.college);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String sclass;</span><br><span class="line"></span><br><span class="line">    Student(<span class="keyword">int</span> i, String n, String s) &#123;</span><br><span class="line">        <span class="keyword">super</span>(i, n, s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setClass</span><span class="params">(String c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sclass = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;班级：&quot;</span> + <span class="keyword">this</span>.sclass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Classes</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String sclassName;</span><br><span class="line">    <span class="keyword">private</span> Student s[] = <span class="keyword">new</span> Student[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    Classes(String s) &#123;</span><br><span class="line">        <span class="keyword">this</span>.sclassName = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setStuList</span><span class="params">(Student s[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.s = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printStuList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">            s[i].printPerson();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    Classes c = <span class="keyword">new</span> Classes(<span class="string">&quot;计科17-01班&quot;</span>);</span><br><span class="line">    Student sList[] = <span class="keyword">new</span> Student[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Main m = <span class="keyword">new</span> Main();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            Student s = <span class="keyword">new</span> Student(i, <span class="string">&quot;学生&quot;</span> + i, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">            s.setClass(<span class="string">&quot;计科17-01班&quot;</span>);</span><br><span class="line">            m.sList[i] = s;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        m.c.setStuList(m.sList);</span><br><span class="line">        m.c.printStuList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><blockquote><p>6、请仔细阅读下面的程序，分析程序的结构和输出结果。再将程序上机运行，验证输出结果。（重点理解：抽象类、抽象方法、(匿名)内部类、匿名对象）</p><p>class Test</p><p>{ public static void main(String args[]){</p><p>System.out.println(new A(){ String getS(){ return “抽象？匿名？”;}}.getS());</p><p>}</p><p>}</p></blockquote><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> String <span class="title">getS</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> A() &#123;</span><br><span class="line">            <span class="function">String <span class="title">getS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;抽象？匿名？&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.getS());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><blockquote><p>7．请仔细阅读下面的程序，分析程序的结构和输出结果。再将程序上机运行，验证输出结果。</p><p>（重点理解：接口、接口实现方法、(匿名)内部类、匿名对象）</p><p>（请比较本程序与上题程序的不同之处）</p></blockquote><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">I</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getS</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> I() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getS</span><span class="params">()</span></span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;接口和内部类！&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.getS());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="实验四"   >          <a href="#实验四" class="heading-link"><i class="fas fa-link"></i></a>实验四</h2>      <blockquote><p>1、请先阅读下面的程序，确定它的输出结果。再将程序上机运行，验证自己分析的输出结果是否正确。</p></blockquote><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Yuan</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> z = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    Yuan(<span class="keyword">int</span> r) &#123;</span><br><span class="line">        <span class="keyword">this</span>.r = r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> z * r * r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">p</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">5</span> * z * r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        name = <span class="string">&quot;china&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">testOverride</span> <span class="keyword">extends</span> <span class="title">Yuan</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    testOverride(<span class="keyword">int</span> r, <span class="keyword">int</span> h1) &#123;</span><br><span class="line">        <span class="keyword">super</span>(r);</span><br><span class="line">        h = h1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        value();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * <span class="keyword">super</span>.a() + p() * h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.value();</span><br><span class="line">        name = <span class="string">&quot;America&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;\&quot;&quot;</span> + <span class="keyword">this</span>.name + <span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line">        System.out.println(<span class="keyword">super</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Yuan y = <span class="keyword">new</span> Yuan(<span class="number">4</span>);</span><br><span class="line">        Yuan yz = <span class="keyword">new</span> testOverride(<span class="number">5</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(y.a());</span><br><span class="line">        System.out.println(yz.p());</span><br><span class="line">        System.out.println(yz.a());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">80</span><br><span class="line">125</span><br><span class="line">&quot;America&quot;</span><br><span class="line">china</span><br><span class="line">500</span><br></pre></td></tr></table></div></figure><blockquote><p>2、请先阅读下面的程序，确定它的输出结果。再将程序上机运行，验证自己分析的输出结果是否正确。</p></blockquote><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTransOfValue</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> val;</span><br><span class="line">        StringBuffer sb1, sb2;</span><br><span class="line">        String sb3;</span><br><span class="line">        <span class="keyword">char</span> s[] = &#123; <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;e&#x27;</span> &#125;;</span><br><span class="line">        val = <span class="number">5.8</span>;</span><br><span class="line">        sb1 = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;apples&quot;</span>);</span><br><span class="line">        sb2 = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;pears&quot;</span>);</span><br><span class="line">        sb3 = <span class="keyword">new</span> String(<span class="string">&quot;pear&quot;</span>);</span><br><span class="line">        modify(val, sb1, sb2, sb3, s);</span><br><span class="line">        System.out.println(val);</span><br><span class="line">        System.out.println(sb1);</span><br><span class="line">        System.out.println(sb2);</span><br><span class="line">        System.out.println(sb3);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">double</span> a, StringBuffer r1, StringBuffer r2, String r3, <span class="keyword">char</span> s[])</span> </span>&#123;</span><br><span class="line">        a = <span class="number">6.8</span>;</span><br><span class="line">        r1.append(<span class="string">&quot; taste good&quot;</span>);</span><br><span class="line">        r2 = <span class="keyword">null</span>;</span><br><span class="line">        r3 = <span class="string">&quot;banana&quot;</span>;</span><br><span class="line">        s[<span class="number">2</span>] = <span class="string">&#x27;R&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">5.8</span><br><span class="line">apples taste good</span><br><span class="line">pears</span><br><span class="line">pear</span><br><span class="line">apRle</span><br></pre></td></tr></table></div></figure><blockquote><p>3、编写一个程序，其中设计一个矩阵类 Matrix，最后计算：</p><p>$$<br>\begin{bmatrix}4&amp;1&amp;5\2&amp;2&amp;0\end{bmatrix}*\begin{bmatrix}5&amp;0\3&amp;2\6&amp;6\end{bmatrix}<br>$$</p><p>要求 Matrix 类满足：</p><p>1）Matrix 的属性有：</p><p>m,n：int 型，矩阵的行、列数；</p><p>ma：int 型两维数组，放置矩阵的数据。</p><p>2）Matrix 的方法有：</p><p>Matrix (int m , int n )：构造方法，设置矩阵的行数和列数；</p><p>cheng(Matrix a)：将当前矩阵与形参矩阵相乘，最后返回乘的结果(Matrix 对象)；</p><p>void print()：输出矩阵。</p></blockquote><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Matrix</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> m, n;</span><br><span class="line">    <span class="keyword">int</span> ma[][] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">    Matrix(<span class="keyword">int</span> m, <span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">this</span>.m = m;</span><br><span class="line">        <span class="keyword">this</span>.n = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Matrix <span class="title">cheng</span><span class="params">(Matrix a)</span> </span>&#123;</span><br><span class="line">        Matrix m = <span class="keyword">new</span> Matrix(<span class="keyword">this</span>.m, a.n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a.n; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="keyword">this</span>.n; k++) &#123;</span><br><span class="line">                    m.ma[i][j] += <span class="keyword">this</span>.ma[i][k] * a.ma[k][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="keyword">this</span>.n; j++) &#123;</span><br><span class="line">                System.out.print(<span class="keyword">this</span>.ma[i][j] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Matrix m1 = <span class="keyword">new</span> Matrix(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">int</span> a1[][] = &#123; &#123; <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span> &#125;, &#123; <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span> &#125; &#125;;</span><br><span class="line">        m1.ma = a1;</span><br><span class="line">        Matrix m2 = <span class="keyword">new</span> Matrix(<span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">int</span> a2[][] = &#123; &#123; <span class="number">5</span>, <span class="number">0</span> &#125;, &#123; <span class="number">3</span>, <span class="number">2</span> &#125;, &#123; <span class="number">6</span>, <span class="number">6</span> &#125; &#125;;</span><br><span class="line">        m2.ma = a2;</span><br><span class="line">        Matrix m3 = m1.cheng(m2);</span><br><span class="line">        m3.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="实验七"   >          <a href="#实验七" class="heading-link"><i class="fas fa-link"></i></a>实验七</h2>      <blockquote><p>2、编写一个“变脸”程序：利用事件处理程序 mouseUp()实现程序运行后出现一张笑脸，鼠标点击一次则变成哭脸，再点击一次又变成笑脸，依次轮换。</p><p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200213171227.png"></p><p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200213171425.png"></p></blockquote><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// JFrame</span></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">// FlowLayout()</span></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="comment">// listener</span></span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChangeFace</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> cry = <span class="keyword">false</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// super.paint(g);// 不加此句，背景色为透明，并且上次画图不清空</span></span><br><span class="line">        g.setColor(Color.blue);</span><br><span class="line">        <span class="keyword">if</span>(cry)&#123;</span><br><span class="line">            g.drawString(<span class="string">&quot;哭！&quot;</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">            g.drawOval(<span class="number">200</span>, <span class="number">100</span>, <span class="number">160</span>, <span class="number">160</span>);</span><br><span class="line">            g.drawArc(<span class="number">225</span>, <span class="number">140</span>, <span class="number">40</span>, <span class="number">30</span>, <span class="number">210</span>, <span class="number">150</span>);</span><br><span class="line">            g.drawArc(<span class="number">305</span>, <span class="number">140</span>, <span class="number">40</span>, <span class="number">30</span>, <span class="number">210</span>, <span class="number">150</span>);</span><br><span class="line">            g.drawArc(<span class="number">250</span>, <span class="number">200</span>, <span class="number">60</span>, <span class="number">30</span>, <span class="number">0</span>, <span class="number">180</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            g.drawString(<span class="string">&quot;笑！&quot;</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">            g.drawOval(<span class="number">200</span>, <span class="number">100</span>, <span class="number">160</span>, <span class="number">160</span>);</span><br><span class="line">            g.drawArc(<span class="number">225</span>, <span class="number">140</span>, <span class="number">40</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">150</span>);</span><br><span class="line">            g.drawArc(<span class="number">305</span>, <span class="number">140</span>, <span class="number">40</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">150</span>);</span><br><span class="line">            g.drawArc(<span class="number">250</span>, <span class="number">200</span>, <span class="number">60</span>, <span class="number">30</span>, <span class="number">180</span>, <span class="number">180</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ChangeFace()&#123;</span><br><span class="line">        setLayout(<span class="keyword">null</span>);</span><br><span class="line">        setBounds(<span class="number">0</span>, <span class="number">0</span>, <span class="number">400</span>, <span class="number">300</span>);</span><br><span class="line">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        addMouseListener(<span class="keyword">new</span> MouseAdapter()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseClicked</span><span class="params">(MouseEvent e)</span></span>&#123;</span><br><span class="line">                cry = !cry;</span><br><span class="line">                System.out.println(cry);</span><br><span class="line">                repaint();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ChangeFace cf = <span class="keyword">new</span> ChangeFace();</span><br><span class="line">        cf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><blockquote><p>4、开发一个加、减、乘、除四则运算器。用户界面如下图：</p><p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200213171458.png"></p></blockquote><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calu</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">calu</span><span class="params">(Double a, Double b, String op)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (op == <span class="string">&quot;+&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> a + b;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">&quot;-&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> a - b;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">&quot;*&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> a * b;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> a / b;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JFrame jf = <span class="keyword">new</span> JFrame(<span class="string">&quot;计算器&quot;</span>);</span><br><span class="line">        jf.setLayout(<span class="keyword">new</span> GridLayout(<span class="number">4</span>, <span class="number">1</span>));</span><br><span class="line">        jf.setBounds(<span class="number">0</span>, <span class="number">0</span>, <span class="number">400</span>, <span class="number">300</span>);</span><br><span class="line">        JTextField jt1 = <span class="keyword">new</span> JTextField();</span><br><span class="line">        JTextField jt2 = <span class="keyword">new</span> JTextField();</span><br><span class="line">        jf.add(jt1);</span><br><span class="line">        jf.add(jt2);</span><br><span class="line">        Panel p = <span class="keyword">new</span> Panel();</span><br><span class="line">        p.setLayout(<span class="keyword">new</span> GridLayout());</span><br><span class="line">        JButton jb1 = <span class="keyword">new</span> JButton(<span class="string">&quot;+&quot;</span>);</span><br><span class="line">        JButton jb2 = <span class="keyword">new</span> JButton(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">        JButton jb3 = <span class="keyword">new</span> JButton(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        JButton jb4 = <span class="keyword">new</span> JButton(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        p.add(jb1);</span><br><span class="line">        p.add(jb2);</span><br><span class="line">        p.add(jb3);</span><br><span class="line">        p.add(jb4);</span><br><span class="line">        jf.add(p);</span><br><span class="line">        JTextField jt3 = <span class="keyword">new</span> JTextField();</span><br><span class="line">        jf.add(jt3);</span><br><span class="line">        jb1.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                Double r = calu(Double.parseDouble(jt1.getText()), Double.parseDouble(jt2.getText()), <span class="string">&quot;+&quot;</span>);</span><br><span class="line">                jt3.setText(r.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        jb2.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                Double r = calu(Double.parseDouble(jt1.getText()), Double.parseDouble(jt2.getText()), <span class="string">&quot;-&quot;</span>);</span><br><span class="line">                jt3.setText(r.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        jb3.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                Double r = calu(Double.parseDouble(jt1.getText()), Double.parseDouble(jt2.getText()), <span class="string">&quot;*&quot;</span>);</span><br><span class="line">                jt3.setText(r.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        jb4.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                Double r = calu(Double.parseDouble(jt1.getText()), Double.parseDouble(jt2.getText()), <span class="string">&quot;/&quot;</span>);</span><br><span class="line">                jt3.setText(r.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="实验九"   >          <a href="#实验九" class="heading-link"><i class="fas fa-link"></i></a>实验九</h2>      <blockquote><p>4、编写一个图形用户界面程序，窗体的宽度 300，高度 150，布局管理器为 null，窗体上有二个标签和二个按钮，标签的位置为（10,30）和（200,60），按钮的位置为（50,100）和（150,100），它们的宽度和高度都是 80 和 20。编写一个线程，该线程可以让标签向右或向左移动 10 次，每次移动 10 个单位，间隔 1 秒，通过按钮的动作事件启动上述线程，“向右走”按钮启动“向右移标签”，“向左走”按钮启动“向左移标签”，界面如下图所示。</p><p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200213171518.png"></p></blockquote><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MoveLabel</span> <span class="keyword">extends</span> <span class="title">JFrame</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Boolean r = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">static</span> JLabel jl1 = <span class="keyword">new</span> JLabel(<span class="string">&quot;向右标签&quot;</span>);</span><br><span class="line">    <span class="keyword">static</span> JLabel jl2 = <span class="keyword">new</span> JLabel(<span class="string">&quot;向左标签&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JFrame jf = <span class="keyword">new</span> JFrame();</span><br><span class="line">        jf.setLayout(<span class="keyword">null</span>);</span><br><span class="line">        jf.setBounds(<span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">200</span>);</span><br><span class="line">        jl1.setBounds(<span class="number">10</span>, <span class="number">30</span>, <span class="number">80</span>, <span class="number">20</span>);</span><br><span class="line">        jl2.setBounds(<span class="number">200</span>, <span class="number">60</span>, <span class="number">80</span>, <span class="number">20</span>);</span><br><span class="line">        jf.add(jl1);</span><br><span class="line">        jf.add(jl2);</span><br><span class="line">        JButton jb1 = <span class="keyword">new</span> JButton(<span class="string">&quot;向右走&quot;</span>);</span><br><span class="line">        JButton jb2 = <span class="keyword">new</span> JButton(<span class="string">&quot;向左走&quot;</span>);</span><br><span class="line">        jb1.setBounds(<span class="number">50</span>, <span class="number">100</span>, <span class="number">80</span>, <span class="number">20</span>);</span><br><span class="line">        jb2.setBounds(<span class="number">150</span>, <span class="number">100</span>, <span class="number">80</span>, <span class="number">20</span>);</span><br><span class="line">        jb1.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                r = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">new</span> Thread(<span class="keyword">new</span> MoveLabel()).start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        jb2.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                r = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">new</span> Thread(<span class="keyword">new</span> MoveLabel()).start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        jf.add(jb1);</span><br><span class="line">        jf.add(jb2);</span><br><span class="line">        jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (r) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(i + <span class="number">1</span>);</span><br><span class="line">                    jl1.setLocation(jl1.getX() + <span class="number">10</span>, <span class="number">30</span>);</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(i + <span class="number">1</span>);</span><br><span class="line">                    jl2.setLocation(jl2.getX() - <span class="number">10</span>, <span class="number">60</span>);</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="实验十"   >          <a href="#实验十" class="heading-link"><i class="fas fa-link"></i></a>实验十</h2>      <blockquote><p>1、编写一个程序，实现文件内容拷贝，具体过程如下：</p><ul><li>建一文件 myfile1.txt，写入内容“I am a student.”；</li><li>打开文件 myfile1.txt，读出内容放入字符数组中；</li><li>再建一文件 myfile2.txt，将字符数组中内容写入；</li><li>打开文件 myfile2.txt，读出内容输出到屏幕。</li></ul></blockquote><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyFile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeFile</span><span class="params">(String filename, String content)</span> </span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(filename);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            f.createNewFile();</span><br><span class="line">            FileWriter fw = <span class="keyword">new</span> FileWriter(f);</span><br><span class="line">            fw.write(content);</span><br><span class="line">            fw.flush();</span><br><span class="line">            fw.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">char</span>[] readFile(String filename) &#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(filename);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileReader fr = <span class="keyword">new</span> FileReader(f);</span><br><span class="line">            <span class="keyword">char</span> temp[] = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">100</span>];</span><br><span class="line">            fr.read(temp);</span><br><span class="line">            fr.close();</span><br><span class="line">            <span class="keyword">return</span> temp;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;null&quot;</span>.toCharArray();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeFile2</span><span class="params">(String filename, <span class="keyword">char</span> content[])</span> </span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(filename);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            f.createNewFile();</span><br><span class="line">            FileWriter fw = <span class="keyword">new</span> FileWriter(f);</span><br><span class="line">            fw.write(content);</span><br><span class="line">            fw.flush();</span><br><span class="line">            fw.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFile2</span><span class="params">(String filename)</span> </span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(filename);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileReader fr = <span class="keyword">new</span> FileReader(f);</span><br><span class="line">            <span class="keyword">char</span>[] c = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">100</span>];</span><br><span class="line">            fr.read(c);</span><br><span class="line">            fr.close();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> i : c) &#123;</span><br><span class="line">                System.out.print(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CopyFile cf = <span class="keyword">new</span> CopyFile();</span><br><span class="line">        cf.writeFile(<span class="string">&quot;myfile1.txt&quot;</span>, <span class="string">&quot;I am a student.&quot;</span>);</span><br><span class="line">        <span class="keyword">char</span>[] c = cf.readFile(<span class="string">&quot;myfile1.txt&quot;</span>);</span><br><span class="line">        cf.writeFile2(<span class="string">&quot;myfile2.txt&quot;</span>, c);</span><br><span class="line">        cf.readFile2(<span class="string">&quot;myfile2.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><blockquote><p>2、设计一个类 In，它含有 5 个无参类方法，调用它们即可直接从键盘输入字符、字符串、整数、单精度数以及双精度数。5 个方法如下：</p><ul><li><p>cha()——执行后等待输入一个字符(ASCII 码字符)；</p></li><li><p>str()——执行后等待输入一个字符串(ASCII 码字符串)；</p></li><li><p>itn()——执行后等待输入一个整数；</p></li><li><p>flo()——执行后等待输入一个单精度数；</p></li><li><p>dou()——执行后等待输入一个双精度数。</p></li></ul><p>例如下面的语句行后等待输入一个单精度数，然后输出到屏幕： <code>System.out.println(In.flo());</code></p><p>提示：利用<strong>DataInputStream</strong></p></blockquote><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.DataInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ln</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">cha</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DataInputStream dis = <span class="keyword">new</span> DataInputStream(<span class="keyword">new</span> BufferedInputStream(System.in));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">char</span>) dis.readByte();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">str</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DataInputStream dis = <span class="keyword">new</span> DataInputStream(<span class="keyword">new</span> BufferedInputStream(System.in));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> dis.readLine();</span><br><span class="line">            <span class="comment">// readLine已弃用</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;null&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">itn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DataInputStream dis = <span class="keyword">new</span> DataInputStream(<span class="keyword">new</span> BufferedInputStream(System.in));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> Integer.parseInt(dis.readLine());</span><br><span class="line">            <span class="comment">// readLine已弃用</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">flo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DataInputStream dis = <span class="keyword">new</span> DataInputStream(<span class="keyword">new</span> BufferedInputStream(System.in));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> Float.parseFloat(dis.readLine());</span><br><span class="line">            <span class="comment">// readLine已弃用</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">dou</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DataInputStream dis = <span class="keyword">new</span> DataInputStream(<span class="keyword">new</span> BufferedInputStream(System.in));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> dis.readDouble();</span><br><span class="line">            <span class="comment">// readLine已弃用</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Ln l = <span class="keyword">new</span> Ln();</span><br><span class="line">        <span class="comment">// System.out.println(l.cha());</span></span><br><span class="line">        <span class="comment">// System.out.println(l.str());</span></span><br><span class="line">        <span class="comment">// System.out.println(l.itn());</span></span><br><span class="line">        <span class="comment">// System.out.println(l.flo());</span></span><br><span class="line">        <span class="comment">// System.out.println(l.dou());</span></span><br><span class="line">        DataInputStream dis = <span class="keyword">new</span> DataInputStream(<span class="keyword">new</span> BufferedInputStream(System.in));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(dis.readByte()&amp; <span class="number">0xFF</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//<span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><blockquote><p>3、改进上一题，使得 cha()方法和 str()方法能够读入任何字符。</p><p>提示：利用<strong>BufferedReader</strong>类。</p></blockquote><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ln2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">cha</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BufferedReader bd = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">char</span>) bd.read();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">str</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BufferedReader bd = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> bd.readLine();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;null&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Ln l = <span class="keyword">new</span> Ln();</span><br><span class="line">        System.out.println(l.cha());</span><br><span class="line">        System.out.println(l.str());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> 课程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java程序设计实验 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx一些常用命令与配置</title>
      <link href="/2019/11/05/Nginx%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/11/05/Nginx%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[        <h2 id="Nginx-一些常用命令"   >          <a href="#Nginx-一些常用命令" class="heading-link"><i class="fas fa-link"></i></a>Nginx 一些常用命令</h2>              <h3 id="测试-Nginx-配置"   >          <a href="#测试-Nginx-配置" class="heading-link"><i class="fas fa-link"></i></a>测试 Nginx 配置</h3>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -t</span><br></pre></td></tr></table></div></figure>        <h3 id="启动-Nginx"   >          <a href="#启动-Nginx" class="heading-link"><i class="fas fa-link"></i></a>启动 Nginx</h3>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx start</span><br></pre></td></tr></table></div></figure><p>使用的是基于 <strong>systemd</strong> 的版本，使用 <strong>systemctl</strong> 命令</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nginx</span><br></pre></td></tr></table></div></figure><span id="more"></span>        <h3 id="结束-Nginx"   >          <a href="#结束-Nginx" class="heading-link"><i class="fas fa-link"></i></a>结束 Nginx</h3>      <figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service nginx stop</span><br><span class="line">systemctl stop nginx</span><br></pre></td></tr></table></div></figure>        <h3 id="退出-Nginx"   >          <a href="#退出-Nginx" class="heading-link"><i class="fas fa-link"></i></a>退出 Nginx</h3>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service nginx quit</span><br><span class="line">systemctl quit nginx</span><br></pre></td></tr></table></div></figure>        <h3 id="重启-Nginx"   >          <a href="#重启-Nginx" class="heading-link"><i class="fas fa-link"></i></a>重启 Nginx</h3>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service nginx restart</span><br><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></div></figure>        <h3 id="重新加载-Nginx"   >          <a href="#重新加载-Nginx" class="heading-link"><i class="fas fa-link"></i></a>重新加载 Nginx</h3>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service nginx reload</span><br><span class="line">systemctl reload nginx</span><br></pre></td></tr></table></div></figure>        <h3 id="查看-Nginx-服务状态"   >          <a href="#查看-Nginx-服务状态" class="heading-link"><i class="fas fa-link"></i></a>查看 Nginx 服务状态</h3>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service nginx status</span><br><span class="line">systemctl status nginx</span><br></pre></td></tr></table></div></figure>        <h3 id="检查-Nginx-版本"   >          <a href="#检查-Nginx-版本" class="heading-link"><i class="fas fa-link"></i></a>检查 Nginx 版本</h3>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service nginx -v</span><br><span class="line">systemctl -v nginx</span><br></pre></td></tr></table></div></figure>        <h3 id="显示-Nginx-帮助"   >          <a href="#显示-Nginx-帮助" class="heading-link"><i class="fas fa-link"></i></a>显示 Nginx 帮助</h3>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service nginx -h</span><br><span class="line">systemctl -h nginx</span><br></pre></td></tr></table></div></figure>        <h2 id="nginx-配置-http-请求自动跳转-https"   >          <a href="#nginx-配置-http-请求自动跳转-https" class="heading-link"><i class="fas fa-link"></i></a>nginx 配置 http 请求自动跳转 https</h2>              <h3 id="nginx-安装"   >          <a href="#nginx-安装" class="heading-link"><i class="fas fa-link"></i></a>nginx 安装</h3>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx</span><br></pre></td></tr></table></div></figure>        <h3 id="http-访问自动跳转到-https"   >          <a href="#http-访问自动跳转到-https" class="heading-link"><i class="fas fa-link"></i></a>http 访问自动跳转到 https</h3>      <p>在需要跳转的 http 站点下添加以下 rewrite 语句，实现 http 访问自动跳转到 https 页面</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    rewrite ^(.*)$ https:&#x2F;&#x2F;$host$1 permanent;</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> 服务端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask学习06-邮件</title>
      <link href="/2019/09/13/Flask%E5%AD%A6%E4%B9%A006-%E9%82%AE%E4%BB%B6/"/>
      <url>/2019/09/13/Flask%E5%AD%A6%E4%B9%A006-%E9%82%AE%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[        <h2 id="使用-Flask-Mail-发送邮件"   >          <a href="#使用-Flask-Mail-发送邮件" class="heading-link"><i class="fas fa-link"></i></a>使用 Flask-Mail 发送邮件</h2>      <ul><li>扩展 Flask-Mail 包装了 Python 标准库中的<strong>smtplib</strong>包，简化了在 Flask 程序中发送电子邮件的过程</li></ul><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-mail</span><br></pre></td></tr></table></div></figure><ul><li>实例化 Flask-Mail 提供的 Mail 类并传入程序实例以完成初始化</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_mail <span class="keyword">import</span> Mail</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">...</span><br><span class="line">mail = Mail(app)</span><br></pre></td></tr></table></div></figure><span id="more"></span>        <h3 id="配置-Flask-Mail"   >          <a href="#配置-Flask-Mail" class="heading-link"><i class="fas fa-link"></i></a>配置 Flask-Mail</h3>      <ul><li>Flask-Mail 常用配置</li></ul><div class="table-container"><table><thead><tr><th align="left">配置键</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td align="left">MAIL_SERVER</td><td>用于发送邮件的 SMTP 服务器</td><td>localhost</td></tr><tr><td align="left">MAIL_PORT</td><td>发送端口</td><td>25</td></tr><tr><td align="left">MAIL_USE_TLS</td><td>是否使用 STARTTLS</td><td>False</td></tr><tr><td align="left">MAIL_USE_SSL</td><td>是否使用 SSL/TLS</td><td>False</td></tr><tr><td align="left">MAIL_USERNAME</td><td>发信服务器的用户名</td><td>None</td></tr><tr><td align="left">MAIL_PASSWORD</td><td>发信服务器的密码</td><td>None</td></tr><tr><td align="left">MAIL_DEFAULT_SENDER</td><td>默认的发信人</td><td>None</td></tr></tbody></table></div><blockquote><p>对发送的邮件进行加密可以避免邮件在发送过程中被第三方截获和篡改。</p><p>SSL（Security Socket Layer，安全套接字层）和 TLS（Transport Layer Security，传输层安全）是两种常用的电子邮件安全协议。TLS 继承了 SSL，并在 SSL 的基础上做了一些改进（换句话说，TLS 是后期版本的 SSL）。所以，在大多数情况下，SSL 和 TLS 可以互换使用。它们通过将 MAIL_USE_SSL 设置为 True 开启。STARTTLS 是另一种加密方式，它会对不安全的连接进行升级（使用 SSL 或 TLS）。</p></blockquote><ul><li>SSL/TLS 加密</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MAIL_USE_SSL = <span class="literal">True</span></span><br><span class="line">MAIL_PORT = <span class="number">465</span></span><br></pre></td></tr></table></div></figure><ul><li>STARTTLS 加密</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MAIL_USE_TLS = <span class="literal">True</span></span><br><span class="line">MAIL_PORT = <span class="number">587</span></span><br></pre></td></tr></table></div></figure><blockquote><p>根据加密的方式不同，端口也要相应改变</p><p>当不对邮件进行加密时，邮件服务器的端口使用默认的 25 端口。</p></blockquote><ul><li>常用电子邮箱服务提供商的 SMTP 配置信息</li></ul><div class="table-container"><table><thead><tr><th>提供商</th><th>MAIL_SERVER</th><th>MAIL_<br>USERNAME</th><th>MAIL_<br>PASSWORD</th><th>说明</th></tr></thead><tbody><tr><td>Gmail</td><td>smtp.gmail.com</td><td>邮箱地址</td><td>邮箱地址</td><td>开启“Allow less secure apps ”，与 VPN</td></tr><tr><td>QQ</td><td>smtp.qq.com</td><td>邮箱地址</td><td>授权码</td><td>开启 SMTP，获取授权码</td></tr><tr><td>新浪</td><td>smtp.sina.com</td><td>邮箱地址</td><td>邮箱密码</td><td>开启 SMTP</td></tr><tr><td>163</td><td>smtp.163.com</td><td>邮箱地址</td><td>授权码</td><td>开启 SMTP，设置授权码</td></tr><tr><td>Outlook/Hotmail</td><td>smtp.live.com<br>smtp.office365.com</td><td>邮箱地址</td><td>邮箱密码</td><td>无</td></tr></tbody></table></div><blockquote><p>163 邮箱的 SMTP 服务器不支持 STARTTLS</p></blockquote><ul><li>邮件服务器配置</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_mail <span class="keyword">import</span> Mail</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.config.update(</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    MAIL_SERVER = os.getenv(<span class="string">&#x27;MAIL_SERVER&#x27;</span>)</span><br><span class="line">    MAIL_PORT = <span class="number">587</span></span><br><span class="line">    MAIL_USE_TLS = <span class="literal">True</span></span><br><span class="line">    MAIL_USERNAME = os.getenv(<span class="string">&#x27;MAIL_USERNAME&#x27;</span>)</span><br><span class="line">    MAIL_PASSWORD = os.getenv(<span class="string">&#x27;MAIL_PASSWORD&#x27;</span>)</span><br><span class="line">    MAIL_DEFAULT_SENDER = (<span class="string">&#x27;Grey Li&#x27;</span>, os.getenv(<span class="string">&#x27;MAIL_USERNAME&#x27;</span>))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">mail = Mail(app)</span><br></pre></td></tr></table></div></figure><blockquote><p>在实例化 Mail 类时，Flask-Mail 会获取配置以创建一个用于发信的对象，所以确保在实例化 Mail 类之前加载配置</p></blockquote><ul><li>.env 文件环境变量</li></ul><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MAIL_SERVER&#x3D;smtp.example.com</span><br><span class="line">MAIL_USERNAME&#x3D;yourusername@example.com</span><br><span class="line">MAIL_PASSWORD&#x3D;your_password</span><br></pre></td></tr></table></div></figure><ul><li>默认发信人由一个两元素元组组成，即（姓名，邮箱地址）</li></ul><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MAIL_DEFAULT_SENDER &#x3D; (&#39;Your Name&#39;, &#39;your_name@example.com&#39;)</span><br><span class="line">MAIL_DEFAULT_SENDER &#x3D; (&#39;Your Name&#39;, os.getenv(&#39;MAIL_USERNAME&#39;))</span><br></pre></td></tr></table></div></figure><ul><li>Flask-Mail 会把这个元组转换为标准的发信人格式，即<code>Your Name&lt;your_name@example.com&gt;</code>。</li><li>也可以直接以这种方式指定发信人</li></ul><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MAIL_DEFAULT_SENDER &#x3D; &#39;Your Name &lt;your_name@example.com&gt;&#39;</span><br></pre></td></tr></table></div></figure>        <h3 id="构建邮件数据"   >          <a href="#构建邮件数据" class="heading-link"><i class="fas fa-link"></i></a>构建邮件数据</h3>      <ul><li>一封邮件至少要包含主题、收件人、正文、发信人这几个元素。</li><li>发信人（sender）在前面已经使用 MAIL_DEFAULT_SENDER 配置变量指定过了，剩下的分别通过 Message 类的构造方法中的 subject、recipients、body 关键字传入参数，其中 recipients 为一个包含电子邮件地址的列表</li></ul><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; from flask_mail import Message</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; from app import mail</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; message = Message(subject=<span class="string">&#x27;Hello, World!&#x27;</span>, recipients=[<span class="string">&#x27;Zyuanlee &lt;zyuanlee@example.com&gt;&#x27;</span>], body=<span class="string">&#x27;Hello, this is an email.&#x27;</span>)</span></span><br></pre></td></tr></table></div></figure><blockquote><p>和发信人字符串类似，收信人字符串可以为两种形式</p><p><code>&#39;Zorn&lt;zorn@example.com&gt;&#39;</code>或<code>&#39;zorn@example.com&#39;</code>。</p></blockquote>        <h3 id="发送邮件"   >          <a href="#发送邮件" class="heading-link"><i class="fas fa-link"></i></a>发送邮件</h3>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; mail.send(message)</span></span><br></pre></td></tr></table></div></figure><ul><li>通用发信函数</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_mail <span class="keyword">import</span> Mail, Message</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">mail = Mail(app)</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_mail</span>(<span class="params">subject, to, body</span>):</span></span><br><span class="line">    message = Message(subject, recipients=[to], body=body)</span><br><span class="line">    mail.send(message)</span><br></pre></td></tr></table></div></figure>        <h2 id="使用事务邮件服务-SendGird"   >          <a href="#使用事务邮件服务-SendGird" class="heading-link"><i class="fas fa-link"></i></a>使用事务邮件服务 SendGird</h2>              <h2 id="邮件进阶"   >          <a href="#邮件进阶" class="heading-link"><i class="fas fa-link"></i></a>邮件进阶</h2>              <h3 id="提供-HTML-正文"   >          <a href="#提供-HTML-正文" class="heading-link"><i class="fas fa-link"></i></a>提供 HTML 正文</h3>      <ul><li>使用 Tabel 布局，而不是 Div 布局</li><li>使用行内（inline）样式定义</li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;font-family:Arial, Helvetica, sans-serif; font-size:12px; color:#000000;&quot;</span>&gt;</span>Hello, Email!<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ul><li>尽量使用比较基础的 CSS 属性，避免使用快捷属性（比如 background）和定位属性（比如 float、position）</li><li>邮件正文的宽度不应超过 600px</li><li>避免使用 JavaScript 代码</li><li>避免使用背景图片</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法一</span></span><br><span class="line">message = Message(..., body=<span class="string">&#x27;纯文本正文&#x27;</span>, html=<span class="string">&#x27;&lt;h1&gt;HTML正文&lt;/h1&gt;&#x27;</span>)</span><br></pre></td></tr></table></div></figure><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法二</span></span><br><span class="line">message = Message(...)</span><br><span class="line">message.body = <span class="string">&#x27;纯文本正文&#x27;</span></span><br><span class="line">message.html = <span class="string">&#x27;&lt;h1&gt;HTML正文&lt;/h1&gt;&#x27;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="使用-Jinja2-模板组织邮件正文"   >          <a href="#使用-Jinja2-模板组织邮件正文" class="heading-link"><i class="fas fa-link"></i></a>使用 Jinja2 模板组织邮件正文</h3>      <ul><li>大多数情况下，需要动态构建邮件正文。</li><li>比如，在周刊订阅程序中，当用户订阅成功后，发送一封确认邮件。对于不同的用户来说，邮件的内容基本相同，但同时邮件中又包含用户名称的动态部分，使用模板来组织构建邮件正文再合适不过。</li></ul><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">templates&#x2F;emails&#x2F;subscribe.txt：纯文本邮件模板</span><br><span class="line"></span><br><span class="line">Hello &#123;&#123; name &#125;&#125;,</span><br><span class="line"></span><br><span class="line">Thank you for subscribing Flask Weekly!</span><br><span class="line">Enjoy the reading :)</span><br><span class="line"></span><br><span class="line">Visit this link to unsubscribe: &#123;&#123; url_for(&#39;unsubscribe&#39;, _external&#x3D;True) &#125;&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--HTML邮件模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 580px; padding: 20px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Hello &#123;&#123; name &#125;&#125;,<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Thank you for subscribing Flask Weekly!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Enjoy the reading :)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">small</span> <span class="attr">style</span>=<span class="string">&quot;color: #868e96;&quot;</span>&gt;</span></span><br><span class="line">        Click here to</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;unsubscdribe&#x27;, _external=True)&#125;&#125;&quot;</span>&gt;</span>unsubscribe<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ul><li><p>为了同时支持纯文本格式和 HTML 格式的邮件正文，每一类邮件都需要分别创建 HMTL 和纯文本格式的模板</p></li><li><p>以通过 Flask-Mail 创建的发信函数为例，在发送邮件的函数中使用<code>render_template()</code>函数渲染邮件正文，并传入相应的变量</p></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line"><span class="keyword">from</span> flask_mail <span class="keyword">import</span> Message</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_subscribe_mail</span>(<span class="params">subject, to, **kwargs</span>):</span></span><br><span class="line">    message = Message(subject, recipients=[to], sender=<span class="string">&#x27;Flask Weekly &lt;%s&gt;&#x27;</span> % os.getenv(<span class="string">&#x27;MAIL_USERNAME&#x27;</span>))</span><br><span class="line">    message.body = render_template(<span class="string">&#x27;emails/subscribe.txt&#x27;</span>, **kwargs)</span><br><span class="line">    message.html = render_template(<span class="string">&#x27;emails/subscribe.html&#x27;</span>, **kwargs)</span><br><span class="line">    mail.send(message)</span><br></pre></td></tr></table></div></figure><blockquote><p>为了支持在调用函数时传入模板中需要的关键字参数，在<code>send_mail()</code>中接收可变长关键字参数<code>**kwargs</code>并传入<code>render_template()</code>函数</p></blockquote><blockquote><p>当邮件中需要加入 URL 时（比如链接和图片），要生成完整的外部 URL，而不是内部 URL。</p><p>这可以通过在<code>url_for()</code>函数中将关键字参数<code>_external</code>设为<strong>True</strong>实现。</p></blockquote>        <h3 id="异步发送邮件"   >          <a href="#异步发送邮件" class="heading-link"><i class="fas fa-link"></i></a>异步发送邮件</h3>      <ul><li>当使用 SMTP 的方式发送电子邮件时，如果手动使用浏览器测试程序的注册功能，在提交注册表单后，浏览器会有几秒钟的不响应。</li><li>因为这时候程序正在发送电子邮件，发信的操作阻断了请求——响应循环，直到发信的<code>send_mail()</code>函数调用结束后，视图函数才会返回响应。这几秒的延迟带来了不好的用户体验，为了避免这个延迟，可以将发信函数放入后台线程异步执行</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_send_async_mail</span>(<span class="params">app, message</span>):</span></span><br><span class="line">    <span class="keyword">with</span> app.app_context():</span><br><span class="line">        mail.send(message)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_mail</span>(<span class="params">subject, to, body</span>):</span></span><br><span class="line">    message = Message(subject, recipients=[to], body=body)</span><br><span class="line">    thr = Thread(target=_send_async_mail, args=[app, message])</span><br><span class="line">    thr.start()</span><br><span class="line">    <span class="keyword">return</span> thr</span><br></pre></td></tr></table></div></figure><ul><li>因为 Flask-Mail 的<code>send()</code>方法内部的调用逻辑中使用了<strong>current_app</strong>变量，而这个变量只在激活的程序上下文中才存在，这里在后台线程调用发信函数，但是后台线程并没有程序上下文存在。为了正常实现发信功能，wr 传入程序实例 app 作为参数，并调用<code>app.app_context()</code>手动激活程序上下文。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python3 </tag>
            
            <tag> Flask学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些操作命令</title>
      <link href="/2019/08/11/%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/08/11/%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[        <h2 id="python-相关"   >          <a href="#python-相关" class="heading-link"><i class="fas fa-link"></i></a>python 相关</h2>      <p>导出一个环境中所使用的模块</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></div></figure><p>新建一个虚拟环境</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm -rf venv</span><br><span class="line">virtualenv venv</span><br><span class="line">source venv&#x2F;bin&#x2F;activate</span><br></pre></td></tr></table></div></figure><span id="more"></span>        <h2 id="服务器相关"   >          <a href="#服务器相关" class="heading-link"><i class="fas fa-link"></i></a>服务器相关</h2>              <h3 id="MySQL-安装"   >          <a href="#MySQL-安装" class="heading-link"><i class="fas fa-link"></i></a>MySQL 安装</h3>      <figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get install MySQL-client-core-5.6</span><br><span class="line">apt-get install mysql-client-5.6</span><br><span class="line">apt-get install mysql-server-5.6</span><br></pre></td></tr></table></div></figure><p>输入命名重启 mysql 看是否安装成功</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql restart</span><br></pre></td></tr></table></div></figure><p>数据库新建用户，并赋予权限</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER &#39;apply&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39;;</span><br><span class="line">create database application CHARACTER SET utf8 COLLATE utf8_general_ci;</span><br><span class="line">GRANT all privileges ON application.* TO &#39;apply&#39;@&#39;%&#39;;</span><br></pre></td></tr></table></div></figure>        <h2 id="git-相关"   >          <a href="#git-相关" class="heading-link"><i class="fas fa-link"></i></a>git 相关</h2>              <h3 id="create-a-new-repository-on-the-command-line"   >          <a href="#create-a-new-repository-on-the-command-line" class="heading-link"><i class="fas fa-link"></i></a>create a new repository on the command line</h3>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;# test&quot; &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git remote add origin https://github.com/Pandalzy/test.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></div></figure>        <h3 id="push-an-existing-repository-from-the-command-line"   >          <a href="#push-an-existing-repository-from-the-command-line" class="heading-link"><i class="fas fa-link"></i></a>push an existing repository from the command line</h3>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/Pandalzy/test.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> 命令 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Flask学习05-数据库</title>
      <link href="/2019/08/11/Flask%E5%AD%A6%E4%B9%A005-%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2019/08/11/Flask%E5%AD%A6%E4%B9%A005-%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[        <h2 id="使用-Flask-SQLAlchemy-管理数据库"   >          <a href="#使用-Flask-SQLAlchemy-管理数据库" class="heading-link"><i class="fas fa-link"></i></a>使用 Flask-SQLAlchemy 管理数据库</h2>      <ul><li>安装 Flask-SQLAlchemy 及其依赖</li></ul><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-sqlalchemy</span><br></pre></td></tr></table></div></figure><ul><li>实例化<strong>Flask-SQLAlchemy</strong>提供的<strong>SQLAlchemy</strong>类，传入程序实例<strong>app</strong>，以完成扩展的初始化<span id="more"></span></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">db = SQLAlchemy(app)</span><br></pre></td></tr></table></div></figure>        <h3 id="连接数据库服务器"   >          <a href="#连接数据库服务器" class="heading-link"><i class="fas fa-link"></i></a>连接数据库服务器</h3>      <ul><li>常用的数据库 URI 格式</li></ul><div class="table-container"><table><thead><tr><th>DBMS</th><th>URL</th></tr></thead><tbody><tr><td>PostgreSQL</td><td>postgresql://username:password@host/databasename</td></tr><tr><td>MySQL</td><td>mysql://username:password@host/databasename<br/>mysql+pymysql://username:password@host/databasename</td></tr><tr><td>Oracle</td><td>oracle://username:password@host:port/sidname</td></tr><tr><td>SQLite(UNIX)</td><td>sqlite:////absollute/path/to/foo.db</td></tr><tr><td>SQLite(Windows)</td><td>sqlite:///absollute\path\to\foo.db 或<br/>r’sqlite:///absollute\path\to\foo.db’</td></tr><tr><td>SQLite(内存型)</td><td>sqlite:///或 sqlite///:memory</td></tr></tbody></table></div><ul><li>在<strong>Flask-SQLAlchemy</strong>中，数据库的 URI 通过配置变量<strong>SQLALCHEMY_DATABASE_URI</strong>设置，默认为 SQLite 内存型数据库（sqlite///:memory）。SQLite 是基于文件的 DBMS，不需要设置数据库服务器，只需要指定数据库文件的绝对路径。使用<code>app.root_path</code>来定位数据库文件的路径，并将数据库文件命名为<strong>data.db</strong></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置数据库URI</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = os.getenv(<span class="string">&#x27;DATABASE_URL&#x27;</span>, <span class="string">&#x27;sqlite:///&#x27;</span> + os.path.join(app.root_path, <span class="string">&#x27;data.db&#x27;</span>))</span><br></pre></td></tr></table></div></figure><ul><li><strong>SQLALCHEMY_TRACK_MODIFICATIONS</strong>配置变量，这个配置变量决定是否追踪对象的修改，这用于<strong>Flask-SQLAlchemy</strong>的事件通知系统，这个配置键的默认值为 None，如果没有特殊需要，可以把它设为 False 来关闭警告信息</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>] = <span class="literal">False</span></span><br></pre></td></tr></table></div></figure>        <h3 id="定义数据模型"   >          <a href="#定义数据模型" class="heading-link"><i class="fas fa-link"></i></a>定义数据模型</h3>      <ul><li>所有的模型类都需要继承 Flask-SQLAlchemy 提供的<strong>db.Model</strong>基类</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义Note模型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Note</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    body = db.Column(db.Text)</span><br></pre></td></tr></table></div></figure><ul><li>SQLAlchemy 常用的字段类型</li></ul><div class="table-container"><table><thead><tr><th>字段</th><th>说明</th></tr></thead><tbody><tr><td>Integer</td><td>整数</td></tr><tr><td>String</td><td>字符串，可选参数 length 可以用来设置最大长度</td></tr><tr><td>Text</td><td>较长的 Unicode 文本</td></tr><tr><td>Date</td><td>日期，存储 datetime.date 对象</td></tr><tr><td>Time</td><td>时间，存储 datetime.time 对象</td></tr><tr><td>DataTime</td><td>时间和日期，存储 datetime 对戏那个</td></tr><tr><td>Interval</td><td>时间间隔，存储 datetime.timedelta 对象</td></tr><tr><td>Float</td><td>浮点数</td></tr><tr><td>Boolean</td><td>布尔型</td></tr><tr><td>PickleType</td><td>存储 Pickle 列化的 Python 对象</td></tr><tr><td>LargeBinary</td><td>存储任意二进制数据</td></tr></tbody></table></div><blockquote><p>字段类型一般直接声明即可，如果传入参数，可以加括号</p><p>String 类型需要指定长度</p><p>Text 类型可用于变长文本，如用户发表的文章或者评论等</p></blockquote><ul><li>默认情况下，Flask-SQLAlchemy 会根据模型类的名称生成一个表名称，生成规则如下：</li></ul><figure class="highlight"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Message --&gt; message # 单个单词转换为小写</span><br><span class="line">FooBar --&gt; foo_bar # 多个单词转换为小写并使用下划线分隔</span><br></pre></td></tr></table></div></figure><ul><li><p>如果需要自己指定表名称，可以定义<code>__tablename__</code>属性来实现</p></li><li><p>常用的 SQLAlchemy 字段参数</p></li></ul><div class="table-container"><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>primary_key</td><td>如果设为 True，该字段为主键</td></tr><tr><td>unique</td><td>如果设为 True，该字段不允许出现重复值</td></tr><tr><td>index</td><td>如果为 True，该字段创建索引，以提高查询效率</td></tr><tr><td>nullable</td><td>确定字段值可为空，值为 True 或 False，默认为 True</td></tr><tr><td>default</td><td>为字段设置默认值</td></tr></tbody></table></div><ul><li>不需要在所有列都建立索引。</li><li>一般来说，取值可能性多（比如姓名）的列，以及经常被用来作为排序参照的列（比如时间戳）更适合建立索引。</li></ul>        <h3 id="创建数据库和表"   >          <a href="#创建数据库和表" class="heading-link"><i class="fas fa-link"></i></a>创建数据库和表</h3>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; from app import db</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; db.create_all()</span></span><br></pre></td></tr></table></div></figure><blockquote><p>如果模型类定义在单独的模块中，必须在调用<code>db.create_all()</code>方法前导入相应模块</p></blockquote><ul><li>查看模型对应的 SQL 模式</li></ul><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; from sqlalchemy.schema import CreateTable</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="built_in">print</span>(CreateTable(Note.__table__))</span></span><br><span class="line"></span><br><span class="line">CREATE TABLE note (</span><br><span class="line">    id INTEGER NOT NULL,</span><br><span class="line">    body TEXT,</span><br><span class="line">    PRIMARY KEY (id)</span><br><span class="line">)</span><br></pre></td></tr></table></div></figure><blockquote><p>数据库和表创建后，之后对模型的改动不会自动更新在实际的表中。</p><p>需要使用<code>db.drop_all()</code>之后，再调用<code>drop.create_all()</code></p></blockquote>        <h2 id="数据库操作"   >          <a href="#数据库操作" class="heading-link"><i class="fas fa-link"></i></a>数据库操作</h2>      <ul><li>数据库操作主要是 CRUD，即 Create（创建）、Read（读取/查询）、Update（更新）和 Delete（删除）</li><li>SQLAlchemy 使用数据库会话来管理数据库操作，这里的数据库会话也称为事务（transaction）。</li><li>Flask-SQLAlchemy 自动创建会话，可以通过 db.session 属性获取</li></ul><blockquote><p><code>add()</code>可以将创建的对象添加到数据回话中，或者对会话中的对象进行更新，只有使用<code>commit()</code>方法，改动才会被提交到数据库。数据库也支持回滚操作，调用<code>rollback()</code>方法时，添加到会话中且未提交的改动都将被撤销</p></blockquote>        <h3 id="CRUD"   >          <a href="#CRUD" class="heading-link"><i class="fas fa-link"></i></a>CRUD</h3>      <ul><li>默认情况下，Flask-SQLAlchemy（&gt;=2.3.0 版本）会自动为模型类生成一个<code>__repr__()</code>方法。当在 Python Shell 中调用模型的对象时，<code>__repr__()</code>方法会返回一条类似“&lt;模型类名主键值&gt;”的字符串，比如&lt;Note 2&gt;</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Note</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    body = db.Column(db.Text)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 重新定义了__repr__</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;Note %r&gt;&#x27;</span> % self.body</span><br></pre></td></tr></table></div></figure>        <h4 id="Create"   >          <a href="#Create" class="heading-link"><i class="fas fa-link"></i></a>Create</h4>      <figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from app import db, Note</span><br><span class="line">&gt;&gt;&gt; note1 &#x3D; Note(body&#x3D;&#39;remember Sammy Jankis&#39;)</span><br><span class="line">&gt;&gt;&gt; note2 &#x3D; Note(body&#x3D;&#39;SHAVE&#39;)</span><br><span class="line">&gt;&gt;&gt; note3 &#x3D; Note(body&#x3D;&#39;DON&#39;T BELIEVE HIS LIES, HE IS THE ONE, KILL HIM&#39;)</span><br><span class="line">&gt;&gt;&gt; db.session.add(note1)</span><br><span class="line">&gt;&gt;&gt; db.session.add(note2)</span><br><span class="line">&gt;&gt;&gt; db.session.add(note3)</span><br><span class="line">&gt;&gt;&gt; db.session.commit()</span><br></pre></td></tr></table></div></figure><blockquote><p>除了依次调用<code>add()</code>方法添加多个记录，也可以使用<code>add_all()</code>一次添加包含所有记录对象的列表</p><p>Flask-SQLAlchemy 提供了一个<strong>SQLALCHEMY_COMMIT_ON_TEARDOWN</strong>配置变量，将其设为 True 可以设置自动调用<code>commit()</code>方法提交数据库会话。因为存在潜在的 Bug，目前已不建议使用，而且未来版本中将移除该配置变量。避免使用该配置变量，可使用手动调用<code>db.session.commit()</code>方法的方式提交数据库会话</p></blockquote>        <h4 id="Read"   >          <a href="#Read" class="heading-link"><i class="fas fa-link"></i></a>Read</h4>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;模型类&gt;.query.&lt;过滤方法&gt;.&lt;查询方法&gt;</span><br></pre></td></tr></table></div></figure><ul><li>常用过滤方法</li></ul><div class="table-container"><table><thead><tr><th>过滤方法</th><th>说明</th></tr></thead><tbody><tr><td>filter()</td><td>使用指定的规则过滤记录，返回新产生的查询对象</td></tr><tr><td>filter_by()</td><td>使用指定规则过滤记录（以关键字表达式的形式），返回新产生的查询对象</td></tr><tr><td>order_by()</td><td>根据指定条件对记录进行排序，返回新产生的查询对象</td></tr><tr><td>limit(limit)</td><td>使用指定的值限制原查询返回的记录数量，返回新产生的查询对象</td></tr><tr><td>group_by()</td><td>根据指定条件对记录进行分组，返回新产生的查询对象</td></tr><tr><td>offset(sooset)</td><td>使用指定的值偏移原查询的结果，返回新产生的查询对象</td></tr></tbody></table></div><ul><li>常用查询方法</li></ul><div class="table-container"><table><thead><tr><th>查询方法</th><th>说明</th></tr></thead><tbody><tr><td>all()</td><td>返回包含所有查询记录的列表</td></tr><tr><td>first()</td><td>返回查询的第一条，未找到返回 None</td></tr><tr><td>one()</td><td>返回第一条记录，且仅允许有一条记录，如果数量大于 1 或者小于 1，则抛出异常 get</td></tr><tr><td>get(ident)</td><td>主键作为参数，返回指定主键值的记录，如果未找到，则返回 None</td></tr><tr><td>count()</td><td>返回查询结果的数量</td></tr><tr><td>one_or_none()</td><td>类似 one()，如果数量不为 1，则返回 None</td></tr><tr><td>first_or_404()</td><td>返回查询的第一条记录，如果未找到，则返回 404 错误</td></tr><tr><td>get_or_404()</td><td>主键作为参数，返回指定主键值的记录，如果未找到，则返回 404</td></tr><tr><td>paginate()</td><td>返回一个 Pagination 对象，可以对记录进行分页处理</td></tr><tr><td>with_parent(instance)</td><td>传入模型实例作为参数，返回和这个实例相关联的对象</td></tr></tbody></table></div><ul><li>查看对应的查询语句</li></ul><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="built_in">print</span>(News.query.filter_by(title=<span class="string">&#x27;abc&#x27;</span>))</span></span><br><span class="line">SELECT news.new_id AS news_new_id, news.title AS news_title, news.new_url AS news_new_url, news.time AS news_time</span><br><span class="line">FROM news</span><br><span class="line">WHERE news.title = %(title_1)s</span><br></pre></td></tr></table></div></figure><ul><li><p>filter()方法中传递的表达式</p><ul><li>==或!=</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">News.query.<span class="built_in">filter</span>(News.title==<span class="string">&#x27;abc&#x27;</span>)</span><br></pre></td></tr></table></div></figure><ul><li>LIKE</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">News.query.<span class="built_in">filter</span>(News.title.like(<span class="string">&#x27;abc&#x27;</span>))</span><br></pre></td></tr></table></div></figure><ul><li>IN</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">News.query.<span class="built_in">filter</span>(News.title.in_([<span class="string">&#x27;abc&#x27;</span>,<span class="string">&#x27;def&#x27;</span>]))</span><br></pre></td></tr></table></div></figure><ul><li>NOT IN</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">News.query.<span class="built_in">filter</span>(~News.title.in_([<span class="string">&#x27;abc&#x27;</span>,<span class="string">&#x27;def&#x27;</span>]))</span><br></pre></td></tr></table></div></figure><ul><li>AND</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> and_</span><br><span class="line">News.query.<span class="built_in">filter</span>(and_(News.new_id==<span class="string">&#x27;1000&#x27;</span>, News.title==<span class="string">&#x27;abc&#x27;</span>))</span><br><span class="line"></span><br><span class="line">News.query.<span class="built_in">filter</span>(News.new_id==<span class="string">&#x27;1000&#x27;</span>, News.title==<span class="string">&#x27;abc&#x27;</span>)</span><br></pre></td></tr></table></div></figure><ul><li>OR</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> or_</span><br><span class="line">News.query.<span class="built_in">filter</span>(or_(News.title == <span class="string">&#x27;foo&#x27;</span>, News.title == <span class="string">&#x27;bar&#x27;</span>))</span><br></pre></td></tr></table></div></figure></li><li><p>和<code>filter()</code>方法相比，<code>filter_by()</code>方法更易于使用。在<code>filter_by()</code>方法中，可以使用关键字表达式来指定过滤规则。更方便的是，可以在这个过滤器中直接使用字段名称。</p><ul><li><code>News.query.filter_by(title=&#39;abc&#39;).first()</code></li></ul></li></ul>        <h4 id="Update"   >          <a href="#Update" class="heading-link"><i class="fas fa-link"></i></a>Update</h4>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">new = News.query.get(<span class="number">1001</span>)</span><br><span class="line">new.title = <span class="string">&#x27;def&#x27;</span></span><br><span class="line">db.session.commit()</span><br></pre></td></tr></table></div></figure><blockquote><p>只有要插入新的记录或要将现有的记录添加到会话中时才需要使用<code>add()</code>方法，单纯要更新现有的记录时只需要直接为属性赋新值，然后提交会话</p></blockquote>        <h4 id="Delete"   >          <a href="#Delete" class="heading-link"><i class="fas fa-link"></i></a>Delete</h4>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">new = News.query.get(<span class="number">1001</span>)</span><br><span class="line">db.session.delete(new)</span><br><span class="line">db.session.commit()</span><br></pre></td></tr></table></div></figure>        <h2 id="定义关系"   >          <a href="#定义关系" class="heading-link"><i class="fas fa-link"></i></a>定义关系</h2>      <ul><li>每一次使用<strong>shell</strong>命令启动 Python Shell 后都要从 app 模块里导入 db 对象和相应的模型类，集成在<strong>shell</strong>上下文，简化工作</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注册shell上下文处理函数</span></span><br><span class="line"><span class="meta">@app.shell_context_processor</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_shell_context</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dict</span>(db=db, News=News)  <span class="comment"># 等同于&#123;&#x27;db&#x27;: db, &#x27;News&#x27;: News&#125;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="一对多"   >          <a href="#一对多" class="heading-link"><i class="fas fa-link"></i></a>一对多</h3>      <ul><li>一个作者可以写作多篇文章</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">70</span>), unique=<span class="literal">True</span>)</span><br><span class="line">    phone = db.Column(db.String(<span class="number">20</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在“一”一侧定义</span></span><br><span class="line">    articles = db.relationship(<span class="string">&#x27;Article&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    title = db.Column(db.String(<span class="number">50</span>), index=<span class="literal">True</span>)</span><br><span class="line">    body = db.Column(db.Text)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在“多”一侧定义</span></span><br><span class="line">    author_id = db.Column(db.Integer, db.ForeignKey(<span class="string">&#x27;author.id&#x27;</span>))</span><br></pre></td></tr></table></div></figure><blockquote><p>关系属性的名称没有限制，可以自由修改。它相当于一个快捷查询，不会作为字段写入数据库中。</p></blockquote><ul><li><p>articles 使用了<code>db.relationship()</code>关系函数定义为关系属性，这个关系属性返回多个记录，为集合关系属性。<code>relationship()</code>函数的第一个参数为关系另一侧的模型名称，它会告诉<strong>SQLAlchemy</strong>将<strong>Author 类</strong>与<strong>Article 类</strong>建立关系。</p></li><li><p>当这个关系属性被调用时，SQLAlchemy 会找到关系另一侧（即 article 表）的外键字段（即 author_id），然后反向查询 article 表中所有 author_id 值为当前表主键值（即 author.id）的记录，返回包含这些记录的列表，也就是返回某个作者对应的多篇文章记录。</p></li><li><p>建立关系的方法</p><ul><li>直接赋值<ul><li><code>arc.author_id = 1</code></li></ul></li><li>操作关系属性 append<ul><li><code>foo.articles.append(spam)</code></li></ul></li><li>remove<ul><li><code>foo.articles.remove(spam)</code></li></ul></li><li>pop</li></ul></li><li><p>常用 SQLAlchemy 关系函数参数</p></li></ul><div class="table-container"><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>back_populates</td><td>定义反向引用，用于建立双向关系，在关系的另一侧也必须显式定义关系属性</td></tr><tr><td>backref</td><td>添加反向引用，自动在另一侧建立关系属性，是 back_populates 的简化版</td></tr><tr><td>lazy</td><td>指定如何加载相关记录，具体如下表所示</td></tr><tr><td>uselist</td><td>指定是否使用列表的形式加载记录，设为 False 则使用标量（scalar）</td></tr><tr><td>cascade</td><td>设置级联操作</td></tr><tr><td>order_by</td><td>指定加载相关记录时的排序方式</td></tr><tr><td>scondary</td><td>在多对多关系中指定关联表</td></tr><tr><td>primaryjoin</td><td>指定多对多关系中的一级联结条件</td></tr><tr><td>secondaryjoin</td><td>指定多对多关系中的二级联结条件</td></tr></tbody></table></div><ul><li>lazy 参数的常用选项</li></ul><div class="table-container"><table><thead><tr><th>关系加载方式</th><th>说明</th></tr></thead><tbody><tr><td>select</td><td>在必要时一次性加载记录，返回包含记录的列表（默认值），等同于 lazy=True</td></tr><tr><td>joined</td><td>和父查询一样加载记录，但使用联接，等同于 lazy=False</td></tr><tr><td>immediate</td><td>一旦父查询加载就加载</td></tr><tr><td>subquery</td><td>类似于 joined，不顾将使用子查询</td></tr><tr><td>dynamic</td><td>不直接加载记录，而是返回一个包含相关记录的 query 对象，以便再继续附加查询函数对结果进行过滤</td></tr></tbody></table></div><blockquote><p>dynamic 选项仅用于集合关系属性，</p><p>不可用于多对一、一对一或是在关系函数中将 uselist 参数设为 False 的情况</p></blockquote><blockquote><p>许多教程和示例使用 dynamic 来动态加载所有集合关系属性对应的记录，这是应该避免的行为。</p><p>使用 dynamic 加载方式意味着每次操作关系都会执行一次 SQL 查询，这会造成潜在的性能问题。</p><p>大多数情况下只需要使用默认值（select），只有在调用关系属性会返回大量记录，并且总是需要对关系属性返回的结果附加额外的查询时才需要使用动态加载（lazy=’dynamic’）</p></blockquote>        <h4 id="建立双向关系"   >          <a href="#建立双向关系" class="heading-link"><i class="fas fa-link"></i></a>建立双向关系</h4>      <ul><li>双向关系并不是必须的，但在某些情况下会非常方便。双向关系的建立很简单，通过在关系的另一侧也创建一个<code>relationship()</code>函数，就可以在两个表之间建立双向关系</li><li>使用作家（Writer）和书（Book）的一对多关系来进行演示，建立双向关系后的 Writer 和 Book 类</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Writer</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">70</span>), unique=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    books = db.relationship(<span class="string">&#x27;Book&#x27;</span>, back_populates=<span class="string">&#x27;writer&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    title = db.Column(db.String(<span class="number">50</span>), index=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    writer_id = db.Column(db.Integer, db.ForeignKey(<span class="string">&#x27;writer.id&#x27;</span>))</span><br><span class="line">    writer = db.relationship(<span class="string">&#x27;Writer&#x27;</span>, back_populates=<span class="string">&#x27;books&#x27;</span>)</span><br></pre></td></tr></table></div></figure><ul><li>在关系函数中，使用<strong>back_populates</strong>参数来连接对方，<strong>back_populates</strong>参数的值需要设为关系另一侧的关系属性名。</li></ul><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 先创建1个Writer和2个Book记录，并添加到数据库</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; king = Writer(name=<span class="string">&#x27;Stephen King&#x27;</span>)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; carrie = Book(name=<span class="string">&#x27;Carrie&#x27;</span>)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; it = Book(name=<span class="string">&#x27;IT&#x27;</span>)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; db.session.add(king)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; db.session.add(carrie)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; db.session.add(it)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; db.session.commit()</span></span><br></pre></td></tr></table></div></figure><figure class="highlight sh"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试</span></span><br><span class="line">&gt;&gt;&gt; carrie.writer = king</span><br><span class="line">&gt;&gt;&gt; carrie.writer</span><br><span class="line">&lt;Writer u<span class="string">&#x27;Stephen King&#x27;</span>&gt;</span><br><span class="line">&gt;&gt;&gt; king.books</span><br><span class="line">[&lt;Book u<span class="string">&#x27;Carrie&#x27;</span>&gt;]</span><br><span class="line">&gt;&gt;&gt; it.writer = king</span><br><span class="line">&gt;&gt;&gt; king.books</span><br><span class="line">[&lt;Book u<span class="string">&#x27;Carrie&#x27;</span>&gt;, &lt;Book u<span class="string">&#x27;IT&#x27;</span>&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解除关系</span></span><br><span class="line">&gt;&gt;&gt; carrie.writer = None</span><br><span class="line">&gt;&gt;&gt; king.books</span><br><span class="line">[&lt;Book u<span class="string">&#x27;IT&#x27;</span>&gt;]</span><br><span class="line">&gt;&gt;&gt; db.session.commit()</span><br></pre></td></tr></table></div></figure>        <h4 id="使用-backref-简化关系定义"   >          <a href="#使用-backref-简化关系定义" class="heading-link"><i class="fas fa-link"></i></a>使用 backref 简化关系定义</h4>      <ul><li>以一对多关系为例，backref 参数用来自动为关系另一侧添加关系属性，作为反向引用（back reference），赋予的值会作为关系另一侧的关系属性名称。</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singer</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">70</span>), unique=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    songs = db.relationship(<span class="string">&#x27;Song&#x27;</span>, backref=<span class="string">&#x27;singer&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Song</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">50</span>), index=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    singer_id = db.Column(db.Integer, db.ForeignKey(<span class="string">&#x27;singer.id&#x27;</span>))</span><br></pre></td></tr></table></div></figure><ul><li>在定义集合属性 songs 的关系函数中，将 backref 参数设为 singer，这会同时在 Song 类中添加了一个 singer 标量属性。</li><li>这时仅需要定义一个关系函数，虽然 singer 是一个“看不见的关系属性”，但在使用上和定义两个关系函数并使用<strong>back_populates</strong>参数的效果完全相同</li></ul><blockquote><p>希望可以对在关系另一侧的关系属性进行设置，这时就需要使用<code>backref()</code>函数。<code>backref()</code>函数接收第一个参数作为在关系另一侧添加的关系属性名，其他关键字参数会作为关系另一侧关系函数的参数传入。</p><p>比如，我们要在关系另一侧“看不见的<code>relationship()</code>函数”中将 uselist 参数设为 False，可以这样实现</p></blockquote><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singer</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    ...</span><br><span class="line">    songs = relationship(<span class="string">&#x27;Song&#x27;</span>, backref=backref(<span class="string">&#x27;singer&#x27;</span>, uselist=<span class="literal">False</span>))</span><br></pre></td></tr></table></div></figure><blockquote><p>尽管使用<strong>backref</strong>非常方便，但通常来说“显式好过隐式”，所以应该尽量使用<strong>back_populates</strong>定义双向关系</p></blockquote>        <h3 id="多对一"   >          <a href="#多对一" class="heading-link"><i class="fas fa-link"></i></a>多对一</h3>      <ul><li>多个居民居住在同一个城市</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Citizen</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">70</span>), unique=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    city_id = db.Column(db.Integer, db.ForeignKey(<span class="string">&#x27;city.id&#x27;</span>))</span><br><span class="line">    city = db.relationship(<span class="string">&#x27;City&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">City</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">30</span>), unique=<span class="literal">True</span>)</span><br></pre></td></tr></table></div></figure><ul><li>这时定义的 city 关系属性是一个标量属性（返回单一数据）。</li><li>当 Citizen.city 被调用时，SQLAlchemy 会根据外键字段 city_id 存储的值查找对应的 City 对象并返回，即居民记录对应的城市记录</li></ul><blockquote><p>当建立双向关系时，如果不使用<strong>backref</strong>，那么一对多和多对一关系模式在定义上完全相同，这时可以将一对多和多对一视为同一种关系模式</p></blockquote>        <h3 id="一对一"   >          <a href="#一对一" class="heading-link"><i class="fas fa-link"></i></a>一对一</h3>      <ul><li>每个国家只有一个首都</li><li>Country 类表示国家，Capital 类表示首都</li><li>要确保关系两侧的关系属性都是标量属性，都只返回单个值，所以要在定义集合属性的关系函数中将 uselist 参数设为 False，这时一对多关系将被转换为一对一关系</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Country</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">30</span>), unique=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    capital = db.relationship(<span class="string">&#x27;Capital&#x27;</span>, uselist=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Capital</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">30</span>), unique=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    country_id = db.Column(db.Integer, db.ForeignKey(<span class="string">&#x27;country.id&#x27;</span>))</span><br><span class="line">    country = db.relationship(<span class="string">&#x27;Country&#x27;</span>)</span><br></pre></td></tr></table></div></figure><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; china = Country(name=<span class="string">&#x27;China&#x27;</span>)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; beijing = Capital(name=<span class="string">&#x27;Beijing&#x27;</span>)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; db.session.add(china)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; db.session.add(beijing)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; db.session.commit()</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; china.capital = beijing</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; china.capital</span></span><br><span class="line">&lt;Capital 1&gt;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; beijing.country</span></span><br><span class="line">u&#x27;China&#x27;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; tokyo = Capital(name<span class="string">&#x27;Tokyo&#x27;</span>)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; china.capital.append(tokyo)</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">    File &quot;&lt;console&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">AttributeError: &#x27;Capital&#x27; object has no attribute &#x27;append&#x27;</span><br></pre></td></tr></table></div></figure>        <h3 id="多对多"   >          <a href="#多对多" class="heading-link"><i class="fas fa-link"></i></a>多对多</h3>      <ul><li>每个学生有多个老师，而每个老师有多个学生</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">association_table = db.Table(</span><br><span class="line">    <span class="string">&#x27;association&#x27;</span>,</span><br><span class="line">    db.Column(</span><br><span class="line">        <span class="string">&#x27;student_id&#x27;</span>,</span><br><span class="line">        db.Integer,</span><br><span class="line">        db.ForeignKey(<span class="string">&#x27;student.id&#x27;</span>)</span><br><span class="line">    ),</span><br><span class="line">    db.Column(</span><br><span class="line">        <span class="string">&#x27;teacher_id&#x27;</span>,</span><br><span class="line">        db.Integer,</span><br><span class="line">        db.ForeignKey(<span class="string">&#x27;teacher.id&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">70</span>), unique=<span class="literal">True</span>)</span><br><span class="line">    grade = db.Column(db.String(<span class="number">20</span>))</span><br><span class="line">    teachers = db.relationship(</span><br><span class="line">        <span class="string">&#x27;Teacher&#x27;</span>,</span><br><span class="line">        secondary=association_table,</span><br><span class="line">        back_populates=<span class="string">&#x27;students&#x27;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">70</span>), unique=<span class="literal">True</span>)</span><br><span class="line">    office = db.Column(db.String(<span class="number">20</span>))</span><br><span class="line">    students = db.relationship(</span><br><span class="line">        <span class="string">&#x27;Student&#x27;</span>,</span><br><span class="line">        secondary=association_table,</span><br><span class="line">        back_populates=<span class="string">&#x27;teachers&#x27;</span></span><br><span class="line">    )</span><br></pre></td></tr></table></div></figure><blockquote><p>可以使用<code>append()</code>与<code>remove()</code>方法</p></blockquote>        <h2 id="使用-Flask-Migrate-迁移数据库"   >          <a href="#使用-Flask-Migrate-迁移数据库" class="heading-link"><i class="fas fa-link"></i></a>使用 Flask-Migrate 迁移数据库</h2>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-migrate</span><br></pre></td></tr></table></div></figure><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">from</span> flask_migrate <span class="keyword">import</span> Migrate</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">...</span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line">migrate = Migrate(app, db)  <span class="comment"># 在db对象创建后调用</span></span><br></pre></td></tr></table></div></figure>        <h3 id="创建迁移环境"   >          <a href="#创建迁移环境" class="heading-link"><i class="fas fa-link"></i></a>创建迁移环境</h3>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> flask db init</span></span><br></pre></td></tr></table></div></figure><blockquote><p>Flask-Migrate 提供了一个命令集，使用 db 作为命名集名称，它提供的命令都以<code>flask db</code>开头。可以在命令行中输入<code>flask--help</code>查看所有可用的命令和说明</p></blockquote><ul><li>迁移环境只需要创建一次。这会在项目根目录下创建一个 migrations 文件夹，其中包含了自动生成的配置文件和迁移版本文件夹</li></ul>        <h3 id="生成迁移脚本"   >          <a href="#生成迁移脚本" class="heading-link"><i class="fas fa-link"></i></a>生成迁移脚本</h3>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> flask db migrate -m <span class="string">&quot;add note timestamp&quot;</span></span></span><br><span class="line">...</span><br><span class="line">INFO [alembic.autogenerate.compare] Detected added column &#x27;message.timestamp</span><br><span class="line">Generating /Path/to/your/database/migrations/versions/c52a02014635_add note_timestamp.py ... done</span><br></pre></td></tr></table></div></figure><ul><li>这条命令可以简单理解为在 flask 里对数据库（db）进行迁移（migrate）。-m 选项用来添加迁移备注信息。</li><li>从上面的输出信息可以看到，Alembic 检测出了模型的变化：表 note 新添加了一个 timestamp 列，并且相应生成了一个迁移脚本 c52a02014635_add_note_timestamp.py</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;add note timastamp</span></span><br><span class="line"><span class="string">Revision ID: c52a02014635</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> alembic <span class="keyword">import</span> op</span><br><span class="line"><span class="keyword">import</span> sqlalchemy <span class="keyword">as</span> sa</span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upgrade</span>():</span></span><br><span class="line">    <span class="comment"># ### commands auto generated by Alembic - please adjust! ###</span></span><br><span class="line">    op.add_column(<span class="string">&#x27;note&#x27;</span>, sa.Column(<span class="string">&#x27;timestamp&#x27;</span>, sa.DateTime(), nullable=<span class="literal">True</span>))</span><br><span class="line">    <span class="comment"># ### end Alembic commands ###</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">downgrade</span>():</span></span><br><span class="line">    <span class="comment"># ### commands auto generated by Alembic - please adjust! ###</span></span><br><span class="line">    op.drop_column(<span class="string">&#x27;note&#x27;</span>, <span class="string">&#x27;timestamp&#x27;</span>)</span><br><span class="line">    <span class="comment"># ### end Alembic commands ###</span></span><br></pre></td></tr></table></div></figure><ul><li>从上面的代码可以看出，迁移脚本主要包含了两个函数：<ul><li><code>upgrade()</code>函数用来将改动应用到数据库，函数中包含了向表中添加 timestamp 字段的命令；</li><li>而<code>downgrade()</code>函数用来撤销改动，包含了删除 timestamp 字段的命令</li></ul></li><li>有些复杂的操作无法实现自动迁移，这时可以使用 revision 命令手动创建迁移脚本。这同样会生成一个迁移脚本，不过脚本中的<code>upgrade()</code>和<code>downgrade()</code>函数都是空的。需要使用 Alembic 提供的<strong>Operations</strong>对象指令在这两个函数中实现具体操作</li></ul>        <h3 id="更新数据库"   >          <a href="#更新数据库" class="heading-link"><i class="fas fa-link"></i></a>更新数据库</h3>      <ul><li>生成了迁移脚本后，使用 upgrade 子命令即可更新数据库</li></ul><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; $ flask db upgrade</span></span><br><span class="line">...INFO  [alembic.runtime.migration] Running upgrade  -&gt; c52a02014635, add note timestamp</span><br></pre></td></tr></table></div></figure><ul><li>生成了迁移脚本后，使用 upgrade 子命令即可更新数据库</li></ul><blockquote><p>如果想回滚迁移，那么可以使用 downgrade 命令（降级），它会撤销最后一次迁移在数据库中的改动，这在开发时非常有用。</p></blockquote>        <h2 id="进阶"   >          <a href="#进阶" class="heading-link"><i class="fas fa-link"></i></a>进阶</h2>              <h3 id="级联操作"   >          <a href="#级联操作" class="heading-link"><i class="fas fa-link"></i></a>级联操作</h3>      <ul><li><strong>Cascade</strong>意为“级联操作”，就是在操作一个对象的同时，对相关的对象也执行某些操作。</li><li>通过一个 Post 模型和 Comment 模型来演示级联操作，分别表示文章（帖子）和评论，两者为一对多关系</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    title = db.Column(db.String(<span class="number">50</span>), unique=<span class="literal">True</span>)</span><br><span class="line">    body = db.Column(db.Text)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># comments = db.relationship(&#x27;Comment&#x27;, back_populates=&#x27;post&#x27;)</span></span><br><span class="line">    comments = relationship(<span class="string">&#x27;Comment&#x27;</span>, cascade=<span class="string">&#x27;save-update, merge, delete&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    body = db.Column(db.Text)</span><br><span class="line"></span><br><span class="line">    post_id = db.Column(db.Integer, db.ForeignKey(<span class="string">&#x27;post.id&#x27;</span>))</span><br><span class="line">    post = db.relationship(<span class="string">&#x27;Post&#x27;</span>, back_populates=<span class="string">&#x27;comments&#x27;</span>)</span><br></pre></td></tr></table></div></figure><ul><li>常用配置组合<ul><li><code>save-update, merge</code>（默认值）</li><li><code>save-update, merge, delete</code></li><li><code>all</code></li><li><code>all, delete-orphan</code></li></ul></li></ul>        <h4 id="save-update"   >          <a href="#save-update" class="heading-link"><i class="fas fa-link"></i></a>save-update</h4>      <ul><li><code>save-update</code>是默认的级联行为，当<code>cascade</code>参数设为<code>save-update</code>时，如果使用<code>db.session.add()</code>方法将 Post 对象添加到数据库会话时，那么与 Post 相关联的 Comment 对象也将被添加到数据库会话</li></ul><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; post1 = Post()</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; comment1 = Comment()</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; comment2 = Comment()</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; db.session.add(post1)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; post1 <span class="keyword">in</span> db.session</span></span><br><span class="line">True</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; comment1 <span class="keyword">in</span> db.session</span></span><br><span class="line">False</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; comment2 <span class="keyword">in</span> db.session</span></span><br><span class="line">False</span><br></pre></td></tr></table></div></figure><ul><li>如果让 post1 与这两个 Comment 对象建立关系，那么这两个 Comment 对象也会自动被添加到数据库会话中</li></ul><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; post1.comments.append(comment1)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; post1.comments.append(comment2)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; comment1 <span class="keyword">in</span> db.session</span></span><br><span class="line">True</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; comment2 <span class="keyword">in</span> db.session</span></span><br><span class="line">True</span><br></pre></td></tr></table></div></figure><ul><li>当调用<code>db.session.commit()</code>提交数据库会话时，这三个对象都会被提交到数据库中</li></ul>        <h4 id="delete"   >          <a href="#delete" class="heading-link"><i class="fas fa-link"></i></a>delete</h4>      <ul><li><p>如果某个 Post 对象被删除，那么按照默认的行为，该 Post 对象相关联的所有 Comment 对象都将与这个 Post 对象取消关联，外键字段的值会被清空。</p></li><li><p>如果 Post 类的关系函数中<code>cascade</code>参数设为<strong>delete</strong>时，这些相关的 Comment 会在关联的 Post 对象删除时被一并删除。当需要设置<strong>delete</strong>级联时，将级联值设为<code>all</code>或<code>save-update, merge, delete</code></p></li><li><p>创建一个文章对象 post2 和两个评论对象 comment3 和 comment4，并将这两个评论对象与文章对象建立关系，将它们添加到数据库会话并提交</p></li></ul><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; post2 = Post()</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; comment3 = Comment()</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; comment4 = Comment()</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; post2.comments.append(comment3)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; post2.comments.append(comment4)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; db.session.add(post2)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; db.session.commit()</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Post.query.all()</span></span><br><span class="line">[&lt;Post 1&gt;, &lt;Post 2&gt;]</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Comment.query.all()</span></span><br><span class="line">[&lt;Comment 1&gt;, &lt;Comment 2&gt;, &lt;Comment 3&gt;, &lt;Comment 4&gt;]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; post2 = Post.quer2y.get(2)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; db.session.delete(post2)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; db.session.commit()</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Post.query.all()</span></span><br><span class="line">[&lt;Post 1&gt;]</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Comment.query.all()</span></span><br><span class="line">[&lt;Comment 1&gt;, &lt;Comment 2&gt;]</span><br></pre></td></tr></table></div></figure>        <h4 id="delete-orphan"   >          <a href="#delete-orphan" class="heading-link"><i class="fas fa-link"></i></a>delete-orphan</h4>      <ul><li>这个模式是基于 delete 级联的，必须和 delete 级联一起使用，通常会设为<code>all, delete-orphan</code>，因为<code>all</code>包含<code>delete</code>。</li><li>因此当<code>cascade</code>参数设为<code>delete-orphan</code>时，它首先包含 delete 级联的行为：当某个 Post 对象被删除时，所有相关的 Comment 对象都将被删除（delete 级联）。除此之外，当某个 Post 对象（父对象）与某个 Comment 对象（子对象）解除关系时，也会删除该 Comment 对象，这个解除关系的对象被称为孤立对象（orphan object）</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    ...</span><br><span class="line">    comments = relationship(<span class="string">&#x27;Comment&#x27;</span>, cascade=<span class="string">&#x27;all, delete-orphan&#x27;</span>)</span><br></pre></td></tr></table></div></figure><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; post3 = Post()</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; comment5 = Comment()</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; comment6 = Comment()</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; post3.comments.append(comment5)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; post3.comments.append(comment6)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; db.session.add(post3)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; db.session.commit()</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Post.query.all()</span></span><br><span class="line">[&lt;Post 1&gt;, &lt;Post 3&gt;]</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Comment.query.all()</span></span><br><span class="line">[&lt;Comment 1&gt;, &lt;Comment 2&gt;, &lt;Comment 5&gt;, &lt;Comment 6&gt;]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; post3.comments.remove(comment5)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; post3.comments.remove(comment6)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; db.session.commit()</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Comment.query.all()</span></span><br><span class="line">[&lt;Comment 1&gt;, &lt;Comment 2&gt;]</span><br></pre></td></tr></table></div></figure><blockquote><p><strong>delete</strong>和<strong>delete-orphan</strong>通常会在一对多关系模式中，而且“多”这一侧的对象附属于“一”这一侧的对象时使用。尤其是如果“一”这一侧的“父”对象不存在了，那么“多”这一侧的“子”对象不再有意义的情况。</p><p>比如，文章和评论的关系就是一个典型的示例。当文章被删除了，那么评论也就没必要再留存。在这种情况下，如果不使用级联操作，那么我们就需要手动迭代关系另一侧的所有评论对象，然后一一进行删除操作。</p></blockquote>        <h3 id="事件监听"   >          <a href="#事件监听" class="heading-link"><i class="fas fa-link"></i></a>事件监听</h3>      <ul><li><p>SQLAlchemy 提供了一个<code>listen_for()</code>装饰器，它可以用来注册事件回调函数</p></li><li><p><code>listen_for()</code>装饰器主要接收两个参数</p><ul><li><strong>target</strong>表示监听的对象，这个对象可以是模型类、类实例或类属性等</li><li><strong>identifier</strong>参数表示被监听事件的标识符，比如，用于监听属性的事件标识符有 set、append、remove、init_scalar、init_collection 等</li></ul></li><li><p>创建了一个 Draft 模型类表示草稿，其中包含 body 字段和 edit_time 字段，分别存储草稿正文和被修改的次数，其中 edit_time 字段的默认值为 0</p></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Draft</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    body = db.Column(db.Text)</span><br><span class="line">    edit_time = db.Column(db.Integer, default=<span class="number">0</span>)</span><br></pre></td></tr></table></div></figure><ul><li>通过注册事件监听函数，可以实现在 body 列修改时，自动叠加表示被修改次数的 edit_time 字段。</li><li>在 SQLAlchemy 中，每个事件都会有一个对应的事件方法，不同的事件方法支持不同的参数。被注册的监听函数需要接收对应事件方法的所有参数，所以具体的监听函数用法因使用的事件而异</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@db.event.listens_for(<span class="params">Draft.body, <span class="string">&#x27;set&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">increment_edit_time</span>(<span class="params">target, value, oldvalue, initiator</span>):</span></span><br><span class="line">    <span class="keyword">if</span> target.edit_time <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        target.edit_time += <span class="number">1</span></span><br></pre></td></tr></table></div></figure><blockquote><p>其中的 target 参数表示触发事件的模型类实例，使用<code>target.edit_time</code>即可获取需要叠加的字段。其他的参数也需要照常写出，虽然这里没有用到。value 表示被设置的值，oldvalue 表示被取代的旧值。</p></blockquote><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; draft = Draft(body=<span class="string">&#x27;init&#x27;</span>)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; db.session.add(draft)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; db.session.commit()</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; draft.edit_time</span></span><br><span class="line">0</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; draft.body = <span class="string">&#x27;edited&#x27;</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; draft.edit_time</span></span><br><span class="line">1</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; draft.body = <span class="string">&#x27;edited again&#x27;</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; draft.edit_time</span></span><br><span class="line">2</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; draft.body = <span class="string">&#x27;edited again again&#x27;</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; draft.edit_time</span></span><br><span class="line">3</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; db.session.commit()</span></span><br></pre></td></tr></table></div></figure><ul><li>另一种方法<ul><li>通过在 listen_for（）装饰器中将关键字参数 name 设为 True，可以在监听函数中接收<code>**kwargs</code>作为参数（可变长关键字参数），即“named argument”。</li><li>然后在函数中可以使用参数名作为键来从<code>**kwargs</code>字典获取对应的参数值</li></ul></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@db.event.listens_for(<span class="params">Draft.body, <span class="string">&#x27;set&#x27;</span>, named=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">increment_edit_time</span>(<span class="params">**kwargs</span>):</span></span><br><span class="line">    <span class="keyword">if</span> kwargs[<span class="string">&#x27;target&#x27;</span>].edit_time <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        kwargs[<span class="string">&#x27;target&#x27;</span>].edit_time += <span class="number">1</span></span><br></pre></td></tr></table></div></figure><blockquote><p>除了使用<strong>listen_for</strong>装饰器，我们还可以直接使用它内部调用的<code>listen()</code>函数注册事件监听函数时，第三个参数传入被注册的函数对象，比如<code>db.event.listen(SomeClass，&#39;load&#39;，my_load_listener)</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python3 </tag>
            
            <tag> Flask学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask学习04-表单</title>
      <link href="/2019/07/28/Flask%E5%AD%A6%E4%B9%A004-%E8%A1%A8%E5%8D%95/"/>
      <url>/2019/07/28/Flask%E5%AD%A6%E4%B9%A004-%E8%A1%A8%E5%8D%95/</url>
      
        <content type="html"><![CDATA[        <h2 id="HTML-表单"   >          <a href="#HTML-表单" class="heading-link"><i class="fas fa-link"></i></a>HTML 表单</h2>      <figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户名&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;密码&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;remember&quot;</span> <span class="attr">name</span>=<span class="string">&quot;remember&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;remember&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">small</span>&gt;</span>Remember me<span class="tag">&lt;/<span class="name">small</span>&gt;</span>&lt;/label</span><br><span class="line">    &gt;<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Log in&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></div></figure><span id="more"></span>        <h2 id="使用-Flask-WTF-处理表单"   >          <a href="#使用-Flask-WTF-处理表单" class="heading-link"><i class="fas fa-link"></i></a>使用 Flask-WTF 处理表单</h2>      <ul><li>安装<strong>Flask-WTF</strong>及其依赖</li></ul><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv install flask-wtf</span><br></pre></td></tr></table></div></figure><ul><li>Flask-WTF<strong>默认为每个表单启用 CSRF 保护，它自动生成和验证 CSRF 令牌</strong>。默认情况下，<strong>Flask-WTF</strong>使用程序密钥来对<strong>CSRF 令牌</strong>进行签名，所以我们需要为程序设置密钥：</li></ul><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.secret_key = &#x27;secret string&#x27;</span><br></pre></td></tr></table></div></figure>        <h3 id="定义-WTForms-表单类"   >          <a href="#定义-WTForms-表单类" class="heading-link"><i class="fas fa-link"></i></a>定义 WTForms 表单类</h3>      <ul><li>当使用<strong>WTForms</strong>创建表单时，表单由 Python 类表示，这个类继承从<strong>WTForms</strong>导入的 Form 基类。一个表单由若干个输入字段组成，这些字段分别用表单类的类属性来表示（字段即 Field，可以简单理解为表单内的输入框、按钮等部件）。下面定义了一个<strong>LoginForm</strong>类，最终会生成在前面定义的 HTML 表单：</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> Form, StringField, PasswordField, BooleanField, SubmitField</span><br><span class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> DataRequired, Length</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginForm</span>(<span class="params">Form</span>):</span></span><br><span class="line">    username = StringField(<span class="string">&#x27;Username&#x27;</span>, validators=[DataRequired()])</span><br><span class="line">    password = PasswordField(<span class="string">&#x27;Password&#x27;</span>, validators=[DataRequired(), Length(<span class="number">8</span>, <span class="number">128</span>)])</span><br><span class="line">    remember = BooleanField(<span class="string">&#x27;Remember me&#x27;</span>)</span><br><span class="line">    submit = SubmitField(<span class="string">&#x27;Log in&#x27;</span>)</span><br></pre></td></tr></table></div></figure><ul><li><p>每个字段属性通过实例化 WTForms 提供的字段类表示。字段属性的名称将作为对应 HTML<code>&lt;input&gt;</code>元素的 name 属性及 id 属性值。</p></li><li><p>常用的 WTForms 字段</p></li></ul><div class="table-container"><table><thead><tr><th>字段类</th><th>说明</th><th>对应的 html</th></tr></thead><tbody><tr><td>BooleanField</td><td>复选框，值会被处理为 True 或 False</td><td><code>&lt;input type=&quot;checkbox&quot;&gt;</code></td></tr><tr><td>DateField</td><td>文本字段，值会被处理为 datetime.date 对象</td><td><code>&lt;input type=&quot;text&quot;&gt;</code></td></tr><tr><td>DateTimeField</td><td>文本字段，值会被处理为 datetime.datetime 对象</td><td><code>&lt;input type=&quot;text&quot;&gt;</code></td></tr><tr><td>FileField</td><td>文件上传字段</td><td><code>&lt;input type=file&quot;&quot;&gt;</code></td></tr><tr><td>FloatField</td><td>浮点数字段，值会被处理为浮点型</td><td><code>&lt;input type=&quot;text&quot;&gt;</code></td></tr><tr><td>IntegerField</td><td>整数字段，值会被处理为整型</td><td><code>&lt;input type=&quot;text&quot;&gt;</code></td></tr><tr><td>RadioField</td><td>一组单选按钮</td><td><code>&lt;input type=&quot;radio&quot;&gt;</code></td></tr><tr><td>SelectField</td><td>下拉列表</td><td><code>&lt;select&gt;&lt;option&gt;&lt;/option&gt;&lt;/select&gt;</code></td></tr><tr><td>SelectMultipleField</td><td>多选下拉列表</td><td><code>&lt;select multiple&gt;&lt;option&gt;&lt;/option&gt;&lt;/select&gt;</code></td></tr><tr><td>SubmitField</td><td>提交按钮</td><td><code>&lt;input type=&quot;submit&quot;&gt;</code></td></tr><tr><td>StringField</td><td>文本字段</td><td><code>&lt;input type=&quot;text&quot;&gt;</code></td></tr><tr><td>HiddenField</td><td>隐藏文本字段</td><td><code>&lt;input type=&quot;hidden&quot;&gt;</code></td></tr><tr><td>PasswordField</td><td>密码文本字段</td><td><code>&lt;input type=&quot;password&quot;&gt;</code></td></tr><tr><td>TextAreaField</td><td>多行文本字段</td><td><code>&lt;textarea&gt;&lt;/textarea&gt;</code></td></tr></tbody></table></div><ul><li>通过实例化字段类时传入的参数，可以对字段进行设置，实例化字段类常用参数：</li></ul><div class="table-container"><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>label</td><td>字段标签<code>&lt;label&gt;</code>的值，也就是渲染后显示在输入字段前的文字</td></tr><tr><td>render_kw</td><td>一个字典，用来设置对应的 HTML<code>&lt;input&gt;</code>标签的属性，比如传入{‘placeholder’: ‘Name’}</td></tr><tr><td>validators</td><td>一个列表，包含一系列验证器，会在表单提交后被逐一调用验证表单数据</td></tr><tr><td>default</td><td>字符串或可调用对象，用来为表单字段设置默认值</td></tr></tbody></table></div><ul><li>在 WTForms 中，验证器（validator）是一系列用于验证字段数据的类，在实例化字段类时使用<strong>validators</strong>关键字来指定附加的验证器列表。验证器从<strong>wtforms.validators</strong>模块中导入，常用的验证器：</li></ul><div class="table-container"><table><thead><tr><th>验证器</th><th>说明</th></tr></thead><tbody><tr><td>DataRequired(message=None)</td><td>验证数据是否有效</td></tr><tr><td>Email(message=None)</td><td>验证 Email 地址</td></tr><tr><td>EqualTo(message=None)</td><td>验证两个字段的值是否相同</td></tr><tr><td>InputRequired(message=None)</td><td>验证是否有数据</td></tr><tr><td>Length(min=-1, max=-1, message=None)</td><td>验证输入值长度是否在给定的范围内</td></tr><tr><td>NumberRange(min=None, max=None, message=None)</td><td>验证输入数字是否在给定的范围内</td></tr><tr><td>Optional(strip_whitespace=True)</td><td>允许输入值为空，并跳过其他验证</td></tr><tr><td>Regexp(regex, flags=0, message=None)</td><td>使用正则表达式验证输入值</td></tr><tr><td>URL(require_tld=True, message=None)</td><td>验证 URL</td></tr><tr><td>AnyOf(values, message=None, values_formatter=None)</td><td>确保输入值在可选值列表中</td></tr><tr><td>NoneOf(values, message=None, values_formatter=None)</td><td>确保输入值不在可选值列表中</td></tr></tbody></table></div><ul><li>在 name 和 password 字段里，都使用了<strong>DataRequired</strong>验证器，用来验证输入的数据是否有效。另外，password 字段里还添加了一个<strong>Length</strong>验证器，用来验证输入的数据长度是否在给定的范围内。验证器的第一个参数一般为错误提示消息，可以使用<strong>message</strong>关键字传递参数，通过传入自定义错误信息来覆盖内置消息，比如：</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username = StringField(<span class="string">&#x27;Username&#x27;</span>, validators=[DataRequired()])</span><br><span class="line">name = StringField(<span class="string">&#x27;Your Name&#x27;</span>, validators=[DataRequired(message=<span class="string">u&#x27;名字不能为空！&#x27;</span>)])</span><br></pre></td></tr></table></div></figure><ul><li><p>Flask-WTF 定义表单时，仍然使用 WTForms 提供的字段类和验证器，创建的方式也完全相同，只不过表单类要继承 Flask-WTF 提供的 FlaskForm 类。FlaskForm 类继承自 Form 类，进行了一些设置，并附加了一些辅助方法，以便与 Flask 集成。</p></li><li><p>定义表单类</p></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># forms.py</span></span><br><span class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> FlaskForm</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> StringField, PasswordField, BooleanField, SubmitField</span><br><span class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> DataRequired, Length</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginForm</span>(<span class="params">FlaskForm</span>):</span></span><br><span class="line">    username = StringField(<span class="string">&#x27;Username&#x27;</span>, validators=[DataRequired()])</span><br><span class="line">    password = PasswordField(<span class="string">&#x27;Password&#x27;</span>, validators=[DataRequired(), Length(<span class="number">8</span>, <span class="number">128</span>)])</span><br><span class="line">    remember = BooleanField(<span class="string">&#x27;Remember me&#x27;</span>)</span><br><span class="line">    submit = SubmitField(<span class="string">&#x27;Log in&#x27;</span>)</span><br></pre></td></tr></table></div></figure><blockquote><p>配置键<strong>WTF_CSRF_ENABLED</strong>用来设置是否开启 CSRF 保护，默认为 True。Flask-WTF 会自动在实例化表单类时添加一个包含 CSRF 令牌值的隐藏字段，字段名为<strong>csrf_token</strong>。</p></blockquote>        <h3 id="输出-HTMl-代码"   >          <a href="#输出-HTMl-代码" class="heading-link"><i class="fas fa-link"></i></a>输出 HTMl 代码</h3>      <ul><li>以 WTForms 创建的 LoginForm 为例，实例化表单类，然后将实例属性转换成字符串或直接调用就可以获取表单字段对应的 HTML 代码：</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>form = LoginForm()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>form.username()</span><br><span class="line"><span class="string">&#x27;&lt;input id=&quot;username&quot; name=&quot;username&quot; required type=&quot;text&quot; value=&quot;&quot;&gt;&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>form.submit()</span><br><span class="line"><span class="string">&#x27;&lt;input id=&quot;submit&quot; name=&quot;submit&quot; type=&quot;submit&quot; value=&quot;Log in&quot;&gt;&#x27;</span></span><br></pre></td></tr></table></div></figure><ul><li>字段的<code>&lt;label&gt;</code>元素的 HTML 代码则可以通过<strong>form.字段名.label</strong>的形式获取：</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>form.username.label()</span><br><span class="line"><span class="string">&#x27;&lt;label for=&quot;username&quot;&gt;Username&lt;/label&gt;&#x27;</span></span><br></pre></td></tr></table></div></figure><ul><li>默认情况下，WTForms 输出的字段 HTML 代码只会包含 id 和 name 属性，属性值均为表单类中对应的字段属性名称。如果要添加额外的属性，通常有两种方法。</li></ul>        <h4 id="使用-render-kw-属性"   >          <a href="#使用-render-kw-属性" class="heading-link"><i class="fas fa-link"></i></a>使用 render_kw 属性</h4>      <ul><li>比如下面为 username 字段使用 render_kw 设置了 placeholder HTML 属性：</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username = StringField(<span class="string">&#x27;Username&#x27;</span>, render_kw=&#123;<span class="string">&#x27;placeholder&#x27;</span>: <span class="string">&#x27;Your Username&#x27;</span>&#125;)</span><br><span class="line"><span class="comment"># &lt;input type=&quot;text&quot; id=&quot;username&quot; name=&quot;username&quot; placeholder=&quot;Your Username&quot;&gt;</span></span><br></pre></td></tr></table></div></figure>        <h4 id="在调用字段时传入"   >          <a href="#在调用字段时传入" class="heading-link"><i class="fas fa-link"></i></a>在调用字段时传入</h4>      <ul><li>在调用字段属性时，通过添加括号使用关键字参数的形式也可以传入字段额外的 HTML 属性：</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>form.username(style=<span class="string">&#x27;width: 200px;&#x27;</span>, class_=<span class="string">&#x27;bar&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&lt;i nput class=&quot;bar&quot; id=&quot;username&quot; name=&quot;username&quot; style=&quot;width: 200px;&quot; type=&quot;text&quot;&gt;&#x27;</span></span><br></pre></td></tr></table></div></figure><blockquote><p>class 是 Python 的保留关键字，在这里使用<strong>class_</strong>来代替 class，渲染后的<code>&lt;input&gt;</code>会获得正确的 class 属性，在模板中调用时则可以直接使用 class。</p></blockquote>        <h3 id="在模板中渲染表单"   >          <a href="#在模板中渲染表单" class="heading-link"><i class="fas fa-link"></i></a>在模板中渲染表单</h3>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line"><span class="keyword">from</span> forms <span class="keyword">import</span> LoginForm</span><br><span class="line"><span class="comment"># 引入bootstrap</span></span><br><span class="line"><span class="keyword">from</span> flask_bootstrap <span class="keyword">import</span> Bootstrap</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">bootstrap = Bootstrap(app)</span><br><span class="line">app.secret_key = <span class="string">&#x27;secret string&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;h1&gt;Hello Flask!&lt;/h1&gt;&#x27;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/basic&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">basic</span>():</span></span><br><span class="line">    form = LoginForm()</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>, form=form)</span><br></pre></td></tr></table></div></figure><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123;bootstrap_find_resource(&#x27;css/bootstrap.css&#x27;, cdn=&#x27;bootstrap&#x27;)&#125;&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; form.csrf_token &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; form.username.label &#125;&#125; &#123;&#123; form.username(class=&#x27;form-control&#x27;) &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; form.password.label &#125;&#125; &#123;&#123; form.password(class=&#x27;form-control&#x27;) &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-check&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; form.remember(class=&#x27;form-check-input&#x27;) &#125;&#125; &#123;&#123; form.remember.label &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;&#123; form.submit(class=&#x27;btn btn-primary&#x27;) &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;bootstrap_find_resource(&#x27;jquery.js&#x27;, cdn=&#x27;jquery&#x27;)&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;bootstrap_find_resource(&#x27;js/bootstrap.js&#x27;, cdn=&#x27;bootstrap&#x27;)&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ul><li>渲染后获得的实际 HTML 代码如下所示：</li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;csrf_token&quot;</span> <span class="attr">name</span>=<span class="string">&quot;csrf_token&quot;</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Ijc3ZDI5Y...&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 渲染CSRF令牌隐藏字段 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">required</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">required</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;remember&quot;</span> <span class="attr">name</span>=<span class="string">&quot;remember&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;y&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;remember&quot;</span>&gt;</span>Remember me<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Log in&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="处理表单数据"   >          <a href="#处理表单数据" class="heading-link"><i class="fas fa-link"></i></a>处理表单数据</h2>              <h3 id="提交表单"   >          <a href="#提交表单" class="heading-link"><i class="fas fa-link"></i></a>提交表单</h3>      <ul><li>在 HTML 中，当<code>&lt;form&gt;</code>标签声明的表单中类型为<strong>submit</strong>的提交字段被单击时，就会创建一个提交表单的 HTTP 请求，请求中包含表单各个字段的数据。表单的提交行为主要由三个属性控制</li></ul><div class="table-container"><table><thead><tr><th>属性</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>action</td><td>当前 URL，即页面对应的 URL</td><td>表单提交时发送请求的目标 URL</td></tr><tr><td>method</td><td>get</td><td>提交表单的 HTTP 请求方法，get 或者 post</td></tr><tr><td>enctype</td><td>application/x-www-form-urlencoded</td><td>表单数据的编码类型</td></tr></tbody></table></div><ul><li><p>form 标签的 action 属性用来指定表单被提交的目标 URL，默认为当前 URL，也就是渲染该模板的路由所在的 URL。如果要把表单数据发送到其他 URL，可以自定义这个属性值。</p></li><li><p>当使用 GET 方法提交表单数据时，表单的数据会以查询字符串的形式附加在请求的 URL 里，比如：</p></li></ul><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:5000/basic?username=greyli&amp;password=12345</span><br></pre></td></tr></table></div></figure><ul><li>GET 方式仅适用于长度不超过 3000 个字符，且不包含敏感信息的表单。因为这种方式会直接将用户提交的表单数据暴露在 URL 中，容易被攻击者截获，示例中的情况明显是危险的。因此，出于安全的考虑，一般使用 POST 方法提交表单。使用 POST 方法时，按照默认的编码类型，表单数据会被存储在请求主体中，比如：</li></ul><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;basic HTTP&#x2F;1.0</span><br><span class="line">...</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 30</span><br><span class="line"></span><br><span class="line">username&#x3D;greyli&amp;password&#x3D;12345</span><br></pre></td></tr></table></div></figure><ul><li>设置监听 POST 方法</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">basic</span>():</span></span><br><span class="line">    form = LoginForm()</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;basic.html&#x27;</span>, form=form)</span><br></pre></td></tr></table></div></figure>        <h3 id="验证表单数据"   >          <a href="#验证表单数据" class="heading-link"><i class="fas fa-link"></i></a>验证表单数据</h3>              <h4 id="客户端验证和服务器端验证"   >          <a href="#客户端验证和服务器端验证" class="heading-link"><i class="fas fa-link"></i></a>客户端验证和服务器端验证</h4>      <ul><li>客户端验证</li><li>客户端验证（client side validation）是指在客户端（比如 Web 浏览器）对用户的输入值进行验证。客户端方式可以实时动态提示用户输入是否正确，只有用户输入正确后才会将表单数据发送到服务器。客户端验证可以增强用户体验，降低服务器负载。</li><li>服务器端验证</li><li>服务器端验证（server side validation）是指用户把输入的数据提交到服务器端，在服务器端对数据进行验证。如果验证出错，就在返回的响应中加入错误信息。用户修改后再次提交表单，直到通过验证。在 Flask 程序中使用 WTForms 实现的就是服务器端验证。</li></ul>        <h4 id="WTForms-验证机制"   >          <a href="#WTForms-验证机制" class="heading-link"><i class="fas fa-link"></i></a>WTForms 验证机制</h4>      <ul><li>WTForms 验证表单字段的方式是在实例化表单类时传入表单数据，然后对表单实例调用<strong>validate()**方法。这会逐个对字段调用字段实例化时定义的验证器，返回表示验证结果的布尔值。如果验证失败，就把错误消息存储到表单实例的</strong>errors**属性对应的字典中，验证的过程如下所示：</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> wtforms <span class="keyword">import</span> Form, StringField, PasswordField, BooleanField</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> DataRequired, Length</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">LoginForm</span>(<span class="params">Form</span>):</span></span><br><span class="line"><span class="meta">... </span>    username = StringField(<span class="string">&#x27;Username&#x27;</span>, validators=[DataRequired()])</span><br><span class="line"><span class="meta">... </span>    password = PasswordField(<span class="string">&#x27;Password&#x27;</span>, validators=[DataRequired(), Length(<span class="number">8</span>, <span class="number">128</span>)])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>form = LoginForm(username=<span class="string">&#x27;&#x27;</span>, password=<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>form.data  <span class="comment"># 表单数据字典</span></span><br><span class="line">&#123;<span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;123&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>form.validate()</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>form.errors  <span class="comment"># 错误消息字典</span></span><br><span class="line">&#123;<span class="string">&#x27;username&#x27;</span>: [<span class="string">u&#x27;This field is required.&#x27;</span>], <span class="string">&#x27;password&#x27;</span>: [<span class="string">u&#x27;Field must be at least 6 characters long.&#x27;</span>]&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>form2 = LoginForm(username=<span class="string">&#x27;greyli&#x27;</span>, password=<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>form2.data</span><br><span class="line">&#123;<span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;greyli&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>form2.validate()</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>form2.errors</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="在视图函数中验证表单"   >          <a href="#在视图函数中验证表单" class="heading-link"><i class="fas fa-link"></i></a>在视图函数中验证表单</h4>      <ul><li><p>因为现在的 basic_form 视图同时接收两种类型的请求：GET 请求和 POST 请求。所以要根据请求方法的不同执行不同的代码。</p></li><li><p>具体来说：首先是实例化表单，如果是 GET 请求，那么就渲染模板；如果是 POST 请求，就调用 validate()方法验证表单数据。</p></li><li><p>请求的 HTTP 方法可以通过<strong>request.method</strong>属性获取，可以使用下面的方式来组织视图函数：</p></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/basic&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">basic</span>():</span></span><br><span class="line">    form = LoginForm()  <span class="comment"># GET + POST</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span> <span class="keyword">and</span> form.validate():</span><br><span class="line">        <span class="comment"># ...  # 处理POST请求</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;forms/basic.html&#x27;</span>, form=form)  <span class="comment"># 处理GET请求</span></span><br></pre></td></tr></table></div></figure><ul><li>Flask-WTF 提供的**validate_on_submit()**方法合并了这两个操作，因此上面的代码可以简化为：</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/basic&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">basic</span>():</span></span><br><span class="line">    form = LoginForm()</span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;basic.html&#x27;</span>, form=form)</span><br></pre></td></tr></table></div></figure><blockquote><p>除了 POST 方法，如果请求的方法是 PUT、PATCH 和 DELETE 方法，**form.validate_on_submit()**也会验证表单数据。</p></blockquote>        <h4 id="表单验证与获取数据"   >          <a href="#表单验证与获取数据" class="heading-link"><i class="fas fa-link"></i></a>表单验证与获取数据</h4>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, redirect, url_for, flash</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/basic&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">basic</span>():</span></span><br><span class="line">    form = LoginForm()</span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">        username = form.username.data</span><br><span class="line">        flash(<span class="string">&#x27;Welcome home, %s!&#x27;</span> % username)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;basic.html&#x27;</span>, form=form)</span><br></pre></td></tr></table></div></figure><ul><li><p>表单类的 data 属性是一个匹配所有字段与对应数据的字典，我们一般直接通过<strong>“form.字段属性名.data”</strong>的形式来获取对应字段的数据。</p></li><li><p>在这个 if 语句内，如果不使用重定向的话，当 if 语句执行完毕后会继续执行最后的**render_template()**函数渲染模板，最后像往常一样返回一个常规的 200 响应，但这会造成一个问题：</p><ul><li>在浏览器中，当单击 F5 刷新/重载时的默认行为是发送上一个请求。如果上一个请求是 POST 请求，那么就会弹出一个确认窗口，询问用户是否再次提交表单。为了避免出现这个容易让人产生困惑的提示，尽量不要让提交表单的 POST 请求作为最后一个请求。这就是为什么在处理表单后返回一个重定向响应，这会让浏览器重新发送一个新的 GET 请求到重定向的目标 URL。最终，最后一个请求就变成了 GET 请求。这种用来防止重复提交表单的技术称为 PRG（Post/Redirect/Get）模式，即通过对提交表单的 POST 请求返回重定向响应将最后一个请求转换为 GET 请求。</li></ul></li></ul>        <h3 id="在模板中渲染错误消息"   >          <a href="#在模板中渲染错误消息" class="heading-link"><i class="fas fa-link"></i></a>在模板中渲染错误消息</h3>      <ul><li><p>如果<strong>form.validate_on_submit()**返回 False，那么说明验证没有通过。对于验证未通过的字段，WTForms 会把错误消息添加到表单类的</strong>errors<strong>属性中，这是一个匹配作为表单字段的类属性到对应的错误消息列表的字典。一般会直接通过字段名来获取对应字段的错误消息列表，即</strong>form.字段名.errors<strong>。比如，</strong>form.name.errors**返回 name 字段的错误消息列表。</p></li><li><p>像渲染 flash()消息一样，可以在模板里使用 for 循环迭代错误消息列表</p></li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; form.csrf_token &#125;&#125; &#123;&#123; form.username.label &#125;&#125;<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    &#123;&#123; form.username() &#125;&#125;<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    &#123;% for message in form.username.errors %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">small</span> <span class="attr">class</span>=<span class="string">&quot;error&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    &#123;% endfor %&#125; &#123;&#123; form.password.label &#125;&#125;<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    &#123;&#123; form.password &#125;&#125;<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    &#123;% for message in form.password.errors %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">small</span> <span class="attr">class</span>=<span class="string">&quot;error&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    &#123;% endfor %&#125; &#123;&#123; form.remember &#125;&#125;&#123;&#123; form.remember.label &#125;&#125;<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    &#123;&#123; form.submit &#125;&#125;<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="表单进阶实践"   >          <a href="#表单进阶实践" class="heading-link"><i class="fas fa-link"></i></a>表单进阶实践</h2>              <h3 id="设置错误消息语言"   >          <a href="#设置错误消息语言" class="heading-link"><i class="fas fa-link"></i></a>设置错误消息语言</h3>      <ul><li>设置内置错误消息语言为中文</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> FlaskForm</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;WTF_I18N_ENABLED&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyBaseForm</span>(<span class="params">FlaskForm</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        location = [<span class="string">&#x27;zh&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloForm</span>(<span class="params">MyBaseForm</span>):</span></span><br><span class="line">    name = StringField(<span class="string">&#x27;Name&#x27;</span>, validators=[DataRequired()])</span><br><span class="line">    submit = SubmitField()</span><br></pre></td></tr></table></div></figure><ul><li>首先，需要将配置变量<strong>WTF_I18N_ENABLED</strong>设为 False，这会让 Flask-WTF 使用 WTForms 内置的错误消息翻译。然后需要在自定义基类中定义 Meta 类，并在 locales 列表中加入简体中文的地区字符串。在创建表单时，继承这个 MyBaseForm 即可将错误消息语言设为中文，比如上面定义的 HelloForm。</li></ul>        <h3 id="使用宏渲染表单"   >          <a href="#使用宏渲染表单" class="heading-link"><i class="fas fa-link"></i></a>使用宏渲染表单</h3>      <ul><li>表单渲染宏</li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% macro form_field(field) %&#125; &#123;&#123; field.label &#125;&#125;<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">&#123;&#123; field(**kwargs) &#125;&#125;<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">&#123;% if field.errors %&#125; &#123;% for error in field.errors %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">small</span> <span class="attr">class</span>=<span class="string">&quot;error&quot;</span>&gt;</span>&#123;&#123; error &#125;&#125;<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">&#123;% endfor %&#125; &#123;% endif %&#125; &#123;% endmacro %&#125;</span><br></pre></td></tr></table></div></figure><ul><li>这个 form_field()宏接收表单类实例的字段属性和附加的关键字参数作为输入，返回包含<code>&lt;label&gt;</code>标签、表单字段、错误消息列表的 HTML 表单字段代码。使用这个宏渲染表单的示例如下所示：</li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% from &#x27;macros.html&#x27; import form_field %&#125; ...</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; form.csrf_token &#125;&#125; &#123;&#123; form_field(form.username)&#125;&#125;<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    &#123;&#123; form_field(form.password) &#125;&#125;<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ul><li>在上面的代码中，调用 form_field()宏逐个渲染表单中的字段，只要把每一个类属性传入 form_field()宏，即可完成渲染。</li></ul>        <h3 id="自定义验证器"   >          <a href="#自定义验证器" class="heading-link"><i class="fas fa-link"></i></a>自定义验证器</h3>              <h4 id="行内验证器"   >          <a href="#行内验证器" class="heading-link"><i class="fas fa-link"></i></a>行内验证器</h4>      <ul><li>除了使用 WTForms 提供的验证器来验证表单字段，还可以在表单类中定义方法来验证特定字段</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 针对特定字段的验证器</span></span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> IntegerField, SubmitField</span><br><span class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> ValidationError</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FortyTwoForm</span>(<span class="params">FlaskForm</span>):</span></span><br><span class="line">    answer = IntegerField(<span class="string">&#x27;The Number&#x27;</span>)</span><br><span class="line">    submit = SubmitField()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_answer</span>(<span class="params">form, field</span>):</span></span><br><span class="line">        <span class="keyword">if</span> field.data != <span class="number">42</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">&#x27;Must be 42.&#x27;</span>)</span><br></pre></td></tr></table></div></figure><ul><li>当表单类中包含以“validate_字段属性名”形式命名的方法时，在验证字段数据时会同时调用这个方法来验证对应的字段，这也是为什么表单类的字段属性名不能以 validate 开头。验证方法接收两个位置参数，依次为 form 和 field，前者为表单类实例，后者是字段对象，可以通过 field.data 获取字段数据，这两个参数将在验证表单时被调用传入。验证出错时抛出从<strong>wtforms.validators</strong>模块导入的<strong>ValidationError</strong>异常，传入错误消息作为参数。因为这种方法仅用来验证特定的表单类字段，所以又称为行内验证器（in-line validator）。</li></ul>        <h4 id="全局验证器"   >          <a href="#全局验证器" class="heading-link"><i class="fas fa-link"></i></a>全局验证器</h4>      <ul><li>如果想要创建一个可重用的通用验证器，可以通过定义一个函数实现。如果不需要传入参数定义验证器，那么一个和表单类中定义的验证方法完全相同的函数就足够了</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局验证器示例</span></span><br><span class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> ValidationError</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_42</span>(<span class="params">form, field</span>):</span></span><br><span class="line">    <span class="keyword">if</span> field.data != <span class="number">42</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValidationError(<span class="string">&#x27;Must be 42&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FortyTwoForm</span>(<span class="params">FlaskForm</span>):</span></span><br><span class="line">    answer = IntegerField(<span class="string">&#x27;The Number&#x27;</span>, validators=[is_42])</span><br><span class="line">    submit = SubmitField()</span><br></pre></td></tr></table></div></figure><ul><li><p>当使用函数定义全局的验证器时，需要在定义字段时在 validators 列表里传入这个验证器。因为在 validators 列表中传入的验证器必须是可调用对象，所以这里传入了函数对象，而不是函数调用。</p></li><li><p>这仅仅是一个简单的示例，在现实中，通常需要让验证器支持传入参数来对验证过程进行设置。至少，应该支持 message 参数来设置自定义错误消息。这时验证函数应该实现成工厂函数，即返回一个可调用对象的函数</p></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 工厂函数形式的全局验证器示例</span></span><br><span class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> ValidationError</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_42</span>(<span class="params">message=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> message <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        message = <span class="string">&#x27;Must be 42.&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_is_42</span>(<span class="params">form, field</span>):</span></span><br><span class="line">        <span class="keyword">if</span> field.data != <span class="number">42</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(message)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _is_42</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FortyTwoForm</span>(<span class="params">FlaskForm</span>):</span></span><br><span class="line">    answer = IntegerField(<span class="string">&#x27;The Number&#x27;</span>, validators=[is_42()])</span><br><span class="line">    submit = SubmitField()</span><br></pre></td></tr></table></div></figure><ul><li>在现在的 is_42()函数中，创建了另一个_is_42()函数，这个函数会被作为可调用对象返回。is_42()函数接收的 message 参数用来传入自定义错误消息，默认为 None，如果没有设置就使用内置消息。在 validators 列表中，这时需要传入的是对工厂函数 is_42()的调用。</li></ul>        <h3 id="文件上传"   >          <a href="#文件上传" class="heading-link"><i class="fas fa-link"></i></a>文件上传</h3>      <ul><li>在 HTML 中，渲染一个文件上传字段只需要将<code>&lt;input&gt;</code>标签的 type 属性设为 file，即<code>&lt;input type=&quot;file&quot;&gt;</code>。这会在浏览器中渲染成一个文件上传字段，单击文件选择按钮会打开文件选择窗口，选择对应的文件后，被选择的文件名会显示在文件选择按钮旁边。</li></ul>        <h4 id="定义上传表单"   >          <a href="#定义上传表单" class="heading-link"><i class="fas fa-link"></i></a>定义上传表单</h4>      <ul><li>在 Python 表单类中创建文件上传字段时，使用扩展 Flask-WTF 提供的 FileField 类，它继承 WTForms 提供的上传字段 FileField，添加了对 Flask 的集成。</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建上传表单</span></span><br><span class="line"><span class="keyword">from</span> flask wtf.file <span class="keyword">import</span> FileField, FileRequired, FileAllowed</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UploadForm</span>(<span class="params">FlaskForm</span>):</span></span><br><span class="line">    photo = FileField(<span class="string">&#x27;Upload Image&#x27;</span>, validators=[FileRequired(), FileAllowed([<span class="string">&#x27;jpg&#x27;</span>, <span class="string">&#x27;jpeg&#x27;</span>, <span class="string">&#x27;png&#x27;</span>, <span class="string">&#x27;gif&#x27;</span>])])</span><br><span class="line">    submit = SubmitField()</span><br></pre></td></tr></table></div></figure><ul><li>为了便于测试，创建一个用来上传图片的 photo 字段。和其他字段类似，也需要对文件上传字段进行验证。Flask-WTF 在<strong>flask_wtf.file</strong>模块下提供了两个文件相关的验证器</li></ul><div class="table-container"><table><thead><tr><th>验证器</th><th>说明</th></tr></thead><tbody><tr><td>FileRequired(message=None)</td><td>验证是否包含文件对象</td></tr><tr><td>FileAllowed(upload_set, message=None)</td><td>用来验证文件类型，upload_set 参数用来传入包含允许的文件后缀名列表</td></tr></tbody></table></div><ul><li><p>使用<strong>FileRequired</strong>确保提交的表单字段中包含文件数据。出于安全考虑，必须对上传的文件类型进行限制。如果用户可以上传 HTML 文件，而且同时提供了视图函数获取上传后的文件，那么很容易导致 XSS 攻击。使用 FileAllowed 设置允许的文件类型，传入一个包含允许文件类型的后缀名列表。</p></li><li><p>Flask-WTF 提供的 FileAllowed 是在服务器端验证上传文件，使用 HTML5 中的 accept 属性也可以在客户端实现简单的类型过滤。这个属性接收 MIME 类型字符串或文件格式后缀，多个值之间使用逗号分隔，比如：</p></li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;profile_pic&quot;</span> <span class="attr">name</span>=<span class="string">&quot;profile_pic&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;.jpg, .jpeg, .png, .gif&quot;</span> /&gt;</span></span><br></pre></td></tr></table></div></figure><ul><li><p>当用户单击文件选择按钮后，打开的文件选择窗口会默认将 accept 属性值之外的文件过滤掉。尽管如此，用户还是可以选择设定之外的文件，所以仍然需要进行服务器端验证。</p></li><li><p>除了验证文件的类型，通常还需要对文件大小进行验证，通过设置 Flask 内置的配置变量<strong>MAX_CONTENT_LENGTH</strong>，可以限制请求报文的最大长度，单位为字节（byte）。</p></li><li><p>比如，下面将最大长度限制为 3M：</p></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.config[<span class="string">&#x27;MAX_CONTENT_LENGTH&#x27;</span>] = <span class="number">3</span> * <span class="number">1024</span> * <span class="number">1024</span></span><br></pre></td></tr></table></div></figure>        <h4 id="渲染上传表单"   >          <a href="#渲染上传表单" class="heading-link"><i class="fas fa-link"></i></a>渲染上传表单</h4>      <ul><li>在新创建的 upload 视图里，实例化表单类 UploadForm，然后传入模板：</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload</span>():</span></span><br><span class="line">    form = UploadForm()</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;upload.html&#x27;</span>, form=form)</span><br></pre></td></tr></table></div></figure><ul><li>在模板中渲染上传表单</li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; form.csrf_token &#125;&#125; &#123;&#123; form_field(form.photo) &#125;&#125; &#123;&#123; form.submit &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ul><li>唯一需要注意的是，当表单中包含文件上传字段时（即 type 属性为 file 的 input 标签），需要将表单的 enctype 属性设为**”multipart/form-data”**，这会告诉浏览器将上传数据发送到服务器，否则仅会把文件名作为表单数据提交。</li></ul>        <h4 id="处理上传文件"   >          <a href="#处理上传文件" class="heading-link"><i class="fas fa-link"></i></a>处理上传文件</h4>      <ul><li>单提交后，上传的文件需要在请求对象的 files 属性（<strong>request.files</strong>）中获取，这个属性是 Werkzeug 提供的<strong>ImmutableMultiDict</strong>字典对象，存储字段的 name 键值和文件对象的映射，比如：</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ImmutableMultiDict([(<span class="string">&#x27;photo&#x27;</span>, &lt;FileStorage: <span class="string">u&#x27;0f913b0ff95.JPG&#x27;</span> (<span class="string">&#x27;image/jpeg&#x27;</span>)&gt;)])</span><br></pre></td></tr></table></div></figure><ul><li>上传的文件会被 Flask 解析为 Werkzeug 中的<strong>FileStorage 对象</strong>（werkzeug.datastructures.FileStorage）。当手动处理时，需要使用文件上传字段的<strong>name 属性值</strong>作为键获取对应的文件对象。比如：</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.files.get(<span class="string">&#x27;photo&#x27;</span>)</span><br></pre></td></tr></table></div></figure><ul><li>当使用 Flask-WTF 时，它会自动获取对应的文件对象，这里仍然使用表单类属性的 data 属性获取上传文件。</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 处理上传文件</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_PATH&#x27;</span>] = os.path.join(app.root_path, <span class="string">&#x27;uploads&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload</span>():</span></span><br><span class="line">    form = UploadForm()</span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">        f = form.photo.data</span><br><span class="line">        filename = random_filename(f.filename)</span><br><span class="line">        f.save(os.path.join(app.config[<span class="string">&#x27;UPLOAD_PATH&#x27;</span>], filename))</span><br><span class="line">        flash(<span class="string">&#x27;Upload success.&#x27;</span>)</span><br><span class="line">        session[<span class="string">&#x27;filenames&#x27;</span>] = [filename]</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;show_images&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;upload.html&#x27;</span>, form=form)</span><br></pre></td></tr></table></div></figure><ul><li><p>当表单通过验证后，我们通过<strong>form.photo.data</strong>获取存储上传文件的 FileStorage 对象。接下来，需要处理文件名，通常有三种处理方式：</p></li><li><p>使用原文件名</p><ul><li>如果能够确定文件的来源安全，可以直接使用原文件名，通过 FileStorage 对象的<strong>filename 属性</strong>获取：</li></ul></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filename = f.filename</span><br></pre></td></tr></table></div></figure><ul><li>使用过滤后的文件名<ul><li>如果要支持用户上传文件，必须对文件名进行处理，因为攻击者可能会在文件名中加入恶意路径。</li><li>比如，如果恶意用户在文件名中加入表示上级目录的..（比如../../../../home/username/.bashrc 或../../../etc/passwd），那么当我们保存文件时，如果这里表示上级目录的..数量正确，就会导致服务器上的系统文件被覆盖或篡改，还有可能执行恶意脚本。可以使用 Werkzeug 提供的**secure_filename()**函数对文件名进行过滤，传递文件名作为参数，它会过滤掉所有危险字符，返回”安全的文件名“，如下所示：</li></ul></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> werkzeug <span class="keyword">import</span> secure_filename</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>secure_filename(<span class="string">&#x27;avatar!@#//#\\%$^&amp;.jpg&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;avatar.jpg&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>secure_filename(<span class="string">&#x27;avatar头像.jpg&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;avatar.jpg&#x27;</span></span><br></pre></td></tr></table></div></figure><ul><li>统一重命名<ul><li>**secure_filename()**函数非常方便，它会过滤掉文件名中的非 ASCII 字符。但如果文件名完全由非 ASCII 字符组成，那么会得到一个空文件名：</li></ul></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>secure_filename(<span class="string">&#x27;头像.jpg&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;jpg&#x27;</span></span><br></pre></td></tr></table></div></figure><ul><li>为了避免出现这种情况，更好的做法是使用统一的处理方式对所有上传的文件重新命名。随机文件名有很多种方式可以生成，下面是一个使用 Python 内置的<strong>uuid 模块</strong>生成随机文件名的 random_filename()函数：</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_filename</span>(<span class="params">filename</span>):</span></span><br><span class="line">    ext = os.path.splitext(filename)[<span class="number">1</span>]</span><br><span class="line">    new_filename = uuid.uuid4().<span class="built_in">hex</span> + ext</span><br><span class="line">    <span class="keyword">return</span> new_filename</span><br></pre></td></tr></table></div></figure><ul><li>这个函数接收原文件名作为参数，使用内置的<strong>uuid</strong>模块中的<strong>uuid4()**方法生成新的文件名，并使用</strong>hex 属性**获取十六进制字符串，最后返回包含后缀的新文件名。</li></ul><blockquote><p>UUID（Universally Unique Identifier，通用唯一识别码）是用来标识信息的 128 位数字，比如用作数据库表的主键。使用标准方法生成的 UUID 出现重复的可能性接近 0。在 UUID 的标准中，UUID 分为 5 个版本，每个版本使用不同的生成方法并且适用于不同的场景。使用的 uuid4()方法对应的是第 4 个版本：不接收参数而生成随机 UUID。</p></blockquote><ul><li>在 upload 视图中，调用这个函数来获取随机文件名，传入原文件名作为参数：</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filename = random_filename(f.filename)</span><br></pre></td></tr></table></div></figure><ul><li>处理完文件名后，是时候将文件保存到文件系统中了。在 form 目录下创建了一个 uploads 文件夹，用于保存上传后的文件。指向这个文件夹的绝对路径存储在自定义配置变量<strong>UPLOAD_PATH</strong>中：</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.config[<span class="string">&#x27;UPLOAD_PATH&#x27;</span>] = os.path.join(app.root_path, <span class="string">&#x27;uploads&#x27;</span>)</span><br></pre></td></tr></table></div></figure><ul><li>这里的路径通过 app.root_path 属性构造，它存储了程序实例所在脚本的绝对路径，相当于<code>os.path.abspath(os.path.dirname(__file__))</code>。为了保存文件，需要提前手动创建这个文件夹。</li></ul><p>​ 对<strong>FileStorage</strong>对象调用**save()**方法即可保存，传入包含目标文件夹绝对路径和文件名在内的完整保存路径：</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f.save(os.path.join(app.config[<span class="string">&#x27;UPLOAD_PATH&#x27;</span>], filename))</span><br></pre></td></tr></table></div></figure><ul><li>文件保存后，希望能够显示上传后的图片。为了让上传后的文件能够通过 URL 获取，还需要创建一个视图函数来返回上传后的文件，如下所示：</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/uploads/&lt;path:filename&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_file</span>(<span class="params">filename</span>):</span></span><br><span class="line">    <span class="keyword">return</span> send_from_directory(app.config[<span class="string">&#x27;UPLOAD_PATH&#x27;</span>], filename)</span><br></pre></td></tr></table></div></figure><ul><li>这个视图的作用与 Flask 内置的 static 视图类似，通过传入的文件路径返回对应的静态文件。在这个 uploads 视图中，使用 Flask 提供的**send_from_directory()**函数来获取文件，传入文件的路径和文件名作为参数。</li></ul><blockquote><p>在 get_file 视图的 URL 规则中，filename 变量使用了 path 转换器以支持传入包含斜线的路径字符串。</p></blockquote><ul><li>在 upload 视图里保存文件后，使用 flash()发送一个提示，将文件名保存到 session 中，最后重定向到 show_images 视图。show_images 视图返回的 uploaded.html 模板中将从 session 获取文件名，渲染出上传后的图片。</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flash(<span class="string">&#x27;Upload success.&#x27;</span>)</span><br><span class="line">session[<span class="string">&#x27;filenames&#x27;</span>] = [filename]</span><br><span class="line"><span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;show_images&#x27;</span>))</span><br></pre></td></tr></table></div></figure><blockquote><p>这里将 filename 作为列表传入 session 只是为了兼容下面的多文件上传示例，这两个视图使用同一个模板，使用 session 可以在模板中统一从 session 获取文件名列表。</p></blockquote><ul><li>在 uploaded.html 模板里，将传入的文件名作为 URL 变量，通过上面的 get_file 视图获取文件 URL，作为<code>&lt;img&gt;</code>标签的 src 属性值，如下所示：</li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;get_file&#x27;, filename=filename) &#125;&#125;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></div></figure>        <h4 id="多文件上传"   >          <a href="#多文件上传" class="heading-link"><i class="fas fa-link"></i></a>多文件上传</h4>      <ul><li>因为 Flask-WTF 当前版本（0.14.2）中并未添加对多文件上传的渲染和验证支持，因此需要在视图函数中手动获取文件并进行验证。</li><li>在客户端，通过在文件上传字段（type=file）加入 multiple 属性，就可以开启多选：</li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">multiple</span> /&gt;</span></span><br></pre></td></tr></table></div></figure><ul><li>创建表单类时，可以直接使用 WTForms 提供的<strong>MultipleFileField</strong>字段实现，添加一个 DataRequired 验证器来确保包含文件：</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> MultipleFileField</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultiUploadForm</span>(<span class="params">FlaskForm</span>):</span></span><br><span class="line">    photo = MultipleFileField(<span class="string">&#x27;Upload Image&#x27;</span>, validators=&#123;DataRequired()&#125;)</span><br><span class="line">    submit = SubmitField()</span><br></pre></td></tr></table></div></figure><ul><li>表单提交时，在服务器端的程序中，对 request.files 属性调用**getlist()**方法并传入字段的 name 属性值会返回包含所有上传文件对象的列表。在 multi_upload 视图中，迭代这个列表，然后逐一对文件进行处理</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 处理多文件上传</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request, session, flash, redirect, url_for</span><br><span class="line"><span class="keyword">from</span> flask_wtf.csrf <span class="keyword">import</span> validate_csrf</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> ValidationError</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/multi-upload&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multi_upload</span>():</span></span><br><span class="line">    form = MultiUploadForm()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        filenames = []</span><br><span class="line">        <span class="comment"># 验证CSRF令牌</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            validate_csrf(form.csrf_token.data)</span><br><span class="line">        <span class="keyword">except</span> ValidationError:</span><br><span class="line">            flash(<span class="string">&#x27;CSRF token error.&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;multi_upload&#x27;</span>))</span><br><span class="line">        <span class="comment"># 检查文件是否存在</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;photo&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">            flash(<span class="string">&#x27;This field is required.&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;multi_upload&#x27;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> request.files.getlist(<span class="string">&#x27;photo&#x27;</span>):</span><br><span class="line">            <span class="comment"># 检查文件类型</span></span><br><span class="line">            <span class="keyword">if</span> f <span class="keyword">and</span> allowed_file(f.filename):</span><br><span class="line">                filename = random_filename(f.filename)</span><br><span class="line">                f.save(os.path.join(app.config[<span class="string">&#x27;UPLOAD_PATH&#x27;</span>], filename))</span><br><span class="line">                filenames.append(filename)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                flash(<span class="string">&#x27;Invalid file type.&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;multi_upload&#x27;</span>))</span><br><span class="line">        flash(<span class="string">&#x27;Upload success.&#x27;</span>)</span><br><span class="line">        session[<span class="string">&#x27;filenames&#x27;</span>] = filenames</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;show_images&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;upload.html&#x27;</span>, form=form)</span><br></pre></td></tr></table></div></figure><ul><li>在请求方法为 POST 时，对上传数据进行手动验证，主要包含下面几步：<ul><li>手动调用 flask_wtf.csrf.validate_csrf 验证 CSRF 令牌，传入表单中 csrf_token 隐藏字段的值。如果抛出 wtforms.ValidationError 异常则表明验证未通过。</li><li>其中 if’photo’not in request.files 用来确保字段中包含文件数据（相当于 FileRequired 验证器），如果用户没有选择文件就提交表单则 request.files 将为空。</li><li>if f 用来确保文件对象存在，这里也可以检查 f 是否是 FileStorage 实例。</li><li>allowed_file(f.filename)调用了 allowed_file()函数，传入文件名。这个函数相当于 FileAllowed 验证器，用来验证文件类型，返回布尔值，如下。</li></ul></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 验证文件类型</span></span><br><span class="line">app.config[<span class="string">&#x27;ALLOWED_EXTENSIONS&#x27;</span>] = [<span class="string">&#x27;png&#x27;</span>, <span class="string">&#x27;jpg&#x27;</span>, <span class="string">&#x27;jpeg&#x27;</span>, <span class="string">&#x27;gif&#x27;</span>]</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">allowed_file</span>(<span class="params">filename</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">in</span> filename <span class="keyword">and</span> \</span><br><span class="line">        filename.rsplit(<span class="string">&#x27;.&#x27;</span>, <span class="number">1</span>)[<span class="number">1</span>].lower() <span class="keyword">in</span> app.config[<span class="string">&#x27;ALLOWED_EXTENSIONS&#x27;</span>]</span><br></pre></td></tr></table></div></figure><ul><li>在上面的几个验证语句里，如果没有通过验证，使用 flash()函数显示错误消息，然后重定向到 multi_upload 视图。</li><li>为了方便测试，还创建了一个临时的 filenames 列表，保存上传后的文件名到 session 中。打开多文件上传示例，单击按钮后可以选择多个文件，当上传的文件通过验证时，程序会重定向到 show_images 视图，这个视图返回的 uploaded.html 模板中将从 session 获取所有文件名，渲染出所有上传后的图片。</li></ul><blockquote><p>在新版本的 Flask-WTF 发布后，就可以使用和单文件上传相同的方式处理表单。</p><p>比如，可以使用 Flask-WTF 提供的<strong>MultipleFileField</strong>来创建提供 Flask 支持的多文件上传字段，使用相应的验证器对文件进行验证。</p><p>在视图函数中，则可以继续使用<strong>form.validate_on_submit()**来验证表单，并通过</strong>form.photo.data**来获取字段的数据——包含所有上传文件对象（werkzeug.datastructures.FileStorage）的列表。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python3 </tag>
            
            <tag> Flask学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask学习03-模板</title>
      <link href="/2019/07/18/Flask%E5%AD%A6%E4%B9%A003-%E6%A8%A1%E6%9D%BF/"/>
      <url>/2019/07/18/Flask%E5%AD%A6%E4%B9%A003-%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[        <h2 id="模板基本用法"   >          <a href="#模板基本用法" class="heading-link"><i class="fas fa-link"></i></a>模板基本用法</h2>              <h3 id="创建模板"   >          <a href="#创建模板" class="heading-link"><i class="fas fa-link"></i></a>创建模板</h3>      <ul><li><p>语句</p><p>比如 if 判断、 for 循环等：</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% ... %&#125;</span><br></pre></td></tr></table></div></figure></li></ul><span id="more"></span><ul><li><p>表达式</p><p>比如字符串、变量、函数调用等：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; ... &#125;&#125;</span><br></pre></td></tr></table></div></figure></li><li><p>注释</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;# ... #&#125;</span><br></pre></td></tr></table></div></figure></li><li><p>Jinja2 支持使用**”.”<strong>获取变量的属性，比如 user 字典中的 username 键值通过</strong>“.”<strong>获取，即</strong>user.username<strong>，在效果上等同于</strong>user[‘username’]** 。</p></li></ul>        <h3 id="模板语法"   >          <a href="#模板语法" class="heading-link"><i class="fas fa-link"></i></a>模板语法</h3>      <ul><li><p>Jinja2 允许在模板中使用大部分 Python 对象，比如字符串、列表、字典、元组、整型、浮点型、布尔值。它支持基本的运算符号（+、-、*、/等）、比较符号（比如==、！=等）、逻辑符号（and、or、not 和括号）以及 in、is、None 和布尔值（True、False）。</p></li><li><p>Jinja2 提供了多种控制结构来控制模板的输出，其中<strong>for</strong>和<strong>if</strong>是最常用的两种。在 Jinja2 里，语句使用<code>{% ... %}</code>标识，需要注意的是，在语句结束的地方，必须添加结束标签：</p></li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if user.bio %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>&#123;&#123; user.bio &#125;&#125;<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>This user has not provided a bio.<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for movie in movies %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; movie.name &#125;&#125; - &#123;&#123; movie.year &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ul><li>常用的 Jinja2 for 循环特殊变量</li></ul><div class="table-container"><table><thead><tr><th align="center">变量名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">loop.index</td><td align="center">从 1 迭代</td></tr><tr><td align="center">loop.index0</td><td align="center">从 0 迭代</td></tr><tr><td align="center">loop.reindex</td><td align="center">从 1 反向迭代</td></tr><tr><td align="center">loop.reindex0</td><td align="center">从 0 反向迭代</td></tr><tr><td align="center">loop.first</td><td align="center">如果是第一个元素，则为 True</td></tr><tr><td align="center">loop.last</td><td align="center">如果是最后一个元素，则为 True</td></tr><tr><td align="center">loop.previtem</td><td align="center">上一个迭代的条目</td></tr><tr><td align="center">loop.nextitem</td><td align="center">下一个迭代的条目</td></tr><tr><td align="center">loop.length</td><td align="center">序列包含的元素的数量</td></tr></tbody></table></div>        <h3 id="渲染模板"   >          <a href="#渲染模板" class="heading-link"><i class="fas fa-link"></i></a>渲染模板</h3>      <figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--watchlist.html--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;&#123; user.username &#125;&#125;&#x27;s Watchlist<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;index&#x27;) &#125;&#125;&quot;</span>&gt;</span><span class="symbol">&amp;larr;</span> Return<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; user.username &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        &#123;% if user.bio %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span>&gt;</span>&#123;&#123; user.bio &#125;&#125;<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span>&gt;</span>This user has not provided a bio.<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        &#123;% endif %&#125; &#123;# 下面是电影清单（这是注释） #&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">h5</span>&gt;</span>&#123;&#123; user.username &#125;&#125;&#x27;s Watchlist (&#123;&#123; movies|length &#125;&#125;):<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            &#123;% for movie in movies %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; movie.name &#125;&#125; - &#123;&#123; movie.year &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></div></figure><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app.py</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">user = &#123;</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;Grey Li&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;bio&#x27;</span>: <span class="string">&#x27;A boy who loves movies and music.&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">movies = [</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;My Neighbor Totoro&#x27;</span>, <span class="string">&#x27;year&#x27;</span>: <span class="string">&#x27;1988&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Three Colours trilogy&#x27;</span>, <span class="string">&#x27;year&#x27;</span>: <span class="string">&#x27;1993&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Forrest Gump&#x27;</span>, <span class="string">&#x27;year&#x27;</span>: <span class="string">&#x27;1994&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Perfect Blue&#x27;</span>, <span class="string">&#x27;year&#x27;</span>: <span class="string">&#x27;1997&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;The Matrix&#x27;</span>, <span class="string">&#x27;year&#x27;</span>: <span class="string">&#x27;1999&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Memento&#x27;</span>, <span class="string">&#x27;year&#x27;</span>: <span class="string">&#x27;2000&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;The Bucket list&#x27;</span>, <span class="string">&#x27;year&#x27;</span>: <span class="string">&#x27;2007&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Black Swan&#x27;</span>, <span class="string">&#x27;year&#x27;</span>: <span class="string">&#x27;2010&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Gone Girl&#x27;</span>, <span class="string">&#x27;year&#x27;</span>: <span class="string">&#x27;2014&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;CoCo&#x27;</span>, <span class="string">&#x27;year&#x27;</span>: <span class="string">&#x27;2017&#x27;</span>&#125;,</span><br><span class="line">]</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/watchlist&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">watchlist</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;watchlist.html&#x27;</span>, user=user, movies=movies)</span><br></pre></td></tr></table></div></figure><ul><li>在<strong>render_template()**函数中，首先传入模板的文件名作为参数。Flask 会在程序根目录下的</strong>templates<strong>文件夹里寻找模板文件，所以这里传入的文件路径是相对于</strong>templates**根目录的。以关键字参数的形式传入了模板中使用的变量值，以 user 为例：左边的 user 表示传入模板的变量名称，右边的 user 则是要传入的对象。</li></ul><blockquote><p>除了<strong>render_template()**函数，Flask 还提供了一个</strong>render_template_string()**函数用来渲染模板字符串。</p></blockquote><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是列表my_list的第一个元素：&#123;&#123; my_list[0] &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是元组my_tuple的第一个元素：&#123;&#123; my_tuple[0] &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是字典my_dict的键为name的值：&#123;&#123; my_dict[&#x27;name&#x27;] &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是函数my_func的返回值：&#123;&#123; my_func() &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是对象my_object调用某方法的返回值：&#123;&#123; my_object.name() &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ul><li>如果想传入函数在模板中调用，那么需要传入函数对象本身，而不是函数调用（函数的返回值），所以仅写出函数名称即可。当把函数传入模板后，可以像在 Python 脚本中一样通过添加括号的方式调用，而且也可以在括号中传入参数。</li></ul>        <h2 id="模板辅助工具"   >          <a href="#模板辅助工具" class="heading-link"><i class="fas fa-link"></i></a>模板辅助工具</h2>              <h3 id="上下文"   >          <a href="#上下文" class="heading-link"><i class="fas fa-link"></i></a>上下文</h3>      <ul><li>除了渲染时传入变量，也可以在模板中定义变量，使用 set 标签：</li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% set navigation = [(&#x27;/&#x27;, &#x27;Home&#x27;), (&#x27;/about&#x27;, &#x27;About&#x27;)] %&#125;</span><br></pre></td></tr></table></div></figure><ul><li>也可以将一部分模板数据定义为变量，使用<strong>set</strong>和<strong>endset</strong>标签声明开始和结束：</li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% set navigation %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span> &#123;% endset %&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h4 id="内置上下文变量"   >          <a href="#内置上下文变量" class="heading-link"><i class="fas fa-link"></i></a>内置上下文变量</h4>      <ul><li>Flask 在模板上下文中提供了一些内置变量，可以在模板中直接使用，如下表所示：</li></ul><div class="table-container"><table><thead><tr><th align="center">变量</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">config</td><td align="center">当前的配置对象</td></tr><tr><td align="center">request</td><td align="center">当前的请求对象，已激活环境可用</td></tr><tr><td align="center">session</td><td align="center">当前的会话对象，已激活环境可用</td></tr><tr><td align="center">g</td><td align="center">与请求绑定的全局变量，已激活环境可用</td></tr></tbody></table></div>        <h4 id="自定义上下文"   >          <a href="#自定义上下文" class="heading-link"><i class="fas fa-link"></i></a>自定义上下文</h4>      <ul><li>如果多个模板都需要使用同一变量，那么比起在多个视图函数中重复传入，更好的方法是能够设置一个模板全局变量。Flask 提供了一个<strong>app.context_processor</strong>装饰器，可以用来注册模板上下文处理函数，它可以完成统一传入变量的工作。模板上下文处理函数需要返回一个包含变量键值对的字典。</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.context_processor</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inject_foo</span>():</span></span><br><span class="line">    foo = <span class="string">&#x27;I am foo.&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dict</span>(foo=foo)  <span class="comment"># 等同于return &#123;&#x27;foo&#x27;: foo&#125;</span></span><br></pre></td></tr></table></div></figure><ul><li><p>当调用<strong>render_template()**函数渲染任意一个模板时，所有使用</strong>app.context_processor**装饰器注册的模板上下文处理函数（包括 Flask 内置的上下文处理函数）都会被执行，这些函数的返回值会被添加到模板中，因此可以在模板中直接使用 foo 变量。</p></li><li><p>除了使用<strong>app.context_processor</strong>装饰器，也可以直接将其作为方法调用，传入模板上下文处理函数：</p></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inject_foo</span>():</span></span><br><span class="line">    foo = <span class="string">&#x27;I am foo.&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dict</span>(foo=foo)</span><br><span class="line"></span><br><span class="line">app.context_processor(inject_foo)</span><br></pre></td></tr></table></div></figure>        <h3 id="全局对象"   >          <a href="#全局对象" class="heading-link"><i class="fas fa-link"></i></a>全局对象</h3>              <h4 id="内置全局函数"   >          <a href="#内置全局函数" class="heading-link"><i class="fas fa-link"></i></a>内置全局函数</h4>      <ul><li>Jinja2 在模板中默认提供了一些全局函数</li></ul><div class="table-container"><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">range([start, ]stop[, step])</td><td align="center">与 Python 中 range() 用法相同</td></tr><tr><td align="center">lipsum(n=5, html=True, min=20, max=100)</td><td align="center">生成随机文本，测试时用来填充页面。默认生成 5 段 HTML 文本，每段包含 20~100 个单词</td></tr><tr><td align="center">dict(**items)</td><td align="center">和 Python 中的 dict() 用法相同</td></tr></tbody></table></div><ul><li>Flask 在模板中内置了两个全局函数</li></ul><div class="table-container"><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">url_for()</td><td align="center">用于生成 URL 的函数</td></tr><tr><td align="center">get_flashed_messages()</td><td align="center">用于获取 flash 消息的函数</td></tr></tbody></table></div><blockquote><p>Flask 除了把<strong>g、session、config、request</strong>对象注册为上下文变量，也将它们设为全局变量，因此可以全局使用</p></blockquote><ul><li>url_for() 生成返回的 URL</li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;index&#x27;) &#125;&#125;&quot;</span>&gt;</span>Return<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h4 id="自定义全局函数"   >          <a href="#自定义全局函数" class="heading-link"><i class="fas fa-link"></i></a>自定义全局函数</h4>      <ul><li>把 bar() 函数注册为模板全局函数</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.template_global()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;I am bar.&#x27;</span></span><br></pre></td></tr></table></div></figure><ul><li>默认使用函数的原名称传入模板，在<strong>app.template_global()**装饰器中使用 name 参数可以指定一个自定义名称。</strong>app.template_global()**仅能用于注册全局函数</li></ul><blockquote><p>可以直接使用<strong>app.add_template_global()**方法注册自定义全局函数，传入函数对象和可选的自定义名称（name），比如</strong>app.add_template_global(your_global_function)** 。</p></blockquote>        <h3 id="过滤器"   >          <a href="#过滤器" class="heading-link"><i class="fas fa-link"></i></a>过滤器</h3>      <ul><li>在 Jinja2 中，过滤器（filter）是一些可以用来修改和过滤变量值的特殊函数，过滤器和变量用一个**’|’**隔开，需要参数的过滤器可以像函数一样使用括号传递。下面是一个对 name 变量使用 title 过滤器的例子：</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; name|title &#125;&#125;</span><br><span class="line"><span class="comment"># 这会将name变量的值标题化，相当于在Python里调用name.title()</span></span><br><span class="line">&#123;&#123; movies|length &#125;&#125;</span><br><span class="line"><span class="comment"># 使用length获取movies列表的长度，类似于在Python中调用len(movies)</span></span><br></pre></td></tr></table></div></figure><ul><li>另一种用法是将过滤器作用于一部分模板数据，使用<strong>filter</strong>标签和<strong>endfilter</strong>标签声明开始和结束。比如，下面使用<strong>upper</strong>过滤器将一段文字转换为大写：</li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% filter upper %&#125; This text becomes uppercase. &#123;% endfilter %&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="内置过滤器"   >          <a href="#内置过滤器" class="heading-link"><i class="fas fa-link"></i></a>内置过滤器</h4>      <ul><li>Jinja2 提供了许多内置过滤器，常用的过滤器如下：</li></ul><div class="table-container"><table><thead><tr><th align="center">过滤器</th><th align="center">说 明</th></tr></thead><tbody><tr><td align="center">default (value, default_ value-u”, boolean False)</td><td align="center">设置默认值，默认值作为参数传人，别名为 d</td></tr><tr><td align="center">escape(s)</td><td align="center">转义 HTML 文本，别名为 e</td></tr><tr><td align="center">first(seq)</td><td align="center">返回序列的第一个元素</td></tr><tr><td align="center">last(seq)</td><td align="center">返回序列的最后一个元素</td></tr><tr><td align="center">length(object)</td><td align="center">返回变量的长度</td></tr><tr><td align="center">random(seq)</td><td align="center">返回序列中的随机元素</td></tr><tr><td align="center">safe(value)</td><td align="center">将变量值标记为安全，避免转义</td></tr><tr><td align="center">trim(value)</td><td align="center">清除变量值前后的空格</td></tr><tr><td align="center">max(value, case_ sensitive=False, attribute=None)</td><td align="center">返回序列中的最大值</td></tr><tr><td align="center">min( value, case_ sensitive=False, attribute=None)</td><td align="center">返回序列中的最小值</td></tr><tr><td align="center">unique(value, case_ sensitive -False, attribute=None)</td><td align="center">返回序列中的不重复的值</td></tr><tr><td align="center">striptags(value)</td><td align="center">清除变量值内的 HTML 标签</td></tr><tr><td align="center">urlize (value, trim<em>url</em> limit=None, nofollow=False, target= None, rel=None)</td><td align="center">将 URL 文本转换为可单击的 HTML 链接</td></tr><tr><td align="center">wordcount(s)</td><td align="center">计算单词数量</td></tr><tr><td align="center">tojson(value, indent=None)</td><td align="center">将变量值转换为 JSON 格式</td></tr><tr><td align="center">truncate(s, length=255, killwords=False,end=’…’, leeway=None)</td><td align="center">截断字符串，常用于显示文章摘要，length 参数设置截断的长度，killwords 参数设置是否截断单词，end 参数设置结尾的符号</td></tr></tbody></table></div><ul><li>在使用过滤器时，列表中过滤器函数的第一个参数表示被过滤的变量值（value）或字符串（s），即竖线符号左侧的值，其他的参数可以通过添加括号传入。</li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--过滤器叠加使用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;&#123; name|default(&#x27;陌生人&#x27;) &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ul><li><p>默认的自动开启转义仅针对**.html<strong>、</strong>.htm<strong>、</strong>.xml<strong>以及</strong>.xhtml<strong>后缀的文件，用于渲染模板字符串的</strong>render_template_string()**函数也会对所有传入的字符串进行转义。</p></li><li><p>在确保变量值安全的情况下，这通常意味着已经对用户输入的内容进行了“消毒”处理。这时如果想避免转义，将变量作为 HTML 解析，可以对变量使用 safe 过滤器：</p></li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; sanitized_text|safe &#125;&#125;</span><br></pre></td></tr></table></div></figure><ul><li>另一种将文本标记为安全的方法是在渲染前将变量转换为 Markup 对象：</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Markup</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    text = Markup(<span class="string">&#x27;&lt;h1&gt;Hello, Flask!&lt;/h1&gt;&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, text=text)</span><br></pre></td></tr></table></div></figure><ul><li>这时在模板中可以直接使用{{ text }}</li></ul><blockquote><p>绝对不要直接对用户输入的内容使用 safe 过滤器，否则容易被植入恶意代码，导致 XSS 攻击。</p></blockquote>        <h4 id="自定义过滤器"   >          <a href="#自定义过滤器" class="heading-link"><i class="fas fa-link"></i></a>自定义过滤器</h4>      <ul><li>注册自定义过滤器</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Markup</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.template_filter()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">musical</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> s + Markup(<span class="string">&#x27; &amp;#9835;&#x27;</span>)</span><br></pre></td></tr></table></div></figure><ul><li>和注册全局函数类似，可以在<strong>app.template_filter()**中使用</strong>name**关键字设置过滤器的名称，默认会使用函数名称。过滤器函数需要接收被处理的值作为输入，返回处理后的值。过滤器函数接收 s 作为被过滤的变量值，返回处理后的值。</li><li>创建的<strong>musical</strong>过滤器会在被过滤的变量字符后面添加一个音符（single bar note）图标，因为音符通过 HTML 实体&amp;#9835；表示，使用 Markup 类将它标记为安全字符。在使用时和其他过滤器用法相同：</li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; name|musical &#125;&#125;</span><br></pre></td></tr></table></div></figure><blockquote><p>可以直接使用<strong>app.add_template_filter()**方法注册自定义过滤器，传入函数对象和可选的自定义名称（name），比如</strong>app.add_template_filter(your_filter_function)**</p></blockquote>        <h3 id="测试器"   >          <a href="#测试器" class="heading-link"><i class="fas fa-link"></i></a>测试器</h3>      <ul><li>在 Jinja2 中，测试器（Test）是一些用来测试变量或表达式，返回布尔值（True 或 False）的特殊函数。比如，number 测试器用来判断一个变量或表达式是否是数字，我们使用 is 连接变量和测试器：</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> age <span class="keyword">is</span> number %&#125;</span><br><span class="line">　　&#123;&#123; age * <span class="number">365</span> &#125;&#125;</span><br><span class="line">&#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">　　无效的数字。</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="内置测试器"   >          <a href="#内置测试器" class="heading-link"><i class="fas fa-link"></i></a>内置测试器</h4>      <ul><li>Jinja2 内置了许多测试器，常用的测试器</li></ul><div class="table-container"><table><thead><tr><th align="center">测试器</th><th align="center"></th></tr></thead><tbody><tr><td align="center">callable(object)</td><td align="center">判断对象是否可被调用</td></tr><tr><td align="center">defined(value)</td><td align="center">判断变量是否已定义</td></tr><tr><td align="center">undefined(value)</td><td align="center">判断变量是否未定义</td></tr><tr><td align="center">none(value)</td><td align="center">判断变量是否为 None</td></tr><tr><td align="center">number(value)</td><td align="center">判断变量是否是数字</td></tr><tr><td align="center">string(value)</td><td align="center">判断变量是否是字符串</td></tr><tr><td align="center">sequence(value)</td><td align="center">判断变量是否是序列，比如字符串、列表、元组</td></tr><tr><td align="center">iterable(value)</td><td align="center">判断变量是否可迭代</td></tr><tr><td align="center">mapping(value)</td><td align="center">判断变量是否是匹配对象，比如字典</td></tr><tr><td align="center">sameas( value, other)</td><td align="center">判断变量与 other 是否指向相同的内存地址</td></tr></tbody></table></div><ul><li>在使用测试器时，is 的左侧是测试器函数的第一个参数（value），其他参数可以添加括号传入，也可以在右侧使用空格连接，以 sameas 为例：</li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if foo is sameas(bar) %&#125;...</span><br></pre></td></tr></table></div></figure><ul><li>等同于：</li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if foo is sameas bar %&#125;...</span><br></pre></td></tr></table></div></figure>        <h4 id="自定义测试器"   >          <a href="#自定义测试器" class="heading-link"><i class="fas fa-link"></i></a>自定义测试器</h4>      <ul><li>用 Flask 提供的**app.template_test()**装饰器来注册一个自定义测试器。</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.template_test()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">baz</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="string">&#x27;baz&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></div></figure><ul><li>测试器的名称默认为函数名称，可以在**app.template_test()**中使用 name 关键字指定自定义名称</li></ul>        <h3 id="模板环境对象"   >          <a href="#模板环境对象" class="heading-link"><i class="fas fa-link"></i></a>模板环境对象</h3>              <h4 id="添加自定义全局对象"   >          <a href="#添加自定义全局对象" class="heading-link"><i class="fas fa-link"></i></a>添加自定义全局对象</h4>      <ul><li>和<strong>app.template_global()**装饰器不同，直接操作</strong>globals<strong>字典允许传入任意 Python 对象，而不仅仅是函数，类似于上下文处理函数的作用。下面的代码使用</strong>app.jinja_env.globals**分别向模板中添加全局函数 bar 和全局变量 foo：</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;I am bar.&#x27;</span></span><br><span class="line">foo = <span class="string">&#x27;I am foo.&#x27;</span></span><br><span class="line"></span><br><span class="line">app.jinja_env.<span class="built_in">globals</span>[<span class="string">&#x27;bar&#x27;</span>] = bar</span><br><span class="line">app.jinja_env.<span class="built_in">globals</span>[<span class="string">&#x27;foo&#x27;</span>] = foo</span><br></pre></td></tr></table></div></figure>        <h4 id="添加自定义过滤器"   >          <a href="#添加自定义过滤器" class="heading-link"><i class="fas fa-link"></i></a>添加自定义过滤器</h4>      <ul><li>下面的代码使用<strong>app.jinja_env.filters</strong>向模板中添加自定义过滤器 smilingXXX：</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">smiling</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> s + <span class="string">&#x27; :)&#x27;</span></span><br><span class="line"></span><br><span class="line">app.jinja_env.filters[<span class="string">&#x27;smiling&#x27;</span>] = smiling</span><br></pre></td></tr></table></div></figure>        <h4 id="添加自定义测试器"   >          <a href="#添加自定义测试器" class="heading-link"><i class="fas fa-link"></i></a>添加自定义测试器</h4>      <ul><li>下面的代码使用<strong>app.jinja_env.tests</strong>向模板中添加自定义测试器 baz：</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">baz</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="string">&#x27;baz&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">app.jinja_env.tests[<span class="string">&#x27;baz&#x27;</span>] = baz</span><br></pre></td></tr></table></div></figure>        <h2 id="模板结构组织"   >          <a href="#模板结构组织" class="heading-link"><i class="fas fa-link"></i></a>模板结构组织</h2>              <h3 id="局部模板"   >          <a href="#局部模板" class="heading-link"><i class="fas fa-link"></i></a>局部模板</h3>      <ul><li>使用<strong>include</strong>标签来插入一个局部模板，这会把局部模板的全部内容插在使用<strong>include</strong>标签的位置。比如，在其他模板中，可以在任意位置使用下面的代码插入<strong>_banner.html</strong>的内容：</li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include &#x27;_banner.html&#x27; %&#125;</span><br></pre></td></tr></table></div></figure><blockquote><p>为了和普通模板区分开，局部模板的命名通常以一个下划线开始。</p></blockquote>        <h3 id="宏"   >          <a href="#宏" class="heading-link"><i class="fas fa-link"></i></a>宏</h3>      <ul><li><p>宏（macro）是 Jinja2 提供的一个非常有用的特性，它类似 Python 中的函数。使用宏可以把一部分模板代码封装到宏里，使用传递的参数来构建内容，最后返回构建后的内容。在功能上，它和局部模板类似，都是为了方便代码块的重用。</p></li><li><p>为了便于管理，可以把宏存储在单独的文件中，这个文件通常命名为<strong>macros.html 或_macors.html</strong>。在创建宏时，使用<strong>macro</strong>和<strong>endmacro</strong>标签声明宏的开始和结束。在开始标签中定义宏的名称和接收的参数，下面是一个简单的示例：</p></li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% macro qux(amount=1) %&#125; &#123;% if amount == 1 %&#125; I am qux. &#123;% elif amount &gt; 1 %&#125; We are quxs. &#123;% endif %&#125; &#123;% endmacro %&#125;</span><br></pre></td></tr></table></div></figure><ul><li>使用时，需要像从 Python 模块中导入函数一样使用 import 语句导入它，然后作为函数调用，传入必要的参数，如下所示：</li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% from &#x27;macros.html&#x27; import qux %&#125; ... &#123;&#123; qux(amount=5) &#125;&#125;</span><br></pre></td></tr></table></div></figure><ul><li><p>另外，在使用宏时需要注意上下文问题。在 Jinja2 中，出于性能的考虑，并且为了让这一切保持显式，默认情况下包含（include）一个局部模板会传递当前上下文到局部模板中，但导入（import）却不会。具体来说，当我们使用**render_template()**函数渲染一个 foo.html 模板时，</p></li><li><p>这个 foo.html 的模板上下文中包含下列对象：</p><ul><li><p>Flask 使用内置的模板上下文处理函数提供的<strong>g、session、config、request</strong>。</p></li><li><p>扩展使用内置的模板上下文处理函数提供的变量。</p></li><li><p>自定义模板上下文处理器传入的变量。</p></li><li><p>使用 render_template()函数传入的变量。</p></li><li><p>Jinja2 和 Flask 内置及自定义全局对象。</p></li><li><p>Jinja2 内置及自定义过滤器。</p></li><li><p>Jinja2 内置及自定义测试器。</p></li></ul></li><li><p>使用 include 标签插入的局部模板（比如_banner.html）同样可以使用上述上下文中的变量和函数。而导入另一个并非被直接渲染的模板（比如 macros.html）时，这个模板仅包含下列这些对象：</p><ul><li><p>Jinja2 和 Flask 内置的全局函数和自定义全局函数。</p></li><li><p>Jinja2 内置及自定义过滤器。</p></li><li><p>Jinja2 内置及自定义测试器。</p></li></ul></li><li><p>因此，如果我们想在导入的宏中使用第一个列表中的 2、3、4 项，就需要在导入时显式地使用<strong>with context</strong>声明传入当前模板的上下文：</p></li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% from &quot;macros.html&quot; import foo with context %&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="模板继承"   >          <a href="#模板继承" class="heading-link"><i class="fas fa-link"></i></a>模板继承</h3>              <h4 id="编写基模板"   >          <a href="#编写基模板" class="heading-link"><i class="fas fa-link"></i></a>编写基模板</h4>      <ul><li>基模板存储了程序页面的固定部分，通常被命名为<strong>base.html</strong>或<strong>layout.html</strong></li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        &#123;% block head %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;% block title %&#125;Template - HelloFlask&#123;% endblock %&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        &#123;% block styles %&#125;&#123;% endblock %&#125; &#123;% endblock %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;index&#x27;) &#125;&#125;&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">            &#123;% block content %&#125;&#123;% endblock %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">            &#123;% block footer %&#125; ... &#123;% endblock %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">        &#123;% block scripts %&#125;&#123;% endblock %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ul><li>为了避免块的混乱，块的结束标签可以指明块名，同时要确保前后名称一致。比如：</li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block body %&#125; ... &#123;% endblock body %&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="编写子模板"   >          <a href="#编写子模板" class="heading-link"><i class="fas fa-link"></i></a>编写子模板</h4>      <figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &#x27;base.html&#x27; %&#125; &#123;% from &#x27;macros.html&#x27; import qux %&#125; &#123;% block content %&#125; &#123;% set name=&#x27;baz&#x27; %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Template<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;watchlist&#x27;) &#125;&#125;&quot;</span>&gt;</span>Watchlist<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Filter: &#123;&#123; foo|musical &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Global: &#123;&#123; bar() &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Test: &#123;% if name is baz %&#125;I am baz.&#123;% endif %&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Macro: &#123;&#123; qux(amount=5) &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></div></figure><blockquote><p>extends 必须是子模板的第一个标签。</p></blockquote><ul><li><p>覆盖内容</p></li><li><p>追加内容</p></li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block styles %&#125; &#123;&#123; super() &#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    .foo &#123;</span><br><span class="line"><span class="css">        <span class="attribute">color</span>: red;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="模板进阶实践"   >          <a href="#模板进阶实践" class="heading-link"><i class="fas fa-link"></i></a>模板进阶实践</h2>              <h3 id="空白控制"   >          <a href="#空白控制" class="heading-link"><i class="fas fa-link"></i></a>空白控制</h3>      <ul><li><p>在渲染时自动去掉空行，可以在定界符内侧添加减号。比如，**{%- endfor %}**会移除该语句前的空白，同理，在右边的定界符内侧添加减号将移除该语句后的空白</p></li><li><p>使用模板环境对象提供的<strong>trim_blocks</strong>和<strong>lstrip_blocks</strong>属性设置</p></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用来删除Jinja2语句后的第一个空行</span></span><br><span class="line">app.jinja_env.trim_blocks = <span class="literal">True</span></span><br><span class="line"><span class="comment"># 用来删除Jinja2语句所在行之前的空格和制表符（tabs）</span></span><br><span class="line">app.jinja_env.lstrip_blocks = <span class="literal">True</span></span><br></pre></td></tr></table></div></figure><blockquote><p>trim_blocks 中的 block 指的是使用{% ... %}定界符的代码块，与模板继承中的块无关</p></blockquote>        <h3 id="加载静态文件"   >          <a href="#加载静态文件" class="heading-link"><i class="fas fa-link"></i></a>加载静态文件</h3>      <ul><li><p>一个 Web 项目不仅需要 HTML 模板，还需要许多静态文件，比如 CSS、JavaScript 文件、图片以及音频等。在 Flask 程序中，默认需要将静态文件存储在与主脚本（包含程序实例的脚本）同级目录的 static 文件夹中。</p></li><li><p>为了在 HTML 文件中引用静态文件，需要使用<strong>url_for()**函数获取静态文件的 URL。Flask 内置了用于获取静态文件的视图函数，端点值为 static，它的默认 URL 规则为</strong>/static/&lt;path：filename&gt;**，URL 变量 filename 是相对于 static 文件夹根目录的文件路径。</p></li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;avatar.jpg&#x27;) &#125;&#125;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50&quot;</span> /&gt;</span> <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename= &#x27;styles.css&#x27; ) &#125;&#125;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></div></figure><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加Favicon--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;favicon.ico&#x27;) &#125;&#125;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></div></figure><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用CSS框架--&gt;</span></span><br><span class="line">... &#123;% block styles %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;css/bootstrap.min.css&#x27;) &#125;&#125;&quot;</span> /&gt;</span></span><br><span class="line">&#123;% endblock %&#125; ... &#123;% block scripts %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;js/jquery.min.js&#x27;) &#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;js/popper.min.js&#x27;) &#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;js/bootstrap.min.js&#x27;) &#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125; ...</span><br></pre></td></tr></table></div></figure><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用宏加载静态资源--&gt;</span></span><br><span class="line">&#123;% macro static_file(type, filename_or_url, local=True) %&#125; &#123;% if local %&#125; &#123;% set filename_or_url = url_for(&#x27;static&#x27;, filename=filename_or_url) %&#125; &#123;% endif %&#125; &#123;% if type == &#x27;css&#x27; %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; filename_or_url &#125;&#125;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> /&gt;</span></span><br><span class="line">&#123;% elif type == &#x27;js&#x27; %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; filename_or_url &#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% elif type == &#x27;icon&#x27; %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; filename_or_url &#125;&#125;&quot;</span> /&gt;</span></span><br><span class="line">&#123;% endif %&#125; &#123;% endmacro %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--使用方法--&gt;</span></span><br><span class="line">static_file(&#x27;css&#x27;, &#x27;css/bootstrap.min.css&#x27;) static_file(&#x27;css&#x27;, &#x27;https://maxcdn.../css/bootstrap.min.css&#x27;, local=False)</span><br></pre></td></tr></table></div></figure>        <h3 id="消息闪现"   >          <a href="#消息闪现" class="heading-link"><i class="fas fa-link"></i></a>消息闪现</h3>      <ul><li>Flask 提供了一个非常有用的<strong>flash()**函数，它可以用来“闪现”需要显示给用户的消息，比如当用户登录成功后显示“欢迎回来！”。在视图函数调用</strong>flash()<strong>函数，传入消息内容即可“闪现”一条消息。使用功能</strong>flash()<strong>函数发送的消息会存储在</strong>session<strong>中，需要在模板中使用全局函数</strong>get_flashed_messages()**获取消息并将其显示出来。</li></ul><blockquote><p>通过<strong>flash()**函数发送的消息会存储在</strong>session<strong>对象中，所以需要为程序设置密钥，可以通过</strong>app.secret_key<strong>属性或配置变量</strong>SECRET_KEY**设置</p></blockquote><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, flash</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">&#x27;secret string&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/flash&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">just_flash</span>():</span></span><br><span class="line">    flash(<span class="string">&#x27;I am flash, who is looking for me?&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br></pre></td></tr></table></div></figure><ul><li>渲染 flash 消息</li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    &#123;% for message in get_flashed_messages() %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;alert&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125; &#123;% block content %&#125;&#123;% endblock %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ul><li>当<strong>get_flashed_message()**函数被调用时，</strong>session**中存储的所有消息都会被移除。</li></ul>        <h3 id="自定义错误页面"   >          <a href="#自定义错误页面" class="heading-link"><i class="fas fa-link"></i></a>自定义错误页面</h3>      <ul><li>404 页面模板</li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &#x27;base.html&#x27; %&#125; &#123;% block title %&#125;404 - Page Not Found&#123;% endblock %&#125; &#123;% block content %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Page Not Found<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>You are lost...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></div></figure><ul><li>404 错误处理器</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line">...</span><br><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">404</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_not_found</span>(<span class="params">e</span>):</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;errors/404.html&#x27;</span>), <span class="number">404</span></span><br></pre></td></tr></table></div></figure><blockquote><p>可以使用<strong>app.errorhandler()**装饰器为其他异常注册处理函数，并返回自定义响应，只需要在</strong>app.errorhandler()<strong>装饰器中传入对应的异常类即可。比如，使用</strong>app.errorhandler(NameError)<strong>可以注册处理</strong>NameError**异常的函数。</p></blockquote>        <h3 id="JavaScript-和-CSS-中的-Jinja2"   >          <a href="#JavaScript-和-CSS-中的-Jinja2" class="heading-link"><i class="fas fa-link"></i></a>JavaScript 和 CSS 中的 Jinja2</h3>              <h4 id="行内-嵌入式-JavaScript-CSS"   >          <a href="#行内-嵌入式-JavaScript-CSS" class="heading-link"><i class="fas fa-link"></i></a>行内/嵌入式 JavaScript/CSS</h4>      <ul><li><p>如果要在 JavaScript 和 CSS 文件中使用 Jinja2 代码，那么就在 HTML 中使用<code>&lt;style&gt;</code>和<code>&lt;script&gt;</code>标签定义这部分 CSS 和 JavaScript 代码。</p></li><li><p>在这部分 CSS 和 JavaScript 代码中加入 Jinja2 时，不用考虑编写时的语法错误，比如引号错误，因为 Jinja2 会在渲染后被替换掉，所以只需要确保渲染后的代码正确即可。</p></li><li><p>不过并不推荐使用这种方式，尤其是行内 JavaScript/CSS 会让维护变得困难。避免把大量 JavaScript 代码留在 HTML 中的办法就是尽量将要使用的 Jinja2 变量值在 HTML 模板中定义为 JavaScript 变量。</p></li></ul>        <h4 id="定义为-JavaScript-CSS-变量"   >          <a href="#定义为-JavaScript-CSS-变量" class="heading-link"><i class="fas fa-link"></i></a>定义为 JavaScript/CSS 变量</h4>      <ul><li>对于想要在 JavaScript 中获取的数据，如果是元素特定的数据，比如某个文章条目对应的 id 值，可以通过 HTML 元素的<strong>data-*</strong>属性存储。可以自定义横线后的名称，作为元素上的自定义数据变量，比如 data-id，data-username 等，比如：</li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">data-id</span>=<span class="string">&quot;&#123;&#123; user.id &#125;&#125;&quot;</span> <span class="attr">data-username</span>=<span class="string">&quot;&#123;&#123; user.username &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; user.username &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ul><li>在 JavaScript 中，可以使用 DOM 元素的 dataset 属性获取<strong>data-*</strong>属性值，比如<strong>element.dataset.username</strong>，或是使用<strong>getAttribute()**方法，比如</strong>element.getAttribute(‘data-username’)**；</li><li>使用 jQuery 时，可以直接对 jQuery 对象调用 data 方法获取，比如**$element.data(‘username’)**。</li><li>对于需要全局使用的数据，则可以在页面中使用嵌入式 JavaScript 定义变量，如果没法定义为 JavaScript 变量，那就考虑定义为函数，比如：</li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    var foo = &quot;</span><span class="template-variable">&#123;&#123; <span class="name">foo_variable</span> &#125;&#125;</span><span class="xml">&quot;;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ul><li>CSS 同理，有些时候需要将 Jinja2 变量值传入 CSS 文件，比如希望将用户设置的主题颜色设置到对应的 CSS 规则中，或是需要将 static 目录下某个图片的 URL 传入 CSS 来设置为背景图片，除了将这部分 CSS 定义直接写到 HTML 中外，可以将这些值定义为 CSS 变量，如下所示：</li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-pseudo">:root</span> &#123;</span></span><br><span class="line"><span class="css">        --theme-<span class="attribute">color</span>: &#123;&#123; theme_color &#125;&#125;;</span></span><br><span class="line"><span class="css">        --<span class="attribute">background</span>-url: &#123;&#123; <span class="built_in">url_for</span>(<span class="string">&#x27;static&#x27;</span>, filename=<span class="string">&#x27;background.jpg&#x27;</span>) &#125;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ul><li>在 CSS 文件中，使用**var()**函数并传入变量名即可获取对应的变量值：</li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#foo &#123; color: var(--theme-color); &#125; #bar &#123; background: var(--background-url); &#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python3 </tag>
            
            <tag> Flask学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask学习02-Flask与HTTP</title>
      <link href="/2019/07/14/Flask%E5%AD%A6%E4%B9%A002-Flask%E4%B8%8EHTTP/"/>
      <url>/2019/07/14/Flask%E5%AD%A6%E4%B9%A002-Flask%E4%B8%8EHTTP/</url>
      
        <content type="html"><![CDATA[        <h2 id="Request-对象"   >          <a href="#Request-对象" class="heading-link"><i class="fas fa-link"></i></a>Request 对象</h2>      <ul><li>假如请求的 URL 为<span class="exturl"><a class="exturl__link"   href="http://blog.cumtlee.cn/hello?name=Pandalzy" >http://blog.cumtlee.cn/hello?name=Pandalzy</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> ，下面是 request 的属性获取 URL 情况：</li></ul><div class="table-container"><table><thead><tr><th>属性</th><th>值</th></tr></thead><tbody><tr><td>path</td><td><code>/hello</code></td></tr><tr><td>full_path</td><td><code>/hello?name=Pandalzy</code></td></tr><tr><td>host</td><td><code>blog.cumtlee.cn</code></td></tr><tr><td>host_url</td><td><code>http://blog.cumtlee.cn/</code></td></tr><tr><td>base_url</td><td><code>http://blog.cumtlee.cn/hello</code></td></tr><tr><td>url</td><td><code>http://blog.cumtlee.cn/hello?name=Pandalzy</code></td></tr><tr><td>url_post</td><td><code>http://blog.cumtlee.cn/</code></td></tr></tbody></table></div><span id="more"></span><ul><li><strong>request</strong>对象常用的属性和方法</li></ul><div class="table-container"><table><thead><tr><th>属性</th><th>说明</th><th>类型</th></tr></thead><tbody><tr><td>data</td><td>记录请求数据,并转化为字符串</td><td>*</td></tr><tr><td>form</td><td>记录表单中的数据</td><td>MultiDict</td></tr><tr><td>args</td><td>记录请求中的查询参数</td><td>MultiDict</td></tr><tr><td>cookies</td><td>记录请求中 cookie 信息</td><td>Dict</td></tr><tr><td>headers</td><td>记录请求中的报文</td><td>EnvironHeaders</td></tr><tr><td>method</td><td>记录请求使用的 HTTP 方法</td><td>GET/POST</td></tr><tr><td>url</td><td>记录请求的 URL 地址</td><td>string</td></tr><tr><td>files</td><td>记录请求上传的文件</td><td>*</td></tr></tbody></table></div><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取 URL 中参数</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>:</span></span><br><span class="line">    <span class="comment"># 获取参数 name 的值，第二个参数为默认值</span></span><br><span class="line">    name = request.args.get(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Pandalzy&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;h1&gt;Hello, %s!&lt;/h1&gt;&#x27;</span> % name</span><br></pre></td></tr></table></div></figure><ul><li><code>request.args[&#39;name&#39;]</code> 若不存在对应的键，则返回 400 错误相应（请求无效），不抛出 <strong>KeyError</strong> 异常，若用<code>request.args.get(&#39;name&#39;)</code>方法获取，不存在键则返回 None。</li></ul>        <h2 id="在-Flask-中处理请求"   >          <a href="#在-Flask-中处理请求" class="heading-link"><i class="fas fa-link"></i></a>在 Flask 中处理请求</h2>              <h3 id="路由匹配"   >          <a href="#路由匹配" class="heading-link"><i class="fas fa-link"></i></a>路由匹配</h3>      <ul><li>当请求发来后，Flask 会根据请求中的 URL（path 部分），尝试在路由表（app.url_map）中进行匹配，调用匹配成功的视图函数，否则返回 404 错误相应。</li></ul>        <h3 id="监听-HTTP-的方法"   >          <a href="#监听-HTTP-的方法" class="heading-link"><i class="fas fa-link"></i></a>监听 HTTP 的方法</h3>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;h1&gt;Hello, Pandalzy&lt;/h1&gt;&#x27;</span></span><br></pre></td></tr></table></div></figure><blockquote><p>若请求方法不符合，则返回 405 错误响应（Method Not Allowed，方法不允许）</p></blockquote>        <h3 id="URL-处理"   >          <a href="#URL-处理" class="heading-link"><i class="fas fa-link"></i></a>URL 处理</h3>      <ul><li>通过把 URL 的一部分标记为 <code>&lt;variable_name&gt;</code> 就可以在 URL 中添加变量。标记的部分会作为关键字参数传递给函数。通过使用 <code>&lt;converter:variable_name&gt;</code> ，可以选择性的加上一个转换器，为变量指定规则。</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/&lt;username&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_user_profile</span>(<span class="params">username</span>):</span></span><br><span class="line">    <span class="comment"># show the user profile for that user</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;User %s&#x27;</span> % username</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/post/&lt;int:post_id&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_post</span>(<span class="params">post_id</span>):</span></span><br><span class="line">    <span class="comment"># show the post with the given id, the id is an integer</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Post %d&#x27;</span> % post_id</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/path/&lt;path:subpath&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_subpath</span>(<span class="params">subpath</span>):</span></span><br><span class="line">    <span class="comment"># show the subpath after /path/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Subpath %s&#x27;</span> % subpath</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/colors/&lt;any(blue, white, red):color&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">three_colors</span>(<span class="params">color</span>):</span></span><br><span class="line">    <span class="comment"># only blue, white or red can appends to /colors/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;p&gt;Love is patient and kind.&lt;/p&gt;&#x27;</span></span><br></pre></td></tr></table></div></figure><div class="table-container"><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>string</td><td>不包含斜线的字符串</td></tr><tr><td>int</td><td>接受正整数</td></tr><tr><td>float</td><td>接受正浮点数</td></tr><tr><td>path</td><td>类似 string ，但可以包含斜杠</td></tr><tr><td>any</td><td>匹配一系列定值中的一个元素</td></tr><tr><td>uuid</td><td>接受 UUID 字符串</td></tr></tbody></table></div>        <h2 id="请求钩子"   >          <a href="#请求钩子" class="heading-link"><i class="fas fa-link"></i></a>请求钩子</h2>      <ul><li>有时需要请求预处理或后处理，通过装饰器来实现</li></ul><div class="table-container"><table><thead><tr><th>钩子</th><th>说明</th></tr></thead><tbody><tr><td>before_first_request</td><td>注册一个函数，在处理第一个请求前运行</td></tr><tr><td>before_request</td><td>注册一个函数，在每次请求前运行</td></tr><tr><td>after_request</td><td>注册一个函数，如果没有未处理的异常抛出，在每次请求后运行</td></tr><tr><td>teardown_request</td><td>注册一个函数，在每次请求后运行，即使有未处理的异常抛出，如果有异常出现，会将异常对象作为参数到注册的函数中</td></tr><tr><td>after_this_request</td><td>在视图中注册一个函数，请求结束后运行</td></tr></tbody></table></div><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_something</span>():</span></span><br><span class="line">    <span class="keyword">pass</span> <span class="comment"># 这里的代码会在每个请求处理前执行</span></span><br></pre></td></tr></table></div></figure><p>下面是请求钩子的一些常见应用场景：</p><ul><li><strong>before_first_request</strong></li><li>在程序中，运行程序前我们需要进行一些程序的初始化操作，比如创建数据库表，添加管理员用户。这些工作可以放到使用 before_first_request 装饰器注册的函数中。</li><li><strong>before_request</strong></li><li>比如网站上要记录用户最后在线的时间，可以通过用户最后发送的请求时间来实现。为了避免在每个视图函数都添加更新在线时间的代码，我们可以仅在使用 before_request 钩子注册的函数中调用这段代码。</li><li><strong>after_request</strong><ul><li>我们经常在视图函数中进行数据库操作，比如更新、插入等，之后需要将更改提交到数据库中。提交更改的代码就可以放到 after_request 钩子注册的函数中。</li></ul></li></ul><blockquote><p><strong>after_request</strong>钩子和<strong>after_this_request</strong>钩子必须接收一个响应类对象作为参数，并且返回同一个或更新后的响应对象。</p></blockquote>        <h2 id="HTTP-响应"   >          <a href="#HTTP-响应" class="heading-link"><i class="fas fa-link"></i></a>HTTP 响应</h2>              <h3 id="响应码"   >          <a href="#响应码" class="heading-link"><i class="fas fa-link"></i></a>响应码</h3>      <div class="table-container"><table><thead><tr><th align="center">类型</th><th align="center">状态码</th><th>短语</th><th>说明</th></tr></thead><tbody><tr><td align="center">成功</td><td align="center">200</td><td>OK</td><td>正常处理</td></tr><tr><td align="center">成功</td><td align="center">201</td><td>Created</td><td>请求被处理，并创建了一个新资源</td></tr><tr><td align="center">成功</td><td align="center">204</td><td>No Content</td><td>处理成功，无内容返回</td></tr><tr><td align="center">重定向</td><td align="center">301</td><td>Moved Permanently</td><td>永久重定向</td></tr><tr><td align="center">重定向</td><td align="center">302</td><td>Found</td><td>临时性重定向</td></tr><tr><td align="center">重定向</td><td align="center">304</td><td>Not Modified</td><td>请求的资源未被修改，重定向到缓存的资源</td></tr><tr><td align="center">客户端错误</td><td align="center">400</td><td>Bad Request</td><td>请求无效，请求报文存在错误</td></tr><tr><td align="center">客户端错误</td><td align="center">401</td><td>Unauthorized</td><td>请求的资源需要获取授权信息</td></tr><tr><td align="center">客户端错误</td><td align="center">403</td><td>Forbidden</td><td>请求的资源被服务器拒绝访问</td></tr><tr><td align="center">客户端错误</td><td align="center">404</td><td>Not Found</td><td>无法找到请求的资源或者 URL 无效</td></tr><tr><td align="center">服务器端错误</td><td align="center">500</td><td>Internal Server Error</td><td>服务器内部发生错误</td></tr></tbody></table></div><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;h1&gt;Hello, Flask!&lt;/h1&gt;&#x27;</span>, <span class="number">201</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>, <span class="number">302</span>, &#123;<span class="string">&#x27;Location&#x27;</span>, <span class="string">&#x27;http://www.example.com&#x27;</span>&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="重定向"   >          <a href="#重定向" class="heading-link"><i class="fas fa-link"></i></a>重定向</h3>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, redirect</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&#x27;http://www.example.com&#x27;</span>)</span><br></pre></td></tr></table></div></figure><ul><li>使用<strong>redirect()**函数时，默认的状态码为 302，即临时重定向。如果想修改状态码，可以在</strong>redirect()**函数中作为第二个参数或使用 code 关键字传入。</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, redirect, url_for</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hi&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hi</span>():</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">return</span> redierct(url_for(<span class="string">&#x27;hello&#x27;</span>))  <span class="comment"># 重定向到/hello</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    <span class="comment"># ...</span></span><br></pre></td></tr></table></div></figure><ul><li>手动返回错误响应，更方便的方法是使用 Flask 提供的<strong>abort()**函数，在</strong>abort()**函数中传入状态码即可返回对应的错误响应。</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, abort</span><br><span class="line">...</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/404&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">not_found</span>():</span></span><br><span class="line">    abort(<span class="number">404</span>)</span><br></pre></td></tr></table></div></figure><ul><li><strong>abort()**函数前不需要使用 return 语句，但一旦</strong>abort()<strong>函数被调用，</strong>abort()**函数之后的代码将不会被执行。</li></ul>        <h3 id="响应格式"   >          <a href="#响应格式" class="heading-link"><i class="fas fa-link"></i></a>响应格式</h3>      <ul><li>不同的响应数据格式需要设置不同的 MIME 类型，MIME 类型在首部的 Content-Type 字段中定义</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> falsk <span class="keyword">import</span> make_response</span><br><span class="line">...</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;hello&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    response = make_response(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">    response.mimetype = <span class="string">&#x27;text/plain&#x27;</span></span><br><span class="line">    <span class="comment"># response.headers[&#x27;Content-Type&#x27;] = &#x27;text/xml；charset=utf-8&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></div></figure><ul><li><p>纯文本 text/plain</p><p>I am PandaLzy!</p></li><li><p>HTML 文件 text/html</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></div></figure></li><li><p>XML application/xml</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">to</span>&gt;</span>Pnada<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">from</span>&gt;</span>Lzy<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget the party!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></div></figure></li><li><p>JSON application/json</p><figure class="highlight json"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;res&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;code&quot;</span>: <span class="string">&quot;200&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;body&quot;</span>: <span class="string">&quot;Hello&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span>  flask <span class="keyword">import</span> Flask, make_response, json</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/foo&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;Grey Li&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;gender&#x27;</span>:<span class="string">&#x27;male&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    response = make_response(json.dumps(data))</span><br><span class="line">    response.mimetype = <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"><span class="comment"># jsonify简化</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> jsonify</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/foo&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    <span class="keyword">return</span> jsonify(name=<span class="string">&#x27;Grey Li&#x27;</span>, gender=<span class="string">&#x27;male&#x27;</span>), <span class="number">200</span></span><br><span class="line"><span class="comment"># return jsonify(&#123;&#x27;name&#x27;: &#x27;Grey Li&#x27;, &#x27;gender&#x27;: &#x27;male&#x27;&#125;)</span></span><br></pre></td></tr></table></div></figure></li></ul>        <h3 id="Cookie"   >          <a href="#Cookie" class="heading-link"><i class="fas fa-link"></i></a>Cookie</h3>      <ul><li>**set_cookie()**方法支持多个参数来设置 Cookie 的选项</li></ul><div class="table-container"><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>key</td><td>cookie 的键</td></tr><tr><td>value</td><td>cookie 的值</td></tr><tr><td>max_age</td><td>保存的时间，单位秒；默认浏览器关闭过期</td></tr><tr><td>expires</td><td>具体的过期时间，一个 datatime 对象或者时间戳</td></tr><tr><td>path</td><td>限制 cookie 只在给定的路径可用，默认整个域名</td></tr><tr><td>domain</td><td>设置 cookie 可用的域名</td></tr><tr><td>secure</td><td>若为 True ，只有 Https 可用</td></tr><tr><td>httponly</td><td>若为 True ，禁止客户端 JavaScript 获取 cookie</td></tr></tbody></table></div><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, make_response</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/set/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_cookie</span>(<span class="params">name</span>):</span></span><br><span class="line">    response = make_response(redirect(url_for(<span class="string">&#x27;hello&#x27;</span>)))</span><br><span class="line">    response.set_cookie(<span class="string">&#x27;name&#x27;</span>, name)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></div></figure><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    name = request.args.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> name <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        name = request.cookies.get(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Human&#x27;</span>)  <span class="comment"># 从Cookie中获取name值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;h1&gt;Hello, %s&lt;/h1&gt;&#x27;</span> % name</span><br></pre></td></tr></table></div></figure>        <h4 id="设置程序密钥"   >          <a href="#设置程序密钥" class="heading-link"><i class="fas fa-link"></i></a>设置程序密钥</h4>      <ul><li><p>session 对象用来加密 Cookie，默认情况下，它会把数据存储在浏览器上一个名为 session 的 cookie 里。</p></li><li><p>session 通过密钥对数据进行签名以加密数据，因此，先设置一个密钥。这里的密钥就是一个具有一定复杂度和随机性的字符串，比如“Drmhze6EPcv0fN_81Bj-nA”。</p></li><li><p>程序的密钥可以通过<strong>Flask.secret_key</strong>属性或配置变量<strong>SECRET_KEY</strong>设置，比如：</p></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.secret_key = <span class="string">&#x27;secret string&#x27;</span></span><br></pre></td></tr></table></div></figure><ul><li>更安全的做法是把密钥写进系统环境变量（在命令行中使用 export 或 set 命令），或是保存在**.env**文件中：</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SECRET_KEY=secret string</span><br></pre></td></tr></table></div></figure><ul><li>然后在程序脚本中使用 os 模块提供的**getenv()**方法获取：</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">app.secret_key = os.getenv(<span class="string">&#x27;SECRET_KEY&#x27;</span>, <span class="string">&#x27;secret string&#x27;</span>)</span><br></pre></td></tr></table></div></figure><blockquote><p>可以在**getenv()**方法中添加第二个参数，作为没有获取到对应环境变量时使用的默认值。</p></blockquote>        <h4 id="模拟用户认证"   >          <a href="#模拟用户认证" class="heading-link"><i class="fas fa-link"></i></a>模拟用户认证</h4>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> redirect, session, url_for</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">&#x27;secret string&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    session[<span class="string">&#x27;logged_in&#x27;</span>] = <span class="literal">True</span>  <span class="comment"># 写入session</span></span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;hello&#x27;</span>))</span><br></pre></td></tr></table></div></figure><ul><li>当用户登录后，就可以根据用户的认证状态分别显示不同的内容。在 login 视图的最后，我们将程序重定向到 hello 视图，下面是修改后的 hello 视图</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request, session</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    name = request.args.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> name <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        name = request.cookies.get(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Human&#x27;</span>)</span><br><span class="line">    response = <span class="string">&#x27;&lt;h1&gt;Hello, %s!&lt;/h1&gt;&#x27;</span> % name</span><br><span class="line">    <span class="comment"># 根据用户认证状态返回不同的内容</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;logged_in&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line">        response += <span class="string">&#x27;[Authenticated]&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        response += <span class="string">&#x27;[Not Authenticated]&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></div></figure><ul><li>模拟管理后台</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> session, abort</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/admin&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">admin</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;logged_in&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> session:</span><br><span class="line">        abort(<span class="number">403</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Welcome to admin page.&#x27;</span></span><br></pre></td></tr></table></div></figure><ul><li>登出用户</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> session</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/logout&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;logged_in&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line">        session.pop(<span class="string">&#x27;logged_in&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;hello&#x27;</span>))</span><br></pre></td></tr></table></div></figure><blockquote><p>默认情况下，<strong>session cookie</strong>会在用户关闭浏览器时删除。通过将<strong>session.permanent</strong>属性设为 True 可以将 session 的有效期延长为<strong>Flask.permanent_session_lifetime</strong>属性值对应的<strong>datetime.timedelta</strong>对象，也可通过配置变量<strong>PERMANENT_SESSION_LIFETIME</strong>设置，默认为 31 天。</p></blockquote>        <h2 id="Flask-上下文"   >          <a href="#Flask-上下文" class="heading-link"><i class="fas fa-link"></i></a>Flask 上下文</h2>      <ul><li>Flask 中有两种上下文，程序上下文（application context）和请求上下文（request context）</li></ul>        <h3 id="上下文全局变量"   >          <a href="#上下文全局变量" class="heading-link"><i class="fas fa-link"></i></a>上下文全局变量</h3>      <div class="table-container"><table><thead><tr><th>变量名</th><th>上下文类别</th><th>说明</th></tr></thead><tbody><tr><td>current_app</td><td>程序上下文</td><td>指向处理请求的当前程序实例</td></tr><tr><td>g</td><td>程序上下文</td><td>替代 Python 的全局变量用法，确保仅在当前请求中可用。用于储存全局数据，每次请求都会重设</td></tr><tr><td>request</td><td>请求上下文</td><td>封装客户端发出的请求报文数据</td></tr><tr><td>session</td><td>请求上下文</td><td>用于记住请求之间的数据，通过签名的 Cookie 实现</td></tr></tbody></table></div><ul><li>在不同的视图函数中，request 对象都表示和视图函数对应的请求，也就是当前请求（current request）。而程序也会有多个程序实例的情况，为了能获取对应的程序实例，而不是固定的某一个程序实例，需要使用<strong>current_app</strong>变量</li><li>因为<strong>g</strong>存储在程序上下文中，而程序上下文会随着每一个请求的进入而激活，随着每一个请求的处理完毕而销毁，所以每次请求都会重设这个值。通常会使用它结合请求钩子来保存每个请求处理前所需要的全局变量，比如当前登入的用户对象，数据库连接等。在 hello 视图中从查询字符串获取 name 的值，如果每一个视图都需要这个值，那么就要在每个视图重复这行代码。借助 g 可以将这个操作移动到<strong>before_request</strong>处理函数中执行，然后保存到 g 的任意属性上：</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> g</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_name</span>():</span></span><br><span class="line">    g.name = request.args.get(<span class="string">&#x27;name&#x27;</span>)</span><br></pre></td></tr></table></div></figure><blockquote><p>设置这个函数后，在其他视图中可以直接使用<strong>g.name</strong>获取对应的值。另外，g 也支持使用类似字典的<strong>get()**、</strong>pop()<strong>以及</strong>setdefault()**方法进行操作。</p></blockquote>        <h3 id="激活上下文"   >          <a href="#激活上下文" class="heading-link"><i class="fas fa-link"></i></a>激活上下文</h3>      <p>在下面这些情况下，Flask 会自动激活程序上下文：</p><ul><li>当使用 <code>flask run</code> 命令启动程序时。</li><li>使用旧的 <code>app.run()</code> 方法启动程序时。</li><li>执行使用 <code>@app.cli.command()</code> 装饰器注册的 flask 命令时。</li><li>使用 flask shell 命令启动 Python Shell 时。</li></ul><p>当请求进入时，Flask 会自动激活请求上下文，这时我们可以使用 request 和 session 变量。另外，当请求上下文被激活时，程序上下文也被自动激活。当请求处理完毕后，请求上下文和程序上下文也会自动销毁。也就是说，在请求处理时这两者拥有相同的生命周期。</p><p>如果需要在没有激活上下文的情况下使用这些变量，可以手动激活上下文。比如，下面是一个普通的 Python shell，通过 python 命令打开。程序上下文对象使用 <code>app.app_context()</code> 获取，我们可以使用 with 语句执行上下文操作：</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> app <span class="keyword">import</span> app</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> flask <span class="keyword">import</span> current_app</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> app.app_context():</span><br><span class="line">    ... current_app.name</span><br><span class="line"><span class="string">&#x27;app&#x27;</span></span><br></pre></td></tr></table></div></figure><p>或是显式地使用 <code>push()</code> 方法推送（激活）上下文，在执行完相关操作时使用 <code>pop()</code> 方法销毁上下文：</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> app <span class="keyword">import</span> app</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> flask <span class="keyword">import</span> current_app</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>app_ctx = app.app_context()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>app_ctx.push()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>current_app.name</span><br><span class="line"><span class="string">&#x27;app&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>app_ctx.pop()</span><br></pre></td></tr></table></div></figure><p>而请求上下文可以通过 <code>test_request_context()</code> 方法临时创建：</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> app <span class="keyword">import</span> app</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> app.test_request_context(<span class="string">&#x27;/hello&#x27;</span>):</span><br><span class="line"><span class="meta">... </span>    request.method</span><br><span class="line"><span class="string">&#x27;GET&#x27;</span></span><br></pre></td></tr></table></div></figure><blockquote><p>同样的，这里也可以使用 <code>push()</code> 和 <code>pop()</code> 方法显式地推送和销毁请求上下文。</p></blockquote>        <h3 id="上下文钩子"   >          <a href="#上下文钩子" class="heading-link"><i class="fas fa-link"></i></a>上下文钩子</h3>      <ul><li>Flask 也为上下文提供了一个 <code>teardown_appcontext</code> 钩子，使用它注册的回调函数会在程序上下文被销毁时调用，而且通常也会在请求上下文被销毁时调用。比如，需要在每个请求处理结束后销毁数据库连接：</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.teardown_appcontext</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">teardown_db</span>(<span class="params">exception</span>):</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    db.close()</span><br></pre></td></tr></table></div></figure><ul><li>使用 <code>app.teardown_appcontext</code> 装饰器注册的回调函数需要接收异常对象作为参数，当请求被正常处理时这个参数值将是 None，这个函数的返回值将被忽略。</li></ul>        <h2 id="HTTP-进阶"   >          <a href="#HTTP-进阶" class="heading-link"><i class="fas fa-link"></i></a>HTTP 进阶</h2>              <h3 id="获取上一个页面的-URL"   >          <a href="#获取上一个页面的-URL" class="heading-link"><i class="fas fa-link"></i></a>获取上一个页面的 URL</h3>      <ul><li>HTTP referer</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> redirect(request.referrer)</span><br><span class="line"><span class="comment"># 但是在很多种情况下，referrer字段会是空值，添加备选项</span></span><br><span class="line"><span class="keyword">return</span> redirect(request.referrer <span class="keyword">or</span> url_for(<span class="string">&#x27;hello&#x27;</span>))</span><br></pre></td></tr></table></div></figure><ul><li><p>查询参数</p><ul><li>除了自动从 referrer 获取，另一种更常见的方式是在 URL 中手动加入包含当前页面 URL 的查询参数，这个查询参数一般命名为 next。比如，下面在 foo 和 bar 视图的返回值中的 URL 后添加 next 参数：</li></ul></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/foo&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;h1&gt;Foo page&lt;/h1&gt;&lt;a href=&quot;%s&quot;&gt;Do something and redirect&lt;/a&gt;&#x27;</span> % url_for(<span class="string">&#x27;do_something&#x27;</span>, <span class="built_in">next</span>=request.full_path)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/bar&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;h1&gt;Bar page&lt;/h1&gt;&lt;a href=&quot;%s&quot;&gt;Do something and redirect&lt;/a&gt;&#x27;</span> % url_for(<span class="string">&#x27;do_something&#x27;</span>, <span class="built_in">next</span>=request.full_path)</span><br></pre></td></tr></table></div></figure><ul><li>在程序内部只需要使用相对 URL，所以这里使用 request.full_path 获取当前页面的完整路径。在 do_something 视图中，我们获取这个 next 值，然后重定向到对应的路径：</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> redirect(request.args.get(<span class="string">&#x27;next&#x27;</span>))</span><br><span class="line"><span class="keyword">return</span> redirect(request.args.get(<span class="string">&#x27;next&#x27;</span>, url_for(<span class="string">&#x27;hello&#x27;</span>)))</span><br></pre></td></tr></table></div></figure><ul><li>重定向回上一个页面</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">redirect_back</span>(<span class="params">default=<span class="string">&#x27;hello&#x27;</span>, **kwargs</span>):</span></span><br><span class="line">    <span class="keyword">for</span> target <span class="keyword">in</span> request.args.get(<span class="string">&#x27;next&#x27;</span>), request.referrer:</span><br><span class="line">        <span class="keyword">if</span> target:</span><br><span class="line">            <span class="keyword">return</span> redirect(target)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(default, **kwargs))</span><br></pre></td></tr></table></div></figure><ul><li>通过设置默认值，可以在 referer 和 next 为空的情况下重定向到默认的视图。在 do_something 视图中使用这个函数的示例如下所示：</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/do_something_and_redirect&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_something</span>():</span></span><br><span class="line">    <span class="comment"># do something</span></span><br><span class="line">    <span class="keyword">return</span> redirect_back()</span><br></pre></td></tr></table></div></figure><ul><li>对 URL 进行安全验证</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse, urljoin</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_safe_url</span>(<span class="params">target</span>):</span></span><br><span class="line">    ref_url = urlparse(request.host_url)</span><br><span class="line">    test_url = urlparse(urljoin(request.host_url, target))</span><br><span class="line">    <span class="keyword">return</span> test_url.scheme <span class="keyword">in</span> (<span class="string">&#x27;http&#x27;</span>, <span class="string">&#x27;https&#x27;</span>) <span class="keyword">and</span> \</span><br><span class="line">           ref_url.netloc == test_url.netloc</span><br></pre></td></tr></table></div></figure><ul><li>这个函数接收目标 URL 作为参数，并通过 <code>request.host_url</code> 获取程序内的主机 URL，然后使用 <code>urljoin()</code> 函数将目标 URL 转换为绝对 URL 。接着，分别使用 urlparse 模块提供的 <code>urlparse()</code> 函数解析两个 URL ，最后对目标 URL 的 URL 模式和主机地址进行验证，确保只有属于程序内部的 URL 才会被返回。在执行重定向回上一个页面的 <code>redirect_back()</code> 函数中，我们使用 <code>is_safe_url()</code> 验证 next 和 referer 的值：</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">redirect_back</span>(<span class="params">default=<span class="string">&#x27;hello&#x27;</span>, **kwargs</span>):</span></span><br><span class="line">    <span class="keyword">for</span> target <span class="keyword">in</span> request.args.get(<span class="string">&#x27;next&#x27;</span>), request.referrer:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> target:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> is_safe_url(target):</span><br><span class="line">            <span class="keyword">return</span> redirect(target)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(default, **kwargs))</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python3 </tag>
            
            <tag> Flask学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微机原理与接口实验</title>
      <link href="/2019/06/28/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8E%A5%E5%8F%A3%E5%AE%9E%E9%AA%8C/"/>
      <url>/2019/06/28/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8E%A5%E5%8F%A3%E5%AE%9E%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[        <h2 id="实验一"   >          <a href="#实验一" class="heading-link"><i class="fas fa-link"></i></a>实验一</h2>              <h3 id="实验题目："   >          <a href="#实验题目：" class="heading-link"><i class="fas fa-link"></i></a>实验题目：</h3>      <p>1．8255 输入、输出实验</p><p>2．利用 8255 设计跑马灯（软延时）</p>        <h3 id="实验目的："   >          <a href="#实验目的：" class="heading-link"><i class="fas fa-link"></i></a>实验目的：</h3>      <p>熟悉汇编语言编程环境，掌握 8255 芯片工作原理、电路设计及利用汇编语言编写接口软件。</p><span id="more"></span>        <h3 id="实验电路图"   >          <a href="#实验电路图" class="heading-link"><i class="fas fa-link"></i></a>实验电路图</h3>      <p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200213171727.png" alt="实验电路图"></p>        <h3 id="软件设计程序流程图"   >          <a href="#软件设计程序流程图" class="heading-link"><i class="fas fa-link"></i></a>软件设计程序流程图</h3>      <p><strong>1、LED 灯开关控制</strong></p><p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200213171751.png" alt="LED灯开关控制"></p><p><strong>2、跑马灯软延时</strong></p><p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200213195443.png" alt="跑马灯软延时"></p>        <h3 id="实验软件代码（加注释）"   >          <a href="#实验软件代码（加注释）" class="heading-link"><i class="fas fa-link"></i></a>实验软件代码（加注释）</h3>      <p><strong>1、LED 灯开关控制</strong></p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CODE SEGMENT</span><br><span class="line">ASSUME CS:CODE</span><br><span class="line">START:MOV DX,283H</span><br><span class="line">MOV AL,10000010B;A口输出，B口输入</span><br><span class="line">OUT DX,AL;控制字写入</span><br><span class="line">TEST_IT:MOV DX,281H</span><br><span class="line">IN AL,DX;向B口输入开关状态</span><br><span class="line">MOV DX,280H</span><br><span class="line">OUT DX,AL;输出LED灯显示状态</span><br><span class="line">JMP TEST_IT</span><br><span class="line">CODE ENDS</span><br><span class="line">END START</span><br></pre></td></tr></table></div></figure><p><strong>2、跑马灯软延时</strong></p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">CODE SEGMENT</span><br><span class="line">ASSUME CS:CODE</span><br><span class="line">START:MOV DX,283H</span><br><span class="line">MOV AL,10001011B;A口输出，B,C口输入</span><br><span class="line">OUT DX,AL</span><br><span class="line">MOV BL,00000001B;用于LED灯的移位显示</span><br><span class="line">TEST_IT:</span><br><span class="line">;检测开关状态，只有开关打开才能运行跑马灯</span><br><span class="line">TEST1:</span><br><span class="line">MOV DX,281H</span><br><span class="line">IN AL,DX</span><br><span class="line">CMP AL,01H</span><br><span class="line">JNZ TEST1</span><br><span class="line">;LED灯显示</span><br><span class="line">MOV AL,BL</span><br><span class="line">MOV DX,280H</span><br><span class="line">OUT DX,AL;输出LED灯显示</span><br><span class="line">ROL BL,1;不带进位的左移</span><br><span class="line">;软件延时，便于观察LED灯的显示状态</span><br><span class="line">MOV AX,880H</span><br><span class="line">DELAY1:MOV CX,16EAH</span><br><span class="line">DELAY:LOOP DELAY</span><br><span class="line">DEC AX</span><br><span class="line">JNZ DELAY1</span><br><span class="line">JMP TEST_IT</span><br><span class="line">CODE ENDS</span><br><span class="line">END START</span><br></pre></td></tr></table></div></figure>        <h3 id="实验结果"   >          <a href="#实验结果" class="heading-link"><i class="fas fa-link"></i></a>实验结果</h3>      <p>1、LED 灯开关控制，LED 灯在相应的开关控制下，亮起或者熄灭；</p><p>2、跑马灯软延时，通过设置一个较长的软件延时，打开开关，8 颗 LED 灯相继亮起和熄灭。</p>        <h3 id="实验小结"   >          <a href="#实验小结" class="heading-link"><i class="fas fa-link"></i></a>实验小结</h3>      <p>​ 这是我们第一次微机实验课，通过这次实验，我基本掌握了 8086 和 8255 的操作方法，通过自己独自编写汇编代码，完成 LED 灯的控制和跑马灯的实现，增加了我自己的成就感，当然也锻炼了我的汇编编程，理论与实践的结合，使我对所使用的元器件和汇编语言的理解加强。</p>        <h2 id="实验二"   >          <a href="#实验二" class="heading-link"><i class="fas fa-link"></i></a>实验二</h2>              <h3 id="实验题目：-1"   >          <a href="#实验题目：-1" class="heading-link"><i class="fas fa-link"></i></a>实验题目：</h3>      <p>1．8253 定时实验，利用 8253 完成 1 秒的延时。</p><p>2．利用 8253 硬件延时控制跑马灯运行。</p><p>3．选做 8255 键盘显示实验</p>        <h3 id="实验目的：-1"   >          <a href="#实验目的：-1" class="heading-link"><i class="fas fa-link"></i></a>实验目的：</h3>      <p>熟悉汇编语言编程环境，掌握 8253 芯片工作原理、电路设计及利用汇编语言编写接口软件。</p>        <h3 id="实验电路图-1"   >          <a href="#实验电路图-1" class="heading-link"><i class="fas fa-link"></i></a>实验电路图</h3>      <p><strong>1、跑马灯硬件延时</strong></p><p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200213195815.png" alt="跑马灯硬件延时"></p><p><strong>2、8255 键盘实验</strong></p><p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200213195841.png" alt="8255键盘实验"></p>        <h3 id="软件设计程序流程图-1"   >          <a href="#软件设计程序流程图-1" class="heading-link"><i class="fas fa-link"></i></a>软件设计程序流程图</h3>      <p><strong>1、跑马灯硬件延时</strong></p><p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200213195920.png" alt="跑马灯硬件延时"></p><p><strong>2、8255 键盘实验</strong></p><p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200213195942.png" alt="8255键盘实验"></p>        <h3 id="实验软件代码（加注释）-1"   >          <a href="#实验软件代码（加注释）-1" class="heading-link"><i class="fas fa-link"></i></a>实验软件代码（加注释）</h3>      <p><strong>1、跑马灯硬件延时</strong></p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">CODE SEGMENT</span><br><span class="line">ASSUME CS:CODE</span><br><span class="line">START:MOV DX,283H</span><br><span class="line">MOV AL,10001011B;A口输出，B，C口输入</span><br><span class="line">OUT DX,AL</span><br><span class="line">MOV BL,00000001B;跑马灯显示位</span><br><span class="line">MOV AL,00110101B;通道0控制字，方式2，BCD计数，进行分频</span><br><span class="line">MOV DX,28BH</span><br><span class="line">OUT DX,AL</span><br><span class="line">MOV AL,00H;低地址</span><br><span class="line">MOV DX,288H</span><br><span class="line">OUT DX,AL</span><br><span class="line">MOV AL,50H;高地址</span><br><span class="line">OUT DX,AL</span><br><span class="line">TEST_IT:</span><br><span class="line">MOV DX,281H</span><br><span class="line">IN AL,DX</span><br><span class="line">TEST AL,01H</span><br><span class="line">JZ TEST_IT</span><br><span class="line">MOV DX,280H</span><br><span class="line">MOV AL,BL</span><br><span class="line">OUT DX,AL</span><br><span class="line">ROL BL,1</span><br><span class="line">MOV AL,01110001B;通道1控制字，方式0，BCD计数，CLK1连OUT0</span><br><span class="line">MOV DX,28BH</span><br><span class="line">OUT DX,AL</span><br><span class="line">MOV AL,00H;低地址</span><br><span class="line">MOV DX,289H</span><br><span class="line">OUT DX,AL</span><br><span class="line">MOV AL,04H;高地址</span><br><span class="line">OUT DX,AL</span><br><span class="line">LOWER:</span><br><span class="line">MOV DX,282H;C口输入OUT1</span><br><span class="line">IN AL,DX</span><br><span class="line">TEST AL,01H;低电平跳转</span><br><span class="line">JZ LOWER</span><br><span class="line">HEIGHT:</span><br><span class="line">MOV DX,282H;C口输入OUT1</span><br><span class="line">IN AL,DX</span><br><span class="line">TEST AL,01H;高电平跳转</span><br><span class="line">JNZ HEIGHT</span><br><span class="line">;检测出上升沿，延时结束</span><br><span class="line">JMP TEST_IT</span><br><span class="line">CODE ENDS</span><br><span class="line">END START</span><br></pre></td></tr></table></div></figure><p><strong>2、8255 键盘实验</strong></p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">;端口地址</span><br><span class="line">PORT_A EQU 280H</span><br><span class="line">PORT_B EQU 281H</span><br><span class="line">PORT_C EQU 282H</span><br><span class="line">PORT_CTL EQU 283H</span><br><span class="line">;数据段</span><br><span class="line">DATA SEGMENT</span><br><span class="line">;键盘扫描码</span><br><span class="line">TABLE1 DB 77H,7BH,7DH,7EH,0B7H,0BBH,0BDH,0BEH</span><br><span class="line">DB 0D7H,0DBH,0DDH,0DEH,0E7H,0EBH,0EDH,0EEH</span><br><span class="line">;七段数码管数据</span><br><span class="line">TABLE2 DB 3FH,06H,5BH,4FH,66H,6DH,7DH,07H</span><br><span class="line">DB 7FH,6FH,77H,7CH,39H,5EH,79H,71H</span><br><span class="line">DATA ENDS</span><br><span class="line">;堆栈段</span><br><span class="line">STACKS SEGMENT STACK</span><br><span class="line">DW 50 DUP(0)</span><br><span class="line">TOP_STACK LABEL WORD</span><br><span class="line">STACKS ENDS</span><br><span class="line">;代码段</span><br><span class="line">CODE SEGMENT</span><br><span class="line">ASSUME CS:CODE,DS:DATA,SS:STACKS</span><br><span class="line">START:MOV AX,STACKS</span><br><span class="line">MOV SS,AX</span><br><span class="line">LEA SP,TOP_STACK</span><br><span class="line">MOV AX,DATA</span><br><span class="line">MOV DS,AX</span><br><span class="line">;初始化8255，方式0，B口输入，A口输出，C口输出数码管</span><br><span class="line">MOV DX,PORT_CTL</span><br><span class="line">MOV AL,10000010B</span><br><span class="line">OUT DX,AL</span><br><span class="line">;向所有行送0</span><br><span class="line">S:MOV DX,PORT_A</span><br><span class="line">MOV AL,00H</span><br><span class="line">OUT DX,AL</span><br><span class="line">;查看所有键是否松开</span><br><span class="line">MOV DX,PORT_B</span><br><span class="line">WAIT_OPEN:IN AL,DX</span><br><span class="line">AND AL,0FH</span><br><span class="line">CMP AL,0FH</span><br><span class="line">JNE WAIT_OPEN</span><br><span class="line">;各键均松开，查列是否有0</span><br><span class="line">WAIT_PRES:IN AL,DX</span><br><span class="line">AND AL,0FH;只查低四位</span><br><span class="line">CMP AL,0FH</span><br><span class="line">JE WAIT_PRES</span><br><span class="line">;延时20ms，消抖动</span><br><span class="line">MOV CX,16EAH</span><br><span class="line">DELAY:LOOP DELAY;CX为0，跳出循环</span><br><span class="line">;再查列，看按键是否仍被压着</span><br><span class="line">IN AL,DX</span><br><span class="line">AND AL,0FH</span><br><span class="line">CMP AL,0FH</span><br><span class="line">JE WAIT_PRES</span><br><span class="line">;键仍被按下，确定哪一个键被按下</span><br><span class="line">MOV AL,0FEH</span><br><span class="line">MOV CL,AL</span><br><span class="line">NEXT_ROW:MOV DX,PORT_A;</span><br><span class="line">OUT DX,AL;向一行输出低电平</span><br><span class="line">MOV DX,PORT_B</span><br><span class="line">IN AL,DX;读入B口状态</span><br><span class="line">AND AL,0FH;只检测低四位，即列值</span><br><span class="line">CMP AL,0FH;是否均为1，若是，则此行无按键按下</span><br><span class="line">JNE ENCODE;否，此行有按键按下，转去编码</span><br><span class="line">ROL CL,1;均为1，转去下行</span><br><span class="line">MOV AL,CL</span><br><span class="line">JMP NEXT_ROW;查看下一行</span><br><span class="line">ENCODE:MOV BX,000FH</span><br><span class="line">IN AL,DX</span><br><span class="line">NEXT_TRY:CMP AL,TABLE1[BX];读入的行列值是否与表中的值相等</span><br><span class="line">JE DONE;相等，跳至数码管显示</span><br><span class="line">DEC BX</span><br><span class="line">JNS NEXT_TRY;非负，继续检查</span><br><span class="line">MOV AH,01</span><br><span class="line">JMP EXIT</span><br><span class="line">DONE:</span><br><span class="line">MOV DX,PORT_C</span><br><span class="line">MOV AL,TABLE2[BX]</span><br><span class="line">OUT DX,AL;数码管显示按键</span><br><span class="line">JMP S;跳回继续检测是否有按键按下</span><br><span class="line">EXIT:HLT</span><br><span class="line">CODE ENDS</span><br><span class="line">END START</span><br></pre></td></tr></table></div></figure>        <h3 id="实验结果-1"   >          <a href="#实验结果-1" class="heading-link"><i class="fas fa-link"></i></a>实验结果</h3>      <p>1、跑马灯硬件延时，打开开关，基于 8253 定时 1s ，跑马灯亮一秒，暗一秒交替闪亮。</p><p>2、8255 键盘实验，按下相应的键盘按键，数码管上显示相应的数字</p>        <h3 id="实验小结-1"   >          <a href="#实验小结-1" class="heading-link"><i class="fas fa-link"></i></a>实验小结</h3>      <p>​ 通过本次实验，我学会了怎样使用 8253 芯片进行准确的时间控制，由于一个计数器的计数时间有限，所以较长时间的延时就需要多个计数器串联使用。8255 键盘实验极大的考验了我的汇编语言的理解和逻辑思路，这说明了，即使自己会使用汇编语言，但是设计出一个程序仍然需要不断的练习，掌握其中思路流程尤为重要。我还完成了数码管显示的操作，这让我明白了其中的显示原理，当然，通过编写键盘显示实验，我发现自己在汇编语言上的缺陷，这是我所要加强锻炼的地方并且达到熟练运用各种命令。</p>        <h2 id="实验三"   >          <a href="#实验三" class="heading-link"><i class="fas fa-link"></i></a>实验三</h2>              <h3 id="实验题目：-2"   >          <a href="#实验题目：-2" class="heading-link"><i class="fas fa-link"></i></a>实验题目：</h3>      <p>1．利用 0809 完成 1 个通道的模拟量采集，并利用 8255 输出二进制码。</p><p>2．利用 0832 产生锯齿波输出，并在直流电机上观察结果。</p>        <h3 id="实验目的：-2"   >          <a href="#实验目的：-2" class="heading-link"><i class="fas fa-link"></i></a>实验目的：</h3>      <p>熟悉汇编语言编程环境，掌握 0809 及 0832 芯片工作原理、电路设计及利用汇编语言编写接口软件。</p>        <h3 id="实验电路图-2"   >          <a href="#实验电路图-2" class="heading-link"><i class="fas fa-link"></i></a>实验电路图</h3>      <p><strong>1、模数转换</strong></p><p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200213200004.png" alt="模数转换"></p><p><strong>2、数模转换</strong></p><p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200213200041.png" alt="数模转换"></p>        <h3 id="软件设计程序流程图-2"   >          <a href="#软件设计程序流程图-2" class="heading-link"><i class="fas fa-link"></i></a>软件设计程序流程图</h3>      <p><img src="https://raw.githubusercontent.com/Pandalzy/cloud_img/master/img/blog20200213200059.png" alt="软件设计程序流程图"></p>        <h3 id="实验软件代码（加注释）-2"   >          <a href="#实验软件代码（加注释）-2" class="heading-link"><i class="fas fa-link"></i></a>实验软件代码（加注释）</h3>      <p><strong>1、通道的模拟量采集</strong></p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">;端口地址</span><br><span class="line">PORT_A EQU 280H</span><br><span class="line">PORT_B EQU 281H</span><br><span class="line">PORT_C EQU 282H</span><br><span class="line">PORT_CTL EQU 283H</span><br><span class="line">PORT_ADC EQU 288H</span><br><span class="line">CODE SEGMENT</span><br><span class="line">    ASSUME CS:CODE</span><br><span class="line">START:</span><br><span class="line">    MOV AL,10011001B;A、C口输入，B口输出</span><br><span class="line">    MOV DX,PORT_CTL</span><br><span class="line">    OUT DX,AL;写入8255A控制字</span><br><span class="line">RE:</span><br><span class="line">    ;MOV DX,PORT_C</span><br><span class="line">    ;IN AL,DX;检测EOC状态</span><br><span class="line">    ;TEST AL,80H</span><br><span class="line">    ;JNZ RE;为1，未开始转换，继续循环</span><br><span class="line">    MOV DX,PORT_ADC;指向0809通道0</span><br><span class="line">    OUT DX,AL;启动转换</span><br><span class="line">    MOV DX,PORT_C</span><br><span class="line">DE_EOC:</span><br><span class="line">    IN AL,DX;读入EOC</span><br><span class="line">    TEST AL,80H</span><br><span class="line">    JZ DE_EOC;为0，未转换完成，继续循环</span><br><span class="line">    MOV DX,PORT_ADC</span><br><span class="line">    IN AL,DX;读取0809数据到AL</span><br><span class="line">    MOV DX,PORT_B;选择B口</span><br><span class="line">    OUT DX,AL;输出到LED灯</span><br><span class="line">    JMP RE</span><br><span class="line">COED ENDS</span><br><span class="line">    END START</span><br></pre></td></tr></table></div></figure><p><strong>2、产生锯齿波输出</strong></p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">PORT_DAC EQU 290H;DAC口地址</span><br><span class="line">PORT_A EQU 280H;8255A</span><br><span class="line">PORT_B EQU 281H</span><br><span class="line">PORT_C EQU 282H</span><br><span class="line">PORT_CTL EQU 283H</span><br><span class="line">CLK_0 EQU 288H;8253计数器</span><br><span class="line">CLK_1 EQU 289H</span><br><span class="line">CLK_2 EQU 28AH</span><br><span class="line">CLK_CTL EQU 28BH</span><br><span class="line">CODE SEGMENT</span><br><span class="line">    ASSUME CS:CODE</span><br><span class="line">START:</span><br><span class="line">    MOV DX,PORT_CTL</span><br><span class="line">    MOV AL,10001001B;8255A，A、B输出，C口输入</span><br><span class="line">    OUT DX,AL</span><br><span class="line">    ;产生0.5ms一周期的时钟</span><br><span class="line">    MOV AL,00110111B;通道0，先低后高，方式3，BCD计数</span><br><span class="line">    MOV DX,CLK_CTL</span><br><span class="line">    OUT DX,AL</span><br><span class="line">    MOV DX,CLK_0</span><br><span class="line">    MOV AL,00H</span><br><span class="line">    OUT DX,AL</span><br><span class="line">    MOV AL,10H</span><br><span class="line">    OUT DX,AL</span><br><span class="line">    ;OUT0接CLK1</span><br><span class="line">    MOV AL,01110001B;通道1，先低后高，方式0，BCD计数</span><br><span class="line">    MOV DX,CLK_CTL</span><br><span class="line">    OUT DX,AL</span><br><span class="line">    MOV BL,0FFH;锯齿波上限</span><br><span class="line">AGAIN:</span><br><span class="line">    INC BL</span><br><span class="line">    MOV AL,BL</span><br><span class="line">    MOV DX,PORT_DAC</span><br><span class="line">    OUT DX,AL</span><br><span class="line"></span><br><span class="line">;8253通道0打入初始值，开始计时，延时20ms</span><br><span class="line">    MOV DX,CLK_1</span><br><span class="line">    MOV AL,40H</span><br><span class="line">    OUT DX,AL</span><br><span class="line">    MOV AL,00H</span><br><span class="line">    OUT DX,AL</span><br><span class="line">LOWER:</span><br><span class="line">    MOV DX,PORT_C</span><br><span class="line">    IN AL,DX;C口输入OUT1，检测低电平</span><br><span class="line">    TEST AL,01H</span><br><span class="line">    JNZ LOWER;为低电平，开始计数，不跳转</span><br><span class="line">HEIGHT:</span><br><span class="line">    MOV DX,PORT_C</span><br><span class="line">    IN AL,DX;C口输入OUT1，检测高电平</span><br><span class="line">    TEST AL,01H</span><br><span class="line">    JZ HEIGHT;为高电平，计数结束，不跳转</span><br><span class="line">    ;检测出上升沿，延时结束</span><br><span class="line"></span><br><span class="line">    JMP AGAIN</span><br><span class="line">CODE ENDS</span><br><span class="line">    END START</span><br></pre></td></tr></table></div></figure>        <h3 id="实验结果-2"   >          <a href="#实验结果-2" class="heading-link"><i class="fas fa-link"></i></a>实验结果</h3>      <p>1、通道的模拟量采集，通过旋转电压调节旋钮，八个 LED 灯，根据电压旋钮方向依次亮起或者依次熄灭；</p><p>2、产生锯齿波输出，通过设计的延时，LED 灯逐渐从暗到亮，电动机开始转动到停止。</p>        <h3 id="实验小结-2"   >          <a href="#实验小结-2" class="heading-link"><i class="fas fa-link"></i></a>实验小结</h3>      <p>​ 在微机实验的最后一次实验课中，我完成了利用 0809 采集一个通道模拟量，并通过 8255 输出二进制和利用 0832 和 8253 完成锯齿波波形的输出。实验过程中，因为我将 8253 两个串联定时器的通道选成一样的，导致我一直没有得到正确结果，这说明我对 8253 的理解并不是很透彻，仍需加强练习。8253 我使用了通道 3 改变时钟频率，串联通道 0 计时器，每次都重新打入计数值来进行计数，这样就避免了延时不正确的问题。虽然微机实验课结束了，但是我的学习之路还没有结束，我将继续学习各种芯片的作用，以便扩大我的知识面和增强我的实践能力。</p>]]></content>
      
      
      <categories>
          
          <category> 课程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微机原理与接口实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask学习01 - 快速上手</title>
      <link href="/2019/05/27/Flask%E5%AD%A6%E4%B9%A001-%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
      <url>/2019/05/27/Flask%E5%AD%A6%E4%B9%A001-%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</url>
      
        <content type="html"><![CDATA[        <h2 id="一个最小的应用"   >          <a href="#一个最小的应用" class="heading-link"><i class="fas fa-link"></i></a>一个最小的应用</h2>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hello.py</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, World!&#x27;</span></span><br></pre></td></tr></table></div></figure><span id="more"></span><p>在终端输入<code>python hello.py</code>运行 flask 应用，打开<code>http://127.0.0.1:5000/</code>就可以看到 <strong>Hello World!</strong></p><blockquote><p>外网可访问直接加<code>--host=0.0.0.0</code>即可</p><p>端口修改<code>--port=8000</code></p></blockquote>        <h2 id="路由"   >          <a href="#路由" class="heading-link"><i class="fas fa-link"></i></a>路由</h2>      <p>使用 <strong>route()</strong> 装饰器来把函数绑定到 URL:</p>        <h3 id="注册路由"   >          <a href="#注册路由" class="heading-link"><i class="fas fa-link"></i></a>注册路由</h3>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Index Page&#x27;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="为一个视图绑定多个-URL"   >          <a href="#为一个视图绑定多个-URL" class="heading-link"><i class="fas fa-link"></i></a>为一个视图绑定多个 URL</h3>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hi&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, World&#x27;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="变量规则"   >          <a href="#变量规则" class="heading-link"><i class="fas fa-link"></i></a>变量规则</h3>      <p>通过把 URL 的一部分标记为 <strong>&lt;variable_name&gt;</strong> 就可以在 URL 中添加变量。标记的部分会作为关键字参数传递给函数。通过使用 <strong>&lt;converter:variable_name&gt;</strong> ，可以选择性的加上一个转换器，为变量指定规则。</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/&lt;username&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_user_profile</span>(<span class="params">username</span>):</span></span><br><span class="line">    <span class="comment"># show the user profile for that user</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;User %s&#x27;</span> % username</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/post/&lt;int:post_id&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_post</span>(<span class="params">post_id</span>):</span></span><br><span class="line">    <span class="comment"># show the post with the given id, the id is an integer</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Post %d&#x27;</span> % post_id</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/path/&lt;path:subpath&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_subpath</span>(<span class="params">subpath</span>):</span></span><br><span class="line">    <span class="comment"># show the subpath after /path/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Subpath %s&#x27;</span> % subpath</span><br></pre></td></tr></table></div></figure><div class="table-container"><table><thead><tr><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">string</td><td align="center">不包含斜线的字符串</td></tr><tr><td align="center">int</td><td align="center">接受正整数</td></tr><tr><td align="center">float</td><td align="center">接受正浮点数</td></tr><tr><td align="center">path</td><td align="center">类似 string，但可以包含斜杠</td></tr><tr><td align="center">uuid</td><td align="center">接受 UUID 字符串</td></tr></tbody></table></div><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认参数</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/greet&#x27;</span>, defaults=&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;Pro&#x27;</span>&#125;</span>)</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/greet/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;h1&gt;Hello, %s!&lt;/h1&gt;&#x27;</span> % name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/greet&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/greet/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet</span>(<span class="params">name=<span class="string">&#x27;Pro&#x27;</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;h1&gt;Hello, %s!&lt;/h1&gt;&#x27;</span> % name</span><br></pre></td></tr></table></div></figure>        <h2 id="唯一的-URL-重定向行为"   >          <a href="#唯一的-URL-重定向行为" class="heading-link"><i class="fas fa-link"></i></a>唯一的 URL / 重定向行为</h2>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/projects/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">projects</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;The project page&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/about&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">about</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;The about page&#x27;</span></span><br></pre></td></tr></table></div></figure><p><code>projects</code> 的 URL 尾部有一个斜杠，看起来就如同一个文件夹。 访问一个没有斜杠结尾的 URL 时 Flask 会自动进行重定向，在尾部加上一个斜杠。</p><p><code>about</code> 的 URL 没有尾部斜杠，因此其行为表现与一个文件类似。如果访问这个 URL 时添加了尾部斜杠就会得到一个 404 错误。这样可以保持 URL 唯一，并帮助搜索引擎避免重复索引同一页面。</p>        <h2 id="配置"   >          <a href="#配置" class="heading-link"><i class="fas fa-link"></i></a>配置</h2>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置配置，配置的名称必须是大写</span></span><br><span class="line">app.config[<span class="string">&#x27;ADMIN_NAME&#x27;</span>] = <span class="string">&#x27;Padnalzy&#x27;</span></span><br><span class="line"><span class="comment"># 使用 update() 一次设置多个值</span></span><br><span class="line">app.config.update(</span><br><span class="line">TESTING=<span class="literal">True</span>,</span><br><span class="line">    SECRET_KEY=<span class="string">&#x27;_323k#JKf\nLDI&#x27;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># 读取配置</span></span><br><span class="line">value = app.config[<span class="string">&#x27;ADMIN_NAME&#x27;</span>]</span><br></pre></td></tr></table></div></figure>        <h2 id="URL-构建"   >          <a href="#URL-构建" class="heading-link"><i class="fas fa-link"></i></a>URL 构建</h2>      <p><strong>url_for()</strong> 函数用于构建指定函数的 URL ，它把函数名称作为第一个参数，可以接受任意个关键字参数，每个关键字对应 URL 中的变量，未知变量将添加到 URL 中作为查询参数，生成的 URL 是相对 URL 。</p><p>优点：</p><ol><li>反转通常比硬编码 URL 的描述性更好。</li><li>可以只在一个地方改变 URL ，而不用到处乱找。</li><li>URL 创建会处理特殊字符的转义和 Unicode 数据，比较直观。</li><li>生产的路径总是绝对路径，可以避免相对路径产生副作用。</li><li>如果应用是放在 URL 根路径之外的地方（如在 <strong>/myapplication</strong> 中，不在 <strong>/</strong> 中），<strong>url_for()</strong> 会妥善处理。</li></ol><p>如：用 <strong>test_request_context()</strong> 方法尝试使用 <strong>url_for()</strong> 。</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, url_for</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;index&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;login&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/&lt;username&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">profile</span>(<span class="params">username</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#123;&#125;\&#x27;s profile&#x27;</span>.<span class="built_in">format</span>(username)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> app.test_request_context():</span><br><span class="line">    <span class="built_in">print</span>(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(url_for(<span class="string">&#x27;login&#x27;</span>, <span class="built_in">next</span>=<span class="string">&#x27;/&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(url_for(<span class="string">&#x27;profile&#x27;</span>, username=<span class="string">&#x27;John Doe&#x27;</span>))</span><br><span class="line">    <span class="comment"># 返回的绝对地址</span></span><br><span class="line">    <span class="built_in">print</span>(url_for(<span class="string">&#x27;index&#x27;</span>, _external=<span class="literal">True</span>))</span><br></pre></td></tr></table></div></figure><p>输出结果：</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/</span><br><span class="line">/login</span><br><span class="line">/login?next=/</span><br><span class="line"><span class="meta">/user/John%</span><span class="bash">20Doe</span></span><br><span class="line">http://localhost:5000/</span><br></pre></td></tr></table></div></figure>        <h2 id="HTTP-方法"   >          <a href="#HTTP-方法" class="heading-link"><i class="fas fa-link"></i></a>HTTP 方法</h2>      <p>可以使用 <strong>route()</strong> 的 <strong>methods</strong>参数来处理不同的 HTTP 方法</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> do_the_login()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> show_the_login_form()</span><br></pre></td></tr></table></div></figure>        <h2 id="静态文件与模版"   >          <a href="#静态文件与模版" class="heading-link"><i class="fas fa-link"></i></a>静态文件与模版</h2>      <p>项目结构如下：</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hello/</span><br><span class="line">    - templates/</span><br><span class="line">    - static/</span><br><span class="line">    - app.py</span><br></pre></td></tr></table></div></figure>        <h3 id="静态文件"   >          <a href="#静态文件" class="heading-link"><i class="fas fa-link"></i></a>静态文件</h3>      <p>静态文件位于应用的 <strong>/static</strong> 中，一般是 CSS、JavaScript 或者 image 。</p><p>使用特定的 <strong>static</strong> 端点就可以生成相应的 URL</p><p><code>url_for(&#39;static&#39;, filename=&#39;style.css&#39;)</code></p><p>这个静态文件在文件系统中的位置是 <strong>static/style.css</strong></p>        <h3 id="渲染模块"   >          <a href="#渲染模块" class="heading-link"><i class="fas fa-link"></i></a>渲染模块</h3>      <p>使用 <strong>render_template()</strong> 方法可以渲染模板，只需将模板名称和相应参数传递给模板的变量。</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello/&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>(<span class="params">name=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;hello.html&#x27;</span>, name=name)</span><br></pre></td></tr></table></div></figure><p>Flask 会在 <strong>templates</strong> 文件夹内寻找模板。</p><p>模版示例：</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello from Flask<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">&#123;% if name %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;&#123; name &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></div></figure><p>在模版内部可以访问 <strong>request</strong> 、<strong>session</strong> 和 <strong>g</strong> 对象。</p>        <h2 id="请求对象"   >          <a href="#请求对象" class="heading-link"><i class="fas fa-link"></i></a>请求对象</h2>      <p><code>from flask import request</code> 导入请求对象</p><p>通过使用 <strong>method</strong> 属性可以操作当前请求方法，通过使用 <strong>form</strong> 属性处理表单数据（在 <strong>POST</strong> 或者 <strong>PUT</strong> 请求 中传输的数据），示例：</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    error = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> valid_login(request.form[<span class="string">&#x27;username&#x27;</span>],</span><br><span class="line">                       request.form[<span class="string">&#x27;password&#x27;</span>]):</span><br><span class="line">            <span class="keyword">return</span> log_the_user_in(request.form[<span class="string">&#x27;username&#x27;</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            error = <span class="string">&#x27;Invalid username/password&#x27;</span></span><br><span class="line">    <span class="comment"># the code below is executed if the request method</span></span><br><span class="line">    <span class="comment"># was GET or the credentials were invalid</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>, error=error)</span><br></pre></td></tr></table></div></figure><p>若要获得 URL 中的参数，可以使用 <strong>args</strong> 属性，<code>searchword = request.args.get(&#39;key&#39;, &#39;&#39;)</code></p>        <h2 id="文件上传"   >          <a href="#文件上传" class="heading-link"><i class="fas fa-link"></i></a>文件上传</h2>      <p>注意需要在 HTML 表单中设置 <code>enctype=&quot;multipart/form-data&quot;</code> 属性。</p><p>通过 <strong>files</strong> 属性访问上传的文件，每个上传的文件都储存在这个字典型属性中，<strong>save()</strong> 方法用于把上传的文件保存到服务器的文件系统中。</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_file</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        f = request.files[<span class="string">&#x27;the_file&#x27;</span>]</span><br><span class="line">        f.save(<span class="string">&#x27;/var/www/uploads/uploaded_file.txt&#x27;</span>)</span><br><span class="line">    ...</span><br></pre></td></tr></table></div></figure><p>可以使用 <strong>filename</strong> 属性获得文件的名字，但是这个是可以伪造的，如果想要把客户端的文件名作为服务器上的文件名， 可以通过 Werkzeug 提供的 <strong>secure_filename</strong> 函数：</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_file</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        f = request.files[<span class="string">&#x27;the_file&#x27;</span>]</span><br><span class="line">        f.save(<span class="string">&#x27;/var/www/uploads/&#x27;</span> + secure_filename(f.filename))</span><br><span class="line">    ...</span><br></pre></td></tr></table></div></figure>        <h2 id="Cookies"   >          <a href="#Cookies" class="heading-link"><i class="fas fa-link"></i></a>Cookies</h2>      <p>用 <strong>cookies</strong> 属性访问 cookies，用 <strong>set_cookie</strong> 方法来设置 cookies。请求对象的 <strong>cookies</strong> 属性是一个包含了客户端所有 cookies 的字典。</p><p>读取 cookies ：</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    username = request.cookies.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    <span class="comment"># use cookies.get(key) instead of cookies[key] to not get a</span></span><br><span class="line">    <span class="comment"># KeyError if the cookie is missing.</span></span><br></pre></td></tr></table></div></figure><p>存储 cookies ：</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> make_response</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    resp = make_response(render_template(...))</span><br><span class="line">    resp.set_cookie(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;the username&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> resp</span><br></pre></td></tr></table></div></figure>        <h2 id="重定向和错误"   >          <a href="#重定向和错误" class="heading-link"><i class="fas fa-link"></i></a>重定向和错误</h2>      <p>使用 <strong>redirect()</strong> 函数可以重定向，使用 <strong>abort()</strong> 可以更早退出请求，并返回错误代码：</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> abort, redirect, url_for</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    abort(<span class="number">401</span>)</span><br><span class="line">    this_is_never_executed()</span><br></pre></td></tr></table></div></figure><p>使用 <strong>errorhandler()</strong> 装饰器可以定制出错页面：</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">404</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_not_found</span>(<span class="params">error</span>):</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;page_not_found.html&#x27;</span>), <span class="number">404</span></span><br></pre></td></tr></table></div></figure>        <h2 id="关于响应"   >          <a href="#关于响应" class="heading-link"><i class="fas fa-link"></i></a>关于响应</h2>      <p>转换的规则：</p><ol><li>如果视图返回的是一个响应对象，那么就直接返回它。</li><li>如果返回的是一个字符串，那么根据这个字符串和缺省参数生成一个用于返回的响应对象。</li><li>如果返回的是一个元组，那么元组中的项目可以提供额外的信息。元组中必须至少包含一个项目，且项目应当由 <strong>(response, status, headers)</strong> 或者 <strong>(response, headers)</strong> 组成。 <strong>status</strong> 的值会重载状态代码， <strong>headers</strong> 是一个由额外头部值组成的列表或字典。</li><li>如果以上都不是，那么 Flask 会假定返回值是一个有效的 WSGI 应用并把它转换为一个响应对象。</li></ol><p>如果想要在视图内部掌控响应对象的结果，那么可以使用 <strong>make_response()</strong> 函数。</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">404</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">not_found</span>(<span class="params">error</span>):</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;error.html&#x27;</span>), <span class="number">404</span></span><br></pre></td></tr></table></div></figure><p>可以使用 <strong>make_response()</strong> 包裹返回表达式，获得响应对象，并对该对象进行修改，然后再返回：</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">404</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">not_found</span>(<span class="params">error</span>):</span></span><br><span class="line">    resp = make_response(render_template(<span class="string">&#x27;error.html&#x27;</span>), <span class="number">404</span>)</span><br><span class="line">    resp.headers[<span class="string">&#x27;X-Something&#x27;</span>] = <span class="string">&#x27;A value&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> resp</span><br></pre></td></tr></table></div></figure>        <h2 id="会话"   >          <a href="#会话" class="heading-link"><i class="fas fa-link"></i></a>会话</h2>      <p>除了请求对象之外还有一种称为 <strong>session</strong> 的对象，允许在不同请求之间储存信息。这个对象相当于用密钥签名加密的 cookie ，即用户可以查看 cookie ，但是如果没有密钥就无法修改它。</p><p>使用会话之前必须设置一个密钥。</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, session, redirect, url_for, escape, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the secret key to some random bytes. Keep this really secret!</span></span><br><span class="line">app.secret_key = <span class="string">b&#x27;_5#y2L&quot;F4Q8z\n\xec]/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Logged in as %s&#x27;</span> % escape(session[<span class="string">&#x27;username&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;You are not logged in&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        session[<span class="string">&#x27;username&#x27;</span>] = request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        &lt;form method=&quot;post&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;&lt;input type=text name=username&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;&lt;input type=submit value=Login&gt;</span></span><br><span class="line"><span class="string">        &lt;/form&gt;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/logout&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span>():</span></span><br><span class="line">    <span class="comment"># remove the username from the session if it&#x27;s there</span></span><br><span class="line">    session.pop(<span class="string">&#x27;username&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br></pre></td></tr></table></div></figure><p>这里用到的 <strong>escape()</strong> 是用来转义的。如果不使用模板引擎就可以像上例一样使用这个函数来转义。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python3 </tag>
            
            <tag> Flask学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask服务器部署</title>
      <link href="/2019/05/24/Flask%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/"/>
      <url>/2019/05/24/Flask%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[        <h2 id="安装-Nginx"   >          <a href="#安装-Nginx" class="heading-link"><i class="fas fa-link"></i></a>安装 Nginx</h2>      <p>yum install nginx</p>        <h2 id="基础环境安装"   >          <a href="#基础环境安装" class="heading-link"><i class="fas fa-link"></i></a>基础环境安装</h2>      <blockquote><p>环境配置（云服务同时存在 python2，安装下列环境的时候均改为 pip3 install XXX）</p></blockquote><ul><li>Nginx</li><li>VirtualEnv</li><li>uwsgi</li><li>flask<span id="more"></span></li></ul>        <h2 id="安装-VirtualEnv"   >          <a href="#安装-VirtualEnv" class="heading-link"><i class="fas fa-link"></i></a>安装 VirtualEnv</h2>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install virtualenv</span><br></pre></td></tr></table></div></figure><blockquote><p>安装完 <strong>virtualenv **后，进入自己的项目目录，通过 <code>virtualenv venv</code>（venv 可改为任意名字） 建立一个虚拟目录 **venv</strong> ，然后 <code>source venv/bin/activate</code> 进入虚拟环境 SSH 终端开始多了   <strong>(venv)</strong></p></blockquote><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install uwsgi</span><br><span class="line">pip3 install flask</span><br></pre></td></tr></table></div></figure>        <h2 id="项目文件（例子）"   >          <a href="#项目文件（例子）" class="heading-link"><i class="fas fa-link"></i></a>项目文件（例子）</h2>      <figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line"></span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&quot;&#x2F;&quot;)</span><br><span class="line">def index():</span><br><span class="line">    return &quot;Hello World!&quot;</span><br><span class="line"></span><br><span class="line"># 文件名 app.py</span><br></pre></td></tr></table></div></figure>        <h2 id="Nginx-转发设置"   >          <a href="#Nginx-转发设置" class="heading-link"><i class="fas fa-link"></i></a>Nginx 转发设置</h2>      <figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    charset      utf-8;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  domain;</span><br><span class="line">    root         &#x2F;www&#x2F;xxx&#x2F;app;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        include   uwsgi_params;</span><br><span class="line">        uwsgi_pass   127.0.0.1:3000;</span><br><span class="line">        uwsgi_param UWSGI_PYHOME &#x2F;www&#x2F;xxx&#x2F;app&#x2F;venv;</span><br><span class="line">        uwsgi_param UWSGI_CHDIR  &#x2F;www&#x2F;xxx&#x2F;app;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><code>service nginx start</code> 启动 <strong>nginx</strong> 转发</p>        <h2 id="配置-uwsgi"   >          <a href="#配置-uwsgi" class="heading-link"><i class="fas fa-link"></i></a>配置 uwsgi</h2>      <blockquote><p>touch uwsgi.ini 新建一个 ini 文件</p></blockquote>        <h3 id="配置文件内容"   >          <a href="#配置文件内容" class="heading-link"><i class="fas fa-link"></i></a>配置文件内容</h3>      <figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line">master &#x3D; true</span><br><span class="line"># venv 虚拟目录</span><br><span class="line">home &#x3D; &#x2F;www&#x2F;xxx&#x2F;app&#x2F;venv</span><br><span class="line"># 项目文件</span><br><span class="line">wsgi-file &#x3D; app.py</span><br><span class="line"># 应用的名字 app</span><br><span class="line">callable &#x3D; app</span><br><span class="line">socket &#x3D; 127.0.0.1:3000</span><br><span class="line">stats &#x3D; 127.0.0.1:9191</span><br><span class="line"># 进程信息 进程数量</span><br><span class="line">processes &#x3D; 1</span><br><span class="line"># 线程信息  线程数量</span><br><span class="line">threads &#x3D; 8</span><br><span class="line">buffer-size&#x3D;32768</span><br><span class="line"># 存进程id的文件</span><br><span class="line">pidfile&#x3D;uwsgi.pid</span><br><span class="line"># 日志文件</span><br><span class="line">daemonize&#x3D;uwsgi.log</span><br></pre></td></tr></table></div></figure><p><code>uwsgi --ini uwsgi.ini</code> 启动，<code>uwsgi --stop uwsgi.pid</code> 结束应用，<code>uwsgi --reload uwsgi.pid</code> 重载应用</p><p>打开 <strong>domain</strong> 就可以看到 <strong>Hello World!</strong> 了，说明部署成功</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
            <tag> Python3 </tag>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信支付后台</title>
      <link href="/2019/05/24/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E5%90%8E%E5%8F%B0/"/>
      <url>/2019/05/24/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E5%90%8E%E5%8F%B0/</url>
      
        <content type="html"><![CDATA[<p>写在前面：因为要做一个可以报名、缴费与打印准考证的小程序，所以花了一些时间完成了后端的编写与部署，代码开源连接在末尾</p>        <h2 id="准备工作"   >          <a href="#准备工作" class="heading-link"><i class="fas fa-link"></i></a>准备工作</h2>      <ul><li>商户号：一串数字、需要自行申请，需要一些证明材料</li><li>小程序 ID：已经认证并且加入支付功能，需提前发布以便商户审核通过</li><li>商户 KEY：在商户平台自己设置，MD5 32 位加密即可</li><li>一些参数</li></ul><span id="more"></span><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;appid&#x27;</span>: appid,  <span class="comment"># 小程序id</span></span><br><span class="line">    <span class="string">&#x27;mch_id&#x27;</span>: mch_id,  <span class="comment"># 商户号</span></span><br><span class="line">    <span class="string">&#x27;attach&#x27;</span>: attach,  <span class="comment"># 附加数据 非必需</span></span><br><span class="line">    <span class="string">&#x27;nonce_str&#x27;</span>: get_nonce_str(),  <span class="comment"># 获取随机字符串</span></span><br><span class="line">    <span class="string">&#x27;body&#x27;</span>: <span class="string">&#x27;JSAPI-Pay&#x27;</span>,  <span class="comment"># 商品描述</span></span><br><span class="line">    <span class="string">&#x27;out_trade_no&#x27;</span>: <span class="built_in">str</span>(<span class="built_in">int</span>(time.time())),  <span class="comment"># 商户订单号</span></span><br><span class="line">    <span class="string">&#x27;total_fee&#x27;</span>: total_fee,  <span class="comment"># 商品价格 以分为单位 整数</span></span><br><span class="line">    <span class="string">&#x27;spbill_create_ip&#x27;</span>: spbill_create_ip,  <span class="comment"># 终端ip 通过 socket 获取</span></span><br><span class="line">    <span class="string">&#x27;notify_url&#x27;</span>: notify_url,  <span class="comment"># 支付结果通知地址</span></span><br><span class="line">    <span class="string">&#x27;trade_type&#x27;</span>: trade_type,  <span class="comment"># 交易类型 小程序为 JSAPI</span></span><br><span class="line">    <span class="string">&#x27;openid&#x27;</span>: request.args.get(<span class="string">&#x27;openid&#x27;</span>)  <span class="comment"># 获取请求参数中的用户openid JSAPI支付必须传</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="签名算法（备注为另一种算法）"   >          <a href="#签名算法（备注为另一种算法）" class="heading-link"><i class="fas fa-link"></i></a>签名算法（备注为另一种算法）</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://pay.weixin.qq.com/wiki/doc/api/wxa/wxa_api.php?chapter=4_3" >官方文档</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>1、首先将所要发送的参数进行 ASCII 码从小到大排序，拼接成 url 参数形式，如：<strong>stringA=”appid=wxd930ea5d5a258f4f&amp;body=test&amp;device_info=1000&amp;mch_id=10000100&amp;nonce_str=ibuaiVcKdpRxkhJA”</strong></p><p>2、将商户 32 位 key 拼接  <strong>stringSignTemp=stringA+”&amp;key=192006250b4c09247ec02edce69f6a2d”</strong></p><p>3、<strong>MD5</strong> 加密，并转化为大写</p><p>代码如下</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_sign</span>(<span class="params">self, pay_data</span>):</span></span><br><span class="line">    stringA = <span class="string">&#x27;&amp;&#x27;</span>.join([<span class="string">&quot;&#123;0&#125;=&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(k, pay_data.get(k)) <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">sorted</span>(pay_data)])</span><br><span class="line">    stringSignTemp = <span class="string">&#x27;&#123;0&#125;&amp;key=&#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(stringA, self.merchant_key).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    sign = hashlib.md5(stringSignTemp).hexdigest()</span><br><span class="line">    <span class="keyword">return</span> sign.upper()</span><br></pre></td></tr></table></div></figure>        <h2 id="拼接-XML"   >          <a href="#拼接-XML" class="heading-link"><i class="fas fa-link"></i></a>拼接 XML</h2>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dict_to_xml</span>(<span class="params">dict_data</span>):</span></span><br><span class="line">    xml = [<span class="string">&quot;&lt;xml&gt;&quot;</span>]</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> dict_data.iteritems():</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;&#123;0&#125;&gt;&#123;1&#125;&lt;/&#123;0&#125;&gt;&quot;</span>.<span class="built_in">format</span>(k, v))</span><br><span class="line">    xml.append(<span class="string">&quot;&lt;/xml&gt;&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(xml)</span><br><span class="line"></span><br><span class="line">xml_data = dict_to_xml(self.pay_data)</span><br><span class="line">response = request(url=self.url, data=xml_data)</span><br></pre></td></tr></table></div></figure><p>在使用上述代码进行 xml 拼接的时候，<strong>prepay_id</strong> 返回数据为空。通过搜索，发现一种原因是终端 ip 的原因，所以修改为 <strong>socket</strong>  获取终端 ip ，但是返回数据仍然为空，然后我就猜想是 xml 拼接的问题，索性就用笨方法字符串拼接，然后 <strong>format</strong> 对 xml 字符串中的标识进行值的修改，返回数据成功。</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_pay_info</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="comment"># 调用签名函数</span></span><br><span class="line">    sign = self.create_sign(self.pay_data)</span><br><span class="line">    self.pay_data[<span class="string">&#x27;sign&#x27;</span>] = sign</span><br><span class="line">    <span class="comment"># 拼接 XMl</span></span><br><span class="line">    xmlstr = <span class="string">&#x27;&lt;xml&gt;&#x27;</span> \</span><br><span class="line">             <span class="string">&#x27;&lt;appid&gt;wxbcdbe97d7b353c80&lt;/appid&gt;&#x27;</span> \</span><br><span class="line">             <span class="string">&#x27;&lt;attach&gt;test&lt;/attach&gt;&#x27;</span> \</span><br><span class="line">             <span class="string">&#x27;&lt;body&gt;JSAPI-Pay&lt;/body&gt;&#x27;</span> \</span><br><span class="line">             <span class="string">&#x27;&lt;mch_id&gt;1526671931&lt;/mch_id&gt;&#x27;</span> \</span><br><span class="line">             <span class="string">&#x27;&lt;nonce_str&gt;&#123;nonce_str&#125;&lt;/nonce_str&gt;&#x27;</span> \</span><br><span class="line">             <span class="string">&#x27;&lt;notify_url&gt;https://file.cumtlee.cn/wxpay/notify&lt;/notify_url&gt;&#x27;</span> \</span><br><span class="line">             <span class="string">&#x27;&lt;openid&gt;&#123;openid&#125;&lt;/openid&gt;&#x27;</span> \</span><br><span class="line">             <span class="string">&#x27;&lt;out_trade_no&gt;&#123;out_trade_no&#125;&lt;/out_trade_no&gt;&#x27;</span> \</span><br><span class="line">             <span class="string">&#x27;&lt;spbill_create_ip&gt;&#123;spbill_create_ip&#125;&lt;/spbill_create_ip&gt;&#x27;</span> \</span><br><span class="line">             <span class="string">&#x27;&lt;total_fee&gt;5000&lt;/total_fee&gt;&#x27;</span> \</span><br><span class="line">             <span class="string">&#x27;&lt;trade_type&gt;JSAPI&lt;/trade_type&gt;&#x27;</span> \</span><br><span class="line">             <span class="string">&#x27;&lt;sign&gt;&#123;sign&#125;&lt;/sign&gt;&#x27;</span> \</span><br><span class="line">             <span class="string">&#x27;&lt;/xml&gt;&#x27;</span></span><br><span class="line">    xml = xmlstr.<span class="built_in">format</span>(nonce_str=self.pay_data[<span class="string">&#x27;nonce_str&#x27;</span>],</span><br><span class="line">                        openid=self.pay_data[<span class="string">&#x27;openid&#x27;</span>],</span><br><span class="line">                        out_trade_no=self.pay_data[<span class="string">&#x27;out_trade_no&#x27;</span>],</span><br><span class="line">                        spbill_create_ip=self.pay_data[<span class="string">&#x27;spbill_create_ip&#x27;</span>],</span><br><span class="line">                        sign=self.pay_data[<span class="string">&#x27;sign&#x27;</span>])</span><br><span class="line">    <span class="comment"># 统一下单接口请求</span></span><br><span class="line">    r = requests.post(self.url, data=xml.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    prepay_id = xml_to_dict(r.text).get(<span class="string">&#x27;prepay_id&#x27;</span>)</span><br><span class="line">    <span class="comment"># 对返回的 xml 解析</span></span><br><span class="line">    paySign_data = &#123;</span><br><span class="line">        <span class="string">&#x27;appId&#x27;</span>: self.pay_data.get(<span class="string">&#x27;appid&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;timeStamp&#x27;</span>: self.pay_data.get(<span class="string">&#x27;out_trade_no&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;nonceStr&#x27;</span>: self.pay_data.get(<span class="string">&#x27;nonce_str&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;package&#x27;</span>: <span class="string">&#x27;prepay_id=&#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(prepay_id),</span><br><span class="line">        <span class="string">&#x27;signType&#x27;</span>: <span class="string">&#x27;MD5&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 再次对返回的数据签名</span></span><br><span class="line">    paySign = self.create_sign(paySign_data)</span><br><span class="line">    paySign_data.pop(<span class="string">&#x27;appId&#x27;</span>)</span><br><span class="line">    paySign_data[<span class="string">&#x27;paySign&#x27;</span>] = paySign</span><br><span class="line">    <span class="keyword">return</span> paySign_data</span><br></pre></td></tr></table></div></figure><p>基于<span class="exturl"><a class="exturl__link"   href="https://github.com/ilyq/wxpay" >代码</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 进行了适当的修改，在此感谢。</p>        <h2 id="github-地址"   >          <a href="#github-地址" class="heading-link"><i class="fas fa-link"></i></a>github 地址</h2>      <blockquote><p><span class="exturl"><a class="exturl__link"   href="https://github.com/Pandalzy/wxpay" >开源链接</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
            <tag> Python3 </tag>
            
            <tag> WeChat </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
